
Smart_Home_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000064b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d6  00800060  000064b6  0000654a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  00800136  00800136  00006620  2**0
                  ALLOC
  3 .stab         00004e18  00000000  00000000  00006620  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017d1  00000000  00000000  0000b438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000cc09  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000cd69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000cef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000ef3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0001003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00010fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00011140  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00011402  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011c90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 f7 1b 	jmp	0x37ee	; 0x37ee <__vector_4>
      14:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__vector_5>
      18:	0c 94 04 22 	jmp	0x4408	; 0x4408 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f4 e6       	ldi	r31, 0x64	; 100
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 33       	cpi	r26, 0x36	; 54
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e3       	ldi	r26, 0x36	; 54
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 36       	cpi	r26, 0x65	; 101
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 37 22 	call	0x446e	; 0x446e <main>
      8a:	0c 94 59 32 	jmp	0x64b2	; 0x64b2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f1 31 	jmp	0x63e2	; 0x63e2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e2       	ldi	r26, 0x2D	; 45
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0d 32 	jmp	0x641a	; 0x641a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fd 31 	jmp	0x63fa	; 0x63fa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 19 32 	jmp	0x6432	; 0x6432 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fd 31 	jmp	0x63fa	; 0x63fa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 19 32 	jmp	0x6432	; 0x6432 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f1 31 	jmp	0x63e2	; 0x63e2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d e2       	ldi	r24, 0x2D	; 45
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0d 32 	jmp	0x641a	; 0x641a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f9 31 	jmp	0x63f2	; 0x63f2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e2       	ldi	r22, 0x2D	; 45
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 15 32 	jmp	0x642a	; 0x642a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 fd 31 	jmp	0x63fa	; 0x63fa <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 19 32 	jmp	0x6432	; 0x6432 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fd 31 	jmp	0x63fa	; 0x63fa <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 19 32 	jmp	0x6432	; 0x6432 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 fd 31 	jmp	0x63fa	; 0x63fa <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 19 32 	jmp	0x6432	; 0x6432 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 01 32 	jmp	0x6402	; 0x6402 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 1d 32 	jmp	0x643a	; 0x643a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <CLCD_voidSendCommand>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	c3 56       	subi	r28, 0x63	; 99
     cac:	d0 40       	sbci	r29, 0x00	; 0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	fe 01       	movw	r30, r28
     cba:	ed 59       	subi	r30, 0x9D	; 157
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	80 83       	st	Z, r24
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_u8PIN_LOW); /* Instruction Mode RS=0 */
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_u8PIN_LOW); /* Instruction Mode RW=0 */
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	61 e0       	ldi	r22, 0x01	; 1
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
     cd4:	fe 01       	movw	r30, r28
     cd6:	e1 5a       	subi	r30, 0xA1	; 161
     cd8:	ff 4f       	sbci	r31, 0xFF	; 255
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	a0 e8       	ldi	r26, 0x80	; 128
     ce0:	bf e3       	ldi	r27, 0x3F	; 63
     ce2:	80 83       	st	Z, r24
     ce4:	91 83       	std	Z+1, r25	; 0x01
     ce6:	a2 83       	std	Z+2, r26	; 0x02
     ce8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cea:	8e 01       	movw	r16, r28
     cec:	05 5a       	subi	r16, 0xA5	; 165
     cee:	1f 4f       	sbci	r17, 0xFF	; 255
     cf0:	fe 01       	movw	r30, r28
     cf2:	e1 5a       	subi	r30, 0xA1	; 161
     cf4:	ff 4f       	sbci	r31, 0xFF	; 255
     cf6:	60 81       	ld	r22, Z
     cf8:	71 81       	ldd	r23, Z+1	; 0x01
     cfa:	82 81       	ldd	r24, Z+2	; 0x02
     cfc:	93 81       	ldd	r25, Z+3	; 0x03
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	4a ef       	ldi	r20, 0xFA	; 250
     d04:	54 e4       	ldi	r21, 0x44	; 68
     d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d0a:	dc 01       	movw	r26, r24
     d0c:	cb 01       	movw	r24, r22
     d0e:	f8 01       	movw	r30, r16
     d10:	80 83       	st	Z, r24
     d12:	91 83       	std	Z+1, r25	; 0x01
     d14:	a2 83       	std	Z+2, r26	; 0x02
     d16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d18:	fe 01       	movw	r30, r28
     d1a:	e5 5a       	subi	r30, 0xA5	; 165
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	60 81       	ld	r22, Z
     d20:	71 81       	ldd	r23, Z+1	; 0x01
     d22:	82 81       	ldd	r24, Z+2	; 0x02
     d24:	93 81       	ldd	r25, Z+3	; 0x03
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e8       	ldi	r20, 0x80	; 128
     d2c:	5f e3       	ldi	r21, 0x3F	; 63
     d2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d32:	88 23       	and	r24, r24
     d34:	44 f4       	brge	.+16     	; 0xd46 <CLCD_voidSendCommand+0xa8>
		__ticks = 1;
     d36:	fe 01       	movw	r30, r28
     d38:	e7 5a       	subi	r30, 0xA7	; 167
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	80 83       	st	Z, r24
     d44:	64 c0       	rjmp	.+200    	; 0xe0e <CLCD_voidSendCommand+0x170>
	else if (__tmp > 65535)
     d46:	fe 01       	movw	r30, r28
     d48:	e5 5a       	subi	r30, 0xA5	; 165
     d4a:	ff 4f       	sbci	r31, 0xFF	; 255
     d4c:	60 81       	ld	r22, Z
     d4e:	71 81       	ldd	r23, Z+1	; 0x01
     d50:	82 81       	ldd	r24, Z+2	; 0x02
     d52:	93 81       	ldd	r25, Z+3	; 0x03
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	3f ef       	ldi	r19, 0xFF	; 255
     d58:	4f e7       	ldi	r20, 0x7F	; 127
     d5a:	57 e4       	ldi	r21, 0x47	; 71
     d5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d60:	18 16       	cp	r1, r24
     d62:	0c f0       	brlt	.+2      	; 0xd66 <CLCD_voidSendCommand+0xc8>
     d64:	43 c0       	rjmp	.+134    	; 0xdec <CLCD_voidSendCommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d66:	fe 01       	movw	r30, r28
     d68:	e1 5a       	subi	r30, 0xA1	; 161
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	60 81       	ld	r22, Z
     d6e:	71 81       	ldd	r23, Z+1	; 0x01
     d70:	82 81       	ldd	r24, Z+2	; 0x02
     d72:	93 81       	ldd	r25, Z+3	; 0x03
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e2       	ldi	r20, 0x20	; 32
     d7a:	51 e4       	ldi	r21, 0x41	; 65
     d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	8e 01       	movw	r16, r28
     d86:	07 5a       	subi	r16, 0xA7	; 167
     d88:	1f 4f       	sbci	r17, 0xFF	; 255
     d8a:	bc 01       	movw	r22, r24
     d8c:	cd 01       	movw	r24, r26
     d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d92:	dc 01       	movw	r26, r24
     d94:	cb 01       	movw	r24, r22
     d96:	f8 01       	movw	r30, r16
     d98:	91 83       	std	Z+1, r25	; 0x01
     d9a:	80 83       	st	Z, r24
     d9c:	1f c0       	rjmp	.+62     	; 0xddc <CLCD_voidSendCommand+0x13e>
     d9e:	fe 01       	movw	r30, r28
     da0:	e9 5a       	subi	r30, 0xA9	; 169
     da2:	ff 4f       	sbci	r31, 0xFF	; 255
     da4:	88 ec       	ldi	r24, 0xC8	; 200
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	91 83       	std	Z+1, r25	; 0x01
     daa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dac:	fe 01       	movw	r30, r28
     dae:	e9 5a       	subi	r30, 0xA9	; 169
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	80 81       	ld	r24, Z
     db4:	91 81       	ldd	r25, Z+1	; 0x01
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <CLCD_voidSendCommand+0x118>
     dba:	fe 01       	movw	r30, r28
     dbc:	e9 5a       	subi	r30, 0xA9	; 169
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	91 83       	std	Z+1, r25	; 0x01
     dc2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc4:	de 01       	movw	r26, r28
     dc6:	a7 5a       	subi	r26, 0xA7	; 167
     dc8:	bf 4f       	sbci	r27, 0xFF	; 255
     dca:	fe 01       	movw	r30, r28
     dcc:	e7 5a       	subi	r30, 0xA7	; 167
     dce:	ff 4f       	sbci	r31, 0xFF	; 255
     dd0:	80 81       	ld	r24, Z
     dd2:	91 81       	ldd	r25, Z+1	; 0x01
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	11 96       	adiw	r26, 0x01	; 1
     dd8:	9c 93       	st	X, r25
     dda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ddc:	fe 01       	movw	r30, r28
     dde:	e7 5a       	subi	r30, 0xA7	; 167
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	80 81       	ld	r24, Z
     de4:	91 81       	ldd	r25, Z+1	; 0x01
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	d1 f6       	brne	.-76     	; 0xd9e <CLCD_voidSendCommand+0x100>
     dea:	27 c0       	rjmp	.+78     	; 0xe3a <CLCD_voidSendCommand+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dec:	8e 01       	movw	r16, r28
     dee:	07 5a       	subi	r16, 0xA7	; 167
     df0:	1f 4f       	sbci	r17, 0xFF	; 255
     df2:	fe 01       	movw	r30, r28
     df4:	e5 5a       	subi	r30, 0xA5	; 165
     df6:	ff 4f       	sbci	r31, 0xFF	; 255
     df8:	60 81       	ld	r22, Z
     dfa:	71 81       	ldd	r23, Z+1	; 0x01
     dfc:	82 81       	ldd	r24, Z+2	; 0x02
     dfe:	93 81       	ldd	r25, Z+3	; 0x03
     e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	f8 01       	movw	r30, r16
     e0a:	91 83       	std	Z+1, r25	; 0x01
     e0c:	80 83       	st	Z, r24
     e0e:	de 01       	movw	r26, r28
     e10:	ab 5a       	subi	r26, 0xAB	; 171
     e12:	bf 4f       	sbci	r27, 0xFF	; 255
     e14:	fe 01       	movw	r30, r28
     e16:	e7 5a       	subi	r30, 0xA7	; 167
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	80 81       	ld	r24, Z
     e1c:	91 81       	ldd	r25, Z+1	; 0x01
     e1e:	8d 93       	st	X+, r24
     e20:	9c 93       	st	X, r25
     e22:	fe 01       	movw	r30, r28
     e24:	eb 5a       	subi	r30, 0xAB	; 171
     e26:	ff 4f       	sbci	r31, 0xFF	; 255
     e28:	80 81       	ld	r24, Z
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <CLCD_voidSendCommand+0x18e>
     e30:	fe 01       	movw	r30, r28
     e32:	eb 5a       	subi	r30, 0xAB	; 171
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	91 83       	std	Z+1, r25	; 0x01
     e38:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Enable LCD E=1 */
     e3a:	82 e0       	ldi	r24, 0x02	; 2
     e3c:	67 e0       	ldi	r22, 0x07	; 7
     e3e:	41 e0       	ldi	r20, 0x01	; 1
     e40:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
     e44:	fe 01       	movw	r30, r28
     e46:	ef 5a       	subi	r30, 0xAF	; 175
     e48:	ff 4f       	sbci	r31, 0xFF	; 255
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	a0 e8       	ldi	r26, 0x80	; 128
     e50:	bf e3       	ldi	r27, 0x3F	; 63
     e52:	80 83       	st	Z, r24
     e54:	91 83       	std	Z+1, r25	; 0x01
     e56:	a2 83       	std	Z+2, r26	; 0x02
     e58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5a:	8e 01       	movw	r16, r28
     e5c:	03 5b       	subi	r16, 0xB3	; 179
     e5e:	1f 4f       	sbci	r17, 0xFF	; 255
     e60:	fe 01       	movw	r30, r28
     e62:	ef 5a       	subi	r30, 0xAF	; 175
     e64:	ff 4f       	sbci	r31, 0xFF	; 255
     e66:	60 81       	ld	r22, Z
     e68:	71 81       	ldd	r23, Z+1	; 0x01
     e6a:	82 81       	ldd	r24, Z+2	; 0x02
     e6c:	93 81       	ldd	r25, Z+3	; 0x03
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	4a ef       	ldi	r20, 0xFA	; 250
     e74:	54 e4       	ldi	r21, 0x44	; 68
     e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	f8 01       	movw	r30, r16
     e80:	80 83       	st	Z, r24
     e82:	91 83       	std	Z+1, r25	; 0x01
     e84:	a2 83       	std	Z+2, r26	; 0x02
     e86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e88:	fe 01       	movw	r30, r28
     e8a:	e3 5b       	subi	r30, 0xB3	; 179
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	60 81       	ld	r22, Z
     e90:	71 81       	ldd	r23, Z+1	; 0x01
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e8       	ldi	r20, 0x80	; 128
     e9c:	5f e3       	ldi	r21, 0x3F	; 63
     e9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ea2:	88 23       	and	r24, r24
     ea4:	44 f4       	brge	.+16     	; 0xeb6 <CLCD_voidSendCommand+0x218>
		__ticks = 1;
     ea6:	fe 01       	movw	r30, r28
     ea8:	e5 5b       	subi	r30, 0xB5	; 181
     eaa:	ff 4f       	sbci	r31, 0xFF	; 255
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	91 83       	std	Z+1, r25	; 0x01
     eb2:	80 83       	st	Z, r24
     eb4:	64 c0       	rjmp	.+200    	; 0xf7e <CLCD_voidSendCommand+0x2e0>
	else if (__tmp > 65535)
     eb6:	fe 01       	movw	r30, r28
     eb8:	e3 5b       	subi	r30, 0xB3	; 179
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	60 81       	ld	r22, Z
     ebe:	71 81       	ldd	r23, Z+1	; 0x01
     ec0:	82 81       	ldd	r24, Z+2	; 0x02
     ec2:	93 81       	ldd	r25, Z+3	; 0x03
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	3f ef       	ldi	r19, 0xFF	; 255
     ec8:	4f e7       	ldi	r20, 0x7F	; 127
     eca:	57 e4       	ldi	r21, 0x47	; 71
     ecc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ed0:	18 16       	cp	r1, r24
     ed2:	0c f0       	brlt	.+2      	; 0xed6 <CLCD_voidSendCommand+0x238>
     ed4:	43 c0       	rjmp	.+134    	; 0xf5c <CLCD_voidSendCommand+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed6:	fe 01       	movw	r30, r28
     ed8:	ef 5a       	subi	r30, 0xAF	; 175
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	60 81       	ld	r22, Z
     ede:	71 81       	ldd	r23, Z+1	; 0x01
     ee0:	82 81       	ldd	r24, Z+2	; 0x02
     ee2:	93 81       	ldd	r25, Z+3	; 0x03
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e2       	ldi	r20, 0x20	; 32
     eea:	51 e4       	ldi	r21, 0x41	; 65
     eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	8e 01       	movw	r16, r28
     ef6:	05 5b       	subi	r16, 0xB5	; 181
     ef8:	1f 4f       	sbci	r17, 0xFF	; 255
     efa:	bc 01       	movw	r22, r24
     efc:	cd 01       	movw	r24, r26
     efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	f8 01       	movw	r30, r16
     f08:	91 83       	std	Z+1, r25	; 0x01
     f0a:	80 83       	st	Z, r24
     f0c:	1f c0       	rjmp	.+62     	; 0xf4c <CLCD_voidSendCommand+0x2ae>
     f0e:	fe 01       	movw	r30, r28
     f10:	e7 5b       	subi	r30, 0xB7	; 183
     f12:	ff 4f       	sbci	r31, 0xFF	; 255
     f14:	88 ec       	ldi	r24, 0xC8	; 200
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	91 83       	std	Z+1, r25	; 0x01
     f1a:	80 83       	st	Z, r24
     f1c:	fe 01       	movw	r30, r28
     f1e:	e7 5b       	subi	r30, 0xB7	; 183
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	80 81       	ld	r24, Z
     f24:	91 81       	ldd	r25, Z+1	; 0x01
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <CLCD_voidSendCommand+0x288>
     f2a:	fe 01       	movw	r30, r28
     f2c:	e7 5b       	subi	r30, 0xB7	; 183
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	91 83       	std	Z+1, r25	; 0x01
     f32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f34:	de 01       	movw	r26, r28
     f36:	a5 5b       	subi	r26, 0xB5	; 181
     f38:	bf 4f       	sbci	r27, 0xFF	; 255
     f3a:	fe 01       	movw	r30, r28
     f3c:	e5 5b       	subi	r30, 0xB5	; 181
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	80 81       	ld	r24, Z
     f42:	91 81       	ldd	r25, Z+1	; 0x01
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	11 96       	adiw	r26, 0x01	; 1
     f48:	9c 93       	st	X, r25
     f4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4c:	fe 01       	movw	r30, r28
     f4e:	e5 5b       	subi	r30, 0xB5	; 181
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	80 81       	ld	r24, Z
     f54:	91 81       	ldd	r25, Z+1	; 0x01
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	d1 f6       	brne	.-76     	; 0xf0e <CLCD_voidSendCommand+0x270>
     f5a:	27 c0       	rjmp	.+78     	; 0xfaa <CLCD_voidSendCommand+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f5c:	8e 01       	movw	r16, r28
     f5e:	05 5b       	subi	r16, 0xB5	; 181
     f60:	1f 4f       	sbci	r17, 0xFF	; 255
     f62:	fe 01       	movw	r30, r28
     f64:	e3 5b       	subi	r30, 0xB3	; 179
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	60 81       	ld	r22, Z
     f6a:	71 81       	ldd	r23, Z+1	; 0x01
     f6c:	82 81       	ldd	r24, Z+2	; 0x02
     f6e:	93 81       	ldd	r25, Z+3	; 0x03
     f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	f8 01       	movw	r30, r16
     f7a:	91 83       	std	Z+1, r25	; 0x01
     f7c:	80 83       	st	Z, r24
     f7e:	de 01       	movw	r26, r28
     f80:	a9 5b       	subi	r26, 0xB9	; 185
     f82:	bf 4f       	sbci	r27, 0xFF	; 255
     f84:	fe 01       	movw	r30, r28
     f86:	e5 5b       	subi	r30, 0xB5	; 181
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	80 81       	ld	r24, Z
     f8c:	91 81       	ldd	r25, Z+1	; 0x01
     f8e:	8d 93       	st	X+, r24
     f90:	9c 93       	st	X, r25
     f92:	fe 01       	movw	r30, r28
     f94:	e9 5b       	subi	r30, 0xB9	; 185
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	80 81       	ld	r24, Z
     f9a:	91 81       	ldd	r25, Z+1	; 0x01
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <CLCD_voidSendCommand+0x2fe>
     fa0:	fe 01       	movw	r30, r28
     fa2:	e9 5b       	subi	r30, 0xB9	; 185
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	91 83       	std	Z+1, r25	; 0x01
     fa8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */



#if (CLCD_DATA_BITS_MODE == 4)
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Command, 4));
     faa:	fe 01       	movw	r30, r28
     fac:	ed 59       	subi	r30, 0x9D	; 157
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	80 81       	ld	r24, Z
     fb2:	82 95       	swap	r24
     fb4:	8f 70       	andi	r24, 0x0F	; 15
     fb6:	98 2f       	mov	r25, r24
     fb8:	91 70       	andi	r25, 0x01	; 1
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	49 2f       	mov	r20, r25
     fc0:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Command, 5));
     fc4:	fe 01       	movw	r30, r28
     fc6:	ed 59       	subi	r30, 0x9D	; 157
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	80 81       	ld	r24, Z
     fcc:	82 95       	swap	r24
     fce:	86 95       	lsr	r24
     fd0:	87 70       	andi	r24, 0x07	; 7
     fd2:	98 2f       	mov	r25, r24
     fd4:	91 70       	andi	r25, 0x01	; 1
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	61 e0       	ldi	r22, 0x01	; 1
     fda:	49 2f       	mov	r20, r25
     fdc:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Command, 6));
     fe0:	fe 01       	movw	r30, r28
     fe2:	ed 59       	subi	r30, 0x9D	; 157
     fe4:	ff 4f       	sbci	r31, 0xFF	; 255
     fe6:	80 81       	ld	r24, Z
     fe8:	82 95       	swap	r24
     fea:	86 95       	lsr	r24
     fec:	86 95       	lsr	r24
     fee:	83 70       	andi	r24, 0x03	; 3
     ff0:	98 2f       	mov	r25, r24
     ff2:	91 70       	andi	r25, 0x01	; 1
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	62 e0       	ldi	r22, 0x02	; 2
     ff8:	49 2f       	mov	r20, r25
     ffa:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Command, 7));
     ffe:	fe 01       	movw	r30, r28
    1000:	ed 59       	subi	r30, 0x9D	; 157
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	80 81       	ld	r24, Z
    1006:	98 2f       	mov	r25, r24
    1008:	99 1f       	adc	r25, r25
    100a:	99 27       	eor	r25, r25
    100c:	99 1f       	adc	r25, r25
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	63 e0       	ldi	r22, 0x03	; 3
    1012:	49 2f       	mov	r20, r25
    1014:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
    1018:	fe 01       	movw	r30, r28
    101a:	ed 5b       	subi	r30, 0xBD	; 189
    101c:	ff 4f       	sbci	r31, 0xFF	; 255
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	a0 e8       	ldi	r26, 0x80	; 128
    1024:	bf e3       	ldi	r27, 0x3F	; 63
    1026:	80 83       	st	Z, r24
    1028:	91 83       	std	Z+1, r25	; 0x01
    102a:	a2 83       	std	Z+2, r26	; 0x02
    102c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    102e:	8e 01       	movw	r16, r28
    1030:	01 5c       	subi	r16, 0xC1	; 193
    1032:	1f 4f       	sbci	r17, 0xFF	; 255
    1034:	fe 01       	movw	r30, r28
    1036:	ed 5b       	subi	r30, 0xBD	; 189
    1038:	ff 4f       	sbci	r31, 0xFF	; 255
    103a:	60 81       	ld	r22, Z
    103c:	71 81       	ldd	r23, Z+1	; 0x01
    103e:	82 81       	ldd	r24, Z+2	; 0x02
    1040:	93 81       	ldd	r25, Z+3	; 0x03
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	4a ef       	ldi	r20, 0xFA	; 250
    1048:	54 e4       	ldi	r21, 0x44	; 68
    104a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	f8 01       	movw	r30, r16
    1054:	80 83       	st	Z, r24
    1056:	91 83       	std	Z+1, r25	; 0x01
    1058:	a2 83       	std	Z+2, r26	; 0x02
    105a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    105c:	fe 01       	movw	r30, r28
    105e:	ff 96       	adiw	r30, 0x3f	; 63
    1060:	60 81       	ld	r22, Z
    1062:	71 81       	ldd	r23, Z+1	; 0x01
    1064:	82 81       	ldd	r24, Z+2	; 0x02
    1066:	93 81       	ldd	r25, Z+3	; 0x03
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	40 e8       	ldi	r20, 0x80	; 128
    106e:	5f e3       	ldi	r21, 0x3F	; 63
    1070:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1074:	88 23       	and	r24, r24
    1076:	2c f4       	brge	.+10     	; 0x1082 <CLCD_voidSendCommand+0x3e4>
		__ticks = 1;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9e af       	std	Y+62, r25	; 0x3e
    107e:	8d af       	std	Y+61, r24	; 0x3d
    1080:	46 c0       	rjmp	.+140    	; 0x110e <CLCD_voidSendCommand+0x470>
	else if (__tmp > 65535)
    1082:	fe 01       	movw	r30, r28
    1084:	ff 96       	adiw	r30, 0x3f	; 63
    1086:	60 81       	ld	r22, Z
    1088:	71 81       	ldd	r23, Z+1	; 0x01
    108a:	82 81       	ldd	r24, Z+2	; 0x02
    108c:	93 81       	ldd	r25, Z+3	; 0x03
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	3f ef       	ldi	r19, 0xFF	; 255
    1092:	4f e7       	ldi	r20, 0x7F	; 127
    1094:	57 e4       	ldi	r21, 0x47	; 71
    1096:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    109a:	18 16       	cp	r1, r24
    109c:	64 f5       	brge	.+88     	; 0x10f6 <CLCD_voidSendCommand+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109e:	fe 01       	movw	r30, r28
    10a0:	ed 5b       	subi	r30, 0xBD	; 189
    10a2:	ff 4f       	sbci	r31, 0xFF	; 255
    10a4:	60 81       	ld	r22, Z
    10a6:	71 81       	ldd	r23, Z+1	; 0x01
    10a8:	82 81       	ldd	r24, Z+2	; 0x02
    10aa:	93 81       	ldd	r25, Z+3	; 0x03
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e2       	ldi	r20, 0x20	; 32
    10b2:	51 e4       	ldi	r21, 0x41	; 65
    10b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	bc 01       	movw	r22, r24
    10be:	cd 01       	movw	r24, r26
    10c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	9e af       	std	Y+62, r25	; 0x3e
    10ca:	8d af       	std	Y+61, r24	; 0x3d
    10cc:	0f c0       	rjmp	.+30     	; 0x10ec <CLCD_voidSendCommand+0x44e>
    10ce:	88 ec       	ldi	r24, 0xC8	; 200
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	9c af       	std	Y+60, r25	; 0x3c
    10d4:	8b af       	std	Y+59, r24	; 0x3b
    10d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    10d8:	9c ad       	ldd	r25, Y+60	; 0x3c
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	f1 f7       	brne	.-4      	; 0x10da <CLCD_voidSendCommand+0x43c>
    10de:	9c af       	std	Y+60, r25	; 0x3c
    10e0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    10e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	9e af       	std	Y+62, r25	; 0x3e
    10ea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    10ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	69 f7       	brne	.-38     	; 0x10ce <CLCD_voidSendCommand+0x430>
    10f4:	16 c0       	rjmp	.+44     	; 0x1122 <CLCD_voidSendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f6:	fe 01       	movw	r30, r28
    10f8:	ff 96       	adiw	r30, 0x3f	; 63
    10fa:	60 81       	ld	r22, Z
    10fc:	71 81       	ldd	r23, Z+1	; 0x01
    10fe:	82 81       	ldd	r24, Z+2	; 0x02
    1100:	93 81       	ldd	r25, Z+3	; 0x03
    1102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	9e af       	std	Y+62, r25	; 0x3e
    110c:	8d af       	std	Y+61, r24	; 0x3d
    110e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1110:	9e ad       	ldd	r25, Y+62	; 0x3e
    1112:	9a af       	std	Y+58, r25	; 0x3a
    1114:	89 af       	std	Y+57, r24	; 0x39
    1116:	89 ad       	ldd	r24, Y+57	; 0x39
    1118:	9a ad       	ldd	r25, Y+58	; 0x3a
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <CLCD_voidSendCommand+0x47c>
    111e:	9a af       	std	Y+58, r25	; 0x3a
    1120:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=0 */
    1122:	82 e0       	ldi	r24, 0x02	; 2
    1124:	67 e0       	ldi	r22, 0x07	; 7
    1126:	40 e0       	ldi	r20, 0x00	; 0
    1128:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a0 e8       	ldi	r26, 0x80	; 128
    1132:	bf e3       	ldi	r27, 0x3F	; 63
    1134:	8d ab       	std	Y+53, r24	; 0x35
    1136:	9e ab       	std	Y+54, r25	; 0x36
    1138:	af ab       	std	Y+55, r26	; 0x37
    113a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    113c:	6d a9       	ldd	r22, Y+53	; 0x35
    113e:	7e a9       	ldd	r23, Y+54	; 0x36
    1140:	8f a9       	ldd	r24, Y+55	; 0x37
    1142:	98 ad       	ldd	r25, Y+56	; 0x38
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	4a ef       	ldi	r20, 0xFA	; 250
    114a:	54 e4       	ldi	r21, 0x44	; 68
    114c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	89 ab       	std	Y+49, r24	; 0x31
    1156:	9a ab       	std	Y+50, r25	; 0x32
    1158:	ab ab       	std	Y+51, r26	; 0x33
    115a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    115c:	69 a9       	ldd	r22, Y+49	; 0x31
    115e:	7a a9       	ldd	r23, Y+50	; 0x32
    1160:	8b a9       	ldd	r24, Y+51	; 0x33
    1162:	9c a9       	ldd	r25, Y+52	; 0x34
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	40 e8       	ldi	r20, 0x80	; 128
    116a:	5f e3       	ldi	r21, 0x3F	; 63
    116c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1170:	88 23       	and	r24, r24
    1172:	2c f4       	brge	.+10     	; 0x117e <CLCD_voidSendCommand+0x4e0>
		__ticks = 1;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	98 ab       	std	Y+48, r25	; 0x30
    117a:	8f a7       	std	Y+47, r24	; 0x2f
    117c:	3f c0       	rjmp	.+126    	; 0x11fc <CLCD_voidSendCommand+0x55e>
	else if (__tmp > 65535)
    117e:	69 a9       	ldd	r22, Y+49	; 0x31
    1180:	7a a9       	ldd	r23, Y+50	; 0x32
    1182:	8b a9       	ldd	r24, Y+51	; 0x33
    1184:	9c a9       	ldd	r25, Y+52	; 0x34
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	3f ef       	ldi	r19, 0xFF	; 255
    118a:	4f e7       	ldi	r20, 0x7F	; 127
    118c:	57 e4       	ldi	r21, 0x47	; 71
    118e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1192:	18 16       	cp	r1, r24
    1194:	4c f5       	brge	.+82     	; 0x11e8 <CLCD_voidSendCommand+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1196:	6d a9       	ldd	r22, Y+53	; 0x35
    1198:	7e a9       	ldd	r23, Y+54	; 0x36
    119a:	8f a9       	ldd	r24, Y+55	; 0x37
    119c:	98 ad       	ldd	r25, Y+56	; 0x38
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e2       	ldi	r20, 0x20	; 32
    11a4:	51 e4       	ldi	r21, 0x41	; 65
    11a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	bc 01       	movw	r22, r24
    11b0:	cd 01       	movw	r24, r26
    11b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	98 ab       	std	Y+48, r25	; 0x30
    11bc:	8f a7       	std	Y+47, r24	; 0x2f
    11be:	0f c0       	rjmp	.+30     	; 0x11de <CLCD_voidSendCommand+0x540>
    11c0:	88 ec       	ldi	r24, 0xC8	; 200
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	9e a7       	std	Y+46, r25	; 0x2e
    11c6:	8d a7       	std	Y+45, r24	; 0x2d
    11c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    11ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	f1 f7       	brne	.-4      	; 0x11cc <CLCD_voidSendCommand+0x52e>
    11d0:	9e a7       	std	Y+46, r25	; 0x2e
    11d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    11d6:	98 a9       	ldd	r25, Y+48	; 0x30
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	98 ab       	std	Y+48, r25	; 0x30
    11dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11de:	8f a5       	ldd	r24, Y+47	; 0x2f
    11e0:	98 a9       	ldd	r25, Y+48	; 0x30
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	69 f7       	brne	.-38     	; 0x11c0 <CLCD_voidSendCommand+0x522>
    11e6:	14 c0       	rjmp	.+40     	; 0x1210 <CLCD_voidSendCommand+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e8:	69 a9       	ldd	r22, Y+49	; 0x31
    11ea:	7a a9       	ldd	r23, Y+50	; 0x32
    11ec:	8b a9       	ldd	r24, Y+51	; 0x33
    11ee:	9c a9       	ldd	r25, Y+52	; 0x34
    11f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	98 ab       	std	Y+48, r25	; 0x30
    11fa:	8f a7       	std	Y+47, r24	; 0x2f
    11fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    11fe:	98 a9       	ldd	r25, Y+48	; 0x30
    1200:	9c a7       	std	Y+44, r25	; 0x2c
    1202:	8b a7       	std	Y+43, r24	; 0x2b
    1204:	8b a5       	ldd	r24, Y+43	; 0x2b
    1206:	9c a5       	ldd	r25, Y+44	; 0x2c
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	f1 f7       	brne	.-4      	; 0x1208 <CLCD_voidSendCommand+0x56a>
    120c:	9c a7       	std	Y+44, r25	; 0x2c
    120e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Disable LCD E=1 */
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	67 e0       	ldi	r22, 0x07	; 7
    1214:	41 e0       	ldi	r20, 0x01	; 1
    1216:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a0 e8       	ldi	r26, 0x80	; 128
    1220:	bf e3       	ldi	r27, 0x3F	; 63
    1222:	8f a3       	std	Y+39, r24	; 0x27
    1224:	98 a7       	std	Y+40, r25	; 0x28
    1226:	a9 a7       	std	Y+41, r26	; 0x29
    1228:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122a:	6f a1       	ldd	r22, Y+39	; 0x27
    122c:	78 a5       	ldd	r23, Y+40	; 0x28
    122e:	89 a5       	ldd	r24, Y+41	; 0x29
    1230:	9a a5       	ldd	r25, Y+42	; 0x2a
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	4a ef       	ldi	r20, 0xFA	; 250
    1238:	54 e4       	ldi	r21, 0x44	; 68
    123a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	8b a3       	std	Y+35, r24	; 0x23
    1244:	9c a3       	std	Y+36, r25	; 0x24
    1246:	ad a3       	std	Y+37, r26	; 0x25
    1248:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    124a:	6b a1       	ldd	r22, Y+35	; 0x23
    124c:	7c a1       	ldd	r23, Y+36	; 0x24
    124e:	8d a1       	ldd	r24, Y+37	; 0x25
    1250:	9e a1       	ldd	r25, Y+38	; 0x26
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e8       	ldi	r20, 0x80	; 128
    1258:	5f e3       	ldi	r21, 0x3F	; 63
    125a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    125e:	88 23       	and	r24, r24
    1260:	2c f4       	brge	.+10     	; 0x126c <CLCD_voidSendCommand+0x5ce>
		__ticks = 1;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9a a3       	std	Y+34, r25	; 0x22
    1268:	89 a3       	std	Y+33, r24	; 0x21
    126a:	3f c0       	rjmp	.+126    	; 0x12ea <CLCD_voidSendCommand+0x64c>
	else if (__tmp > 65535)
    126c:	6b a1       	ldd	r22, Y+35	; 0x23
    126e:	7c a1       	ldd	r23, Y+36	; 0x24
    1270:	8d a1       	ldd	r24, Y+37	; 0x25
    1272:	9e a1       	ldd	r25, Y+38	; 0x26
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	3f ef       	ldi	r19, 0xFF	; 255
    1278:	4f e7       	ldi	r20, 0x7F	; 127
    127a:	57 e4       	ldi	r21, 0x47	; 71
    127c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1280:	18 16       	cp	r1, r24
    1282:	4c f5       	brge	.+82     	; 0x12d6 <CLCD_voidSendCommand+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1284:	6f a1       	ldd	r22, Y+39	; 0x27
    1286:	78 a5       	ldd	r23, Y+40	; 0x28
    1288:	89 a5       	ldd	r24, Y+41	; 0x29
    128a:	9a a5       	ldd	r25, Y+42	; 0x2a
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e2       	ldi	r20, 0x20	; 32
    1292:	51 e4       	ldi	r21, 0x41	; 65
    1294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	bc 01       	movw	r22, r24
    129e:	cd 01       	movw	r24, r26
    12a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	9a a3       	std	Y+34, r25	; 0x22
    12aa:	89 a3       	std	Y+33, r24	; 0x21
    12ac:	0f c0       	rjmp	.+30     	; 0x12cc <CLCD_voidSendCommand+0x62e>
    12ae:	88 ec       	ldi	r24, 0xC8	; 200
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	98 a3       	std	Y+32, r25	; 0x20
    12b4:	8f 8f       	std	Y+31, r24	; 0x1f
    12b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12b8:	98 a1       	ldd	r25, Y+32	; 0x20
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <CLCD_voidSendCommand+0x61c>
    12be:	98 a3       	std	Y+32, r25	; 0x20
    12c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c2:	89 a1       	ldd	r24, Y+33	; 0x21
    12c4:	9a a1       	ldd	r25, Y+34	; 0x22
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	9a a3       	std	Y+34, r25	; 0x22
    12ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12cc:	89 a1       	ldd	r24, Y+33	; 0x21
    12ce:	9a a1       	ldd	r25, Y+34	; 0x22
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	69 f7       	brne	.-38     	; 0x12ae <CLCD_voidSendCommand+0x610>
    12d4:	14 c0       	rjmp	.+40     	; 0x12fe <CLCD_voidSendCommand+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d6:	6b a1       	ldd	r22, Y+35	; 0x23
    12d8:	7c a1       	ldd	r23, Y+36	; 0x24
    12da:	8d a1       	ldd	r24, Y+37	; 0x25
    12dc:	9e a1       	ldd	r25, Y+38	; 0x26
    12de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	9a a3       	std	Y+34, r25	; 0x22
    12e8:	89 a3       	std	Y+33, r24	; 0x21
    12ea:	89 a1       	ldd	r24, Y+33	; 0x21
    12ec:	9a a1       	ldd	r25, Y+34	; 0x22
    12ee:	9e 8f       	std	Y+30, r25	; 0x1e
    12f0:	8d 8f       	std	Y+29, r24	; 0x1d
    12f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <CLCD_voidSendCommand+0x658>
    12fa:	9e 8f       	std	Y+30, r25	; 0x1e
    12fc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Command, 0));
    12fe:	fe 01       	movw	r30, r28
    1300:	ed 59       	subi	r30, 0x9D	; 157
    1302:	ff 4f       	sbci	r31, 0xFF	; 255
    1304:	80 81       	ld	r24, Z
    1306:	98 2f       	mov	r25, r24
    1308:	91 70       	andi	r25, 0x01	; 1
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	49 2f       	mov	r20, r25
    1310:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Command, 1));
    1314:	fe 01       	movw	r30, r28
    1316:	ed 59       	subi	r30, 0x9D	; 157
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	80 81       	ld	r24, Z
    131c:	86 95       	lsr	r24
    131e:	98 2f       	mov	r25, r24
    1320:	91 70       	andi	r25, 0x01	; 1
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	61 e0       	ldi	r22, 0x01	; 1
    1326:	49 2f       	mov	r20, r25
    1328:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Command, 2));
    132c:	fe 01       	movw	r30, r28
    132e:	ed 59       	subi	r30, 0x9D	; 157
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	80 81       	ld	r24, Z
    1334:	86 95       	lsr	r24
    1336:	86 95       	lsr	r24
    1338:	98 2f       	mov	r25, r24
    133a:	91 70       	andi	r25, 0x01	; 1
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	62 e0       	ldi	r22, 0x02	; 2
    1340:	49 2f       	mov	r20, r25
    1342:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Command, 3));
    1346:	fe 01       	movw	r30, r28
    1348:	ed 59       	subi	r30, 0x9D	; 157
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	80 81       	ld	r24, Z
    134e:	86 95       	lsr	r24
    1350:	86 95       	lsr	r24
    1352:	86 95       	lsr	r24
    1354:	98 2f       	mov	r25, r24
    1356:	91 70       	andi	r25, 0x01	; 1
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	63 e0       	ldi	r22, 0x03	; 3
    135c:	49 2f       	mov	r20, r25
    135e:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	a0 e8       	ldi	r26, 0x80	; 128
    1368:	bf e3       	ldi	r27, 0x3F	; 63
    136a:	89 8f       	std	Y+25, r24	; 0x19
    136c:	9a 8f       	std	Y+26, r25	; 0x1a
    136e:	ab 8f       	std	Y+27, r26	; 0x1b
    1370:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1372:	69 8d       	ldd	r22, Y+25	; 0x19
    1374:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1376:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1378:	9c 8d       	ldd	r25, Y+28	; 0x1c
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	4a ef       	ldi	r20, 0xFA	; 250
    1380:	54 e4       	ldi	r21, 0x44	; 68
    1382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	8d 8b       	std	Y+21, r24	; 0x15
    138c:	9e 8b       	std	Y+22, r25	; 0x16
    138e:	af 8b       	std	Y+23, r26	; 0x17
    1390:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1392:	6d 89       	ldd	r22, Y+21	; 0x15
    1394:	7e 89       	ldd	r23, Y+22	; 0x16
    1396:	8f 89       	ldd	r24, Y+23	; 0x17
    1398:	98 8d       	ldd	r25, Y+24	; 0x18
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 e8       	ldi	r20, 0x80	; 128
    13a0:	5f e3       	ldi	r21, 0x3F	; 63
    13a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13a6:	88 23       	and	r24, r24
    13a8:	2c f4       	brge	.+10     	; 0x13b4 <CLCD_voidSendCommand+0x716>
		__ticks = 1;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	9c 8b       	std	Y+20, r25	; 0x14
    13b0:	8b 8b       	std	Y+19, r24	; 0x13
    13b2:	3f c0       	rjmp	.+126    	; 0x1432 <CLCD_voidSendCommand+0x794>
	else if (__tmp > 65535)
    13b4:	6d 89       	ldd	r22, Y+21	; 0x15
    13b6:	7e 89       	ldd	r23, Y+22	; 0x16
    13b8:	8f 89       	ldd	r24, Y+23	; 0x17
    13ba:	98 8d       	ldd	r25, Y+24	; 0x18
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	3f ef       	ldi	r19, 0xFF	; 255
    13c0:	4f e7       	ldi	r20, 0x7F	; 127
    13c2:	57 e4       	ldi	r21, 0x47	; 71
    13c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13c8:	18 16       	cp	r1, r24
    13ca:	4c f5       	brge	.+82     	; 0x141e <CLCD_voidSendCommand+0x780>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13cc:	69 8d       	ldd	r22, Y+25	; 0x19
    13ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	40 e2       	ldi	r20, 0x20	; 32
    13da:	51 e4       	ldi	r21, 0x41	; 65
    13dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	bc 01       	movw	r22, r24
    13e6:	cd 01       	movw	r24, r26
    13e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	9c 8b       	std	Y+20, r25	; 0x14
    13f2:	8b 8b       	std	Y+19, r24	; 0x13
    13f4:	0f c0       	rjmp	.+30     	; 0x1414 <CLCD_voidSendCommand+0x776>
    13f6:	88 ec       	ldi	r24, 0xC8	; 200
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	9a 8b       	std	Y+18, r25	; 0x12
    13fc:	89 8b       	std	Y+17, r24	; 0x11
    13fe:	89 89       	ldd	r24, Y+17	; 0x11
    1400:	9a 89       	ldd	r25, Y+18	; 0x12
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	f1 f7       	brne	.-4      	; 0x1402 <CLCD_voidSendCommand+0x764>
    1406:	9a 8b       	std	Y+18, r25	; 0x12
    1408:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    140a:	8b 89       	ldd	r24, Y+19	; 0x13
    140c:	9c 89       	ldd	r25, Y+20	; 0x14
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	9c 8b       	std	Y+20, r25	; 0x14
    1412:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1414:	8b 89       	ldd	r24, Y+19	; 0x13
    1416:	9c 89       	ldd	r25, Y+20	; 0x14
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	69 f7       	brne	.-38     	; 0x13f6 <CLCD_voidSendCommand+0x758>
    141c:	14 c0       	rjmp	.+40     	; 0x1446 <CLCD_voidSendCommand+0x7a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141e:	6d 89       	ldd	r22, Y+21	; 0x15
    1420:	7e 89       	ldd	r23, Y+22	; 0x16
    1422:	8f 89       	ldd	r24, Y+23	; 0x17
    1424:	98 8d       	ldd	r25, Y+24	; 0x18
    1426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	9c 8b       	std	Y+20, r25	; 0x14
    1430:	8b 8b       	std	Y+19, r24	; 0x13
    1432:	8b 89       	ldd	r24, Y+19	; 0x13
    1434:	9c 89       	ldd	r25, Y+20	; 0x14
    1436:	98 8b       	std	Y+16, r25	; 0x10
    1438:	8f 87       	std	Y+15, r24	; 0x0f
    143a:	8f 85       	ldd	r24, Y+15	; 0x0f
    143c:	98 89       	ldd	r25, Y+16	; 0x10
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	f1 f7       	brne	.-4      	; 0x143e <CLCD_voidSendCommand+0x7a0>
    1442:	98 8b       	std	Y+16, r25	; 0x10
    1444:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=0 */
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	67 e0       	ldi	r22, 0x07	; 7
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a0 e8       	ldi	r26, 0x80	; 128
    1456:	bf e3       	ldi	r27, 0x3F	; 63
    1458:	8b 87       	std	Y+11, r24	; 0x0b
    145a:	9c 87       	std	Y+12, r25	; 0x0c
    145c:	ad 87       	std	Y+13, r26	; 0x0d
    145e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1460:	6b 85       	ldd	r22, Y+11	; 0x0b
    1462:	7c 85       	ldd	r23, Y+12	; 0x0c
    1464:	8d 85       	ldd	r24, Y+13	; 0x0d
    1466:	9e 85       	ldd	r25, Y+14	; 0x0e
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	4a ef       	ldi	r20, 0xFA	; 250
    146e:	54 e4       	ldi	r21, 0x44	; 68
    1470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	8f 83       	std	Y+7, r24	; 0x07
    147a:	98 87       	std	Y+8, r25	; 0x08
    147c:	a9 87       	std	Y+9, r26	; 0x09
    147e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1480:	6f 81       	ldd	r22, Y+7	; 0x07
    1482:	78 85       	ldd	r23, Y+8	; 0x08
    1484:	89 85       	ldd	r24, Y+9	; 0x09
    1486:	9a 85       	ldd	r25, Y+10	; 0x0a
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e8       	ldi	r20, 0x80	; 128
    148e:	5f e3       	ldi	r21, 0x3F	; 63
    1490:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1494:	88 23       	and	r24, r24
    1496:	2c f4       	brge	.+10     	; 0x14a2 <CLCD_voidSendCommand+0x804>
		__ticks = 1;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	9e 83       	std	Y+6, r25	; 0x06
    149e:	8d 83       	std	Y+5, r24	; 0x05
    14a0:	3f c0       	rjmp	.+126    	; 0x1520 <CLCD_voidSendCommand+0x882>
	else if (__tmp > 65535)
    14a2:	6f 81       	ldd	r22, Y+7	; 0x07
    14a4:	78 85       	ldd	r23, Y+8	; 0x08
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	3f ef       	ldi	r19, 0xFF	; 255
    14ae:	4f e7       	ldi	r20, 0x7F	; 127
    14b0:	57 e4       	ldi	r21, 0x47	; 71
    14b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14b6:	18 16       	cp	r1, r24
    14b8:	4c f5       	brge	.+82     	; 0x150c <CLCD_voidSendCommand+0x86e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    14bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14be:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e2       	ldi	r20, 0x20	; 32
    14c8:	51 e4       	ldi	r21, 0x41	; 65
    14ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	bc 01       	movw	r22, r24
    14d4:	cd 01       	movw	r24, r26
    14d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	9e 83       	std	Y+6, r25	; 0x06
    14e0:	8d 83       	std	Y+5, r24	; 0x05
    14e2:	0f c0       	rjmp	.+30     	; 0x1502 <CLCD_voidSendCommand+0x864>
    14e4:	88 ec       	ldi	r24, 0xC8	; 200
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	9c 83       	std	Y+4, r25	; 0x04
    14ea:	8b 83       	std	Y+3, r24	; 0x03
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	9c 81       	ldd	r25, Y+4	; 0x04
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <CLCD_voidSendCommand+0x852>
    14f4:	9c 83       	std	Y+4, r25	; 0x04
    14f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	9e 83       	std	Y+6, r25	; 0x06
    1500:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	69 f7       	brne	.-38     	; 0x14e4 <CLCD_voidSendCommand+0x846>
    150a:	14 c0       	rjmp	.+40     	; 0x1534 <CLCD_voidSendCommand+0x896>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    150c:	6f 81       	ldd	r22, Y+7	; 0x07
    150e:	78 85       	ldd	r23, Y+8	; 0x08
    1510:	89 85       	ldd	r24, Y+9	; 0x09
    1512:	9a 85       	ldd	r25, Y+10	; 0x0a
    1514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	9e 83       	std	Y+6, r25	; 0x06
    151e:	8d 83       	std	Y+5, r24	; 0x05
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	9a 83       	std	Y+2, r25	; 0x02
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	9a 81       	ldd	r25, Y+2	; 0x02
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	f1 f7       	brne	.-4      	; 0x152c <CLCD_voidSendCommand+0x88e>
    1530:	9a 83       	std	Y+2, r25	; 0x02
    1532:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_u8Command);
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=1 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1534:	cd 59       	subi	r28, 0x9D	; 157
    1536:	df 4f       	sbci	r29, 0xFF	; 255
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	08 95       	ret

0000154c <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    154c:	0f 93       	push	r16
    154e:	1f 93       	push	r17
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	c3 56       	subi	r28, 0x63	; 99
    155a:	d0 40       	sbci	r29, 0x00	; 0
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	fe 01       	movw	r30, r28
    1568:	ed 59       	subi	r30, 0x9D	; 157
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	80 83       	st	Z, r24
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_u8PIN_HIGH); /* Data Mode RS=1 */
    156e:	82 e0       	ldi	r24, 0x02	; 2
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	41 e0       	ldi	r20, 0x01	; 1
    1574:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_u8PIN_LOW); /* Instruction Mode RW=0 */
    1578:	82 e0       	ldi	r24, 0x02	; 2
    157a:	61 e0       	ldi	r22, 0x01	; 1
    157c:	40 e0       	ldi	r20, 0x00	; 0
    157e:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
    1582:	fe 01       	movw	r30, r28
    1584:	e1 5a       	subi	r30, 0xA1	; 161
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	a0 e8       	ldi	r26, 0x80	; 128
    158e:	bf e3       	ldi	r27, 0x3F	; 63
    1590:	80 83       	st	Z, r24
    1592:	91 83       	std	Z+1, r25	; 0x01
    1594:	a2 83       	std	Z+2, r26	; 0x02
    1596:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1598:	8e 01       	movw	r16, r28
    159a:	05 5a       	subi	r16, 0xA5	; 165
    159c:	1f 4f       	sbci	r17, 0xFF	; 255
    159e:	fe 01       	movw	r30, r28
    15a0:	e1 5a       	subi	r30, 0xA1	; 161
    15a2:	ff 4f       	sbci	r31, 0xFF	; 255
    15a4:	60 81       	ld	r22, Z
    15a6:	71 81       	ldd	r23, Z+1	; 0x01
    15a8:	82 81       	ldd	r24, Z+2	; 0x02
    15aa:	93 81       	ldd	r25, Z+3	; 0x03
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	4a ef       	ldi	r20, 0xFA	; 250
    15b2:	54 e4       	ldi	r21, 0x44	; 68
    15b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	f8 01       	movw	r30, r16
    15be:	80 83       	st	Z, r24
    15c0:	91 83       	std	Z+1, r25	; 0x01
    15c2:	a2 83       	std	Z+2, r26	; 0x02
    15c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15c6:	fe 01       	movw	r30, r28
    15c8:	e5 5a       	subi	r30, 0xA5	; 165
    15ca:	ff 4f       	sbci	r31, 0xFF	; 255
    15cc:	60 81       	ld	r22, Z
    15ce:	71 81       	ldd	r23, Z+1	; 0x01
    15d0:	82 81       	ldd	r24, Z+2	; 0x02
    15d2:	93 81       	ldd	r25, Z+3	; 0x03
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e8       	ldi	r20, 0x80	; 128
    15da:	5f e3       	ldi	r21, 0x3F	; 63
    15dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15e0:	88 23       	and	r24, r24
    15e2:	44 f4       	brge	.+16     	; 0x15f4 <CLCD_voidSendData+0xa8>
		__ticks = 1;
    15e4:	fe 01       	movw	r30, r28
    15e6:	e7 5a       	subi	r30, 0xA7	; 167
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	91 83       	std	Z+1, r25	; 0x01
    15f0:	80 83       	st	Z, r24
    15f2:	64 c0       	rjmp	.+200    	; 0x16bc <CLCD_voidSendData+0x170>
	else if (__tmp > 65535)
    15f4:	fe 01       	movw	r30, r28
    15f6:	e5 5a       	subi	r30, 0xA5	; 165
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	60 81       	ld	r22, Z
    15fc:	71 81       	ldd	r23, Z+1	; 0x01
    15fe:	82 81       	ldd	r24, Z+2	; 0x02
    1600:	93 81       	ldd	r25, Z+3	; 0x03
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	3f ef       	ldi	r19, 0xFF	; 255
    1606:	4f e7       	ldi	r20, 0x7F	; 127
    1608:	57 e4       	ldi	r21, 0x47	; 71
    160a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    160e:	18 16       	cp	r1, r24
    1610:	0c f0       	brlt	.+2      	; 0x1614 <CLCD_voidSendData+0xc8>
    1612:	43 c0       	rjmp	.+134    	; 0x169a <CLCD_voidSendData+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1614:	fe 01       	movw	r30, r28
    1616:	e1 5a       	subi	r30, 0xA1	; 161
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	60 81       	ld	r22, Z
    161c:	71 81       	ldd	r23, Z+1	; 0x01
    161e:	82 81       	ldd	r24, Z+2	; 0x02
    1620:	93 81       	ldd	r25, Z+3	; 0x03
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e2       	ldi	r20, 0x20	; 32
    1628:	51 e4       	ldi	r21, 0x41	; 65
    162a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	8e 01       	movw	r16, r28
    1634:	07 5a       	subi	r16, 0xA7	; 167
    1636:	1f 4f       	sbci	r17, 0xFF	; 255
    1638:	bc 01       	movw	r22, r24
    163a:	cd 01       	movw	r24, r26
    163c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	f8 01       	movw	r30, r16
    1646:	91 83       	std	Z+1, r25	; 0x01
    1648:	80 83       	st	Z, r24
    164a:	1f c0       	rjmp	.+62     	; 0x168a <CLCD_voidSendData+0x13e>
    164c:	fe 01       	movw	r30, r28
    164e:	e9 5a       	subi	r30, 0xA9	; 169
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	88 ec       	ldi	r24, 0xC8	; 200
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	91 83       	std	Z+1, r25	; 0x01
    1658:	80 83       	st	Z, r24
    165a:	fe 01       	movw	r30, r28
    165c:	e9 5a       	subi	r30, 0xA9	; 169
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	80 81       	ld	r24, Z
    1662:	91 81       	ldd	r25, Z+1	; 0x01
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <CLCD_voidSendData+0x118>
    1668:	fe 01       	movw	r30, r28
    166a:	e9 5a       	subi	r30, 0xA9	; 169
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	91 83       	std	Z+1, r25	; 0x01
    1670:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1672:	de 01       	movw	r26, r28
    1674:	a7 5a       	subi	r26, 0xA7	; 167
    1676:	bf 4f       	sbci	r27, 0xFF	; 255
    1678:	fe 01       	movw	r30, r28
    167a:	e7 5a       	subi	r30, 0xA7	; 167
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	11 96       	adiw	r26, 0x01	; 1
    1686:	9c 93       	st	X, r25
    1688:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    168a:	fe 01       	movw	r30, r28
    168c:	e7 5a       	subi	r30, 0xA7	; 167
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	80 81       	ld	r24, Z
    1692:	91 81       	ldd	r25, Z+1	; 0x01
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	d1 f6       	brne	.-76     	; 0x164c <CLCD_voidSendData+0x100>
    1698:	27 c0       	rjmp	.+78     	; 0x16e8 <CLCD_voidSendData+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    169a:	8e 01       	movw	r16, r28
    169c:	07 5a       	subi	r16, 0xA7	; 167
    169e:	1f 4f       	sbci	r17, 0xFF	; 255
    16a0:	fe 01       	movw	r30, r28
    16a2:	e5 5a       	subi	r30, 0xA5	; 165
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	60 81       	ld	r22, Z
    16a8:	71 81       	ldd	r23, Z+1	; 0x01
    16aa:	82 81       	ldd	r24, Z+2	; 0x02
    16ac:	93 81       	ldd	r25, Z+3	; 0x03
    16ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	f8 01       	movw	r30, r16
    16b8:	91 83       	std	Z+1, r25	; 0x01
    16ba:	80 83       	st	Z, r24
    16bc:	de 01       	movw	r26, r28
    16be:	ab 5a       	subi	r26, 0xAB	; 171
    16c0:	bf 4f       	sbci	r27, 0xFF	; 255
    16c2:	fe 01       	movw	r30, r28
    16c4:	e7 5a       	subi	r30, 0xA7	; 167
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	80 81       	ld	r24, Z
    16ca:	91 81       	ldd	r25, Z+1	; 0x01
    16cc:	8d 93       	st	X+, r24
    16ce:	9c 93       	st	X, r25
    16d0:	fe 01       	movw	r30, r28
    16d2:	eb 5a       	subi	r30, 0xAB	; 171
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	80 81       	ld	r24, Z
    16d8:	91 81       	ldd	r25, Z+1	; 0x01
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <CLCD_voidSendData+0x18e>
    16de:	fe 01       	movw	r30, r28
    16e0:	eb 5a       	subi	r30, 0xAB	; 171
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	91 83       	std	Z+1, r25	; 0x01
    16e6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Enable LCD E=1 */
    16e8:	82 e0       	ldi	r24, 0x02	; 2
    16ea:	67 e0       	ldi	r22, 0x07	; 7
    16ec:	41 e0       	ldi	r20, 0x01	; 1
    16ee:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
    16f2:	fe 01       	movw	r30, r28
    16f4:	ef 5a       	subi	r30, 0xAF	; 175
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a0 e8       	ldi	r26, 0x80	; 128
    16fe:	bf e3       	ldi	r27, 0x3F	; 63
    1700:	80 83       	st	Z, r24
    1702:	91 83       	std	Z+1, r25	; 0x01
    1704:	a2 83       	std	Z+2, r26	; 0x02
    1706:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1708:	8e 01       	movw	r16, r28
    170a:	03 5b       	subi	r16, 0xB3	; 179
    170c:	1f 4f       	sbci	r17, 0xFF	; 255
    170e:	fe 01       	movw	r30, r28
    1710:	ef 5a       	subi	r30, 0xAF	; 175
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	60 81       	ld	r22, Z
    1716:	71 81       	ldd	r23, Z+1	; 0x01
    1718:	82 81       	ldd	r24, Z+2	; 0x02
    171a:	93 81       	ldd	r25, Z+3	; 0x03
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	4a ef       	ldi	r20, 0xFA	; 250
    1722:	54 e4       	ldi	r21, 0x44	; 68
    1724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	f8 01       	movw	r30, r16
    172e:	80 83       	st	Z, r24
    1730:	91 83       	std	Z+1, r25	; 0x01
    1732:	a2 83       	std	Z+2, r26	; 0x02
    1734:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1736:	fe 01       	movw	r30, r28
    1738:	e3 5b       	subi	r30, 0xB3	; 179
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	60 81       	ld	r22, Z
    173e:	71 81       	ldd	r23, Z+1	; 0x01
    1740:	82 81       	ldd	r24, Z+2	; 0x02
    1742:	93 81       	ldd	r25, Z+3	; 0x03
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e8       	ldi	r20, 0x80	; 128
    174a:	5f e3       	ldi	r21, 0x3F	; 63
    174c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1750:	88 23       	and	r24, r24
    1752:	44 f4       	brge	.+16     	; 0x1764 <CLCD_voidSendData+0x218>
		__ticks = 1;
    1754:	fe 01       	movw	r30, r28
    1756:	e5 5b       	subi	r30, 0xB5	; 181
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	80 83       	st	Z, r24
    1762:	64 c0       	rjmp	.+200    	; 0x182c <CLCD_voidSendData+0x2e0>
	else if (__tmp > 65535)
    1764:	fe 01       	movw	r30, r28
    1766:	e3 5b       	subi	r30, 0xB3	; 179
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	60 81       	ld	r22, Z
    176c:	71 81       	ldd	r23, Z+1	; 0x01
    176e:	82 81       	ldd	r24, Z+2	; 0x02
    1770:	93 81       	ldd	r25, Z+3	; 0x03
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	3f ef       	ldi	r19, 0xFF	; 255
    1776:	4f e7       	ldi	r20, 0x7F	; 127
    1778:	57 e4       	ldi	r21, 0x47	; 71
    177a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    177e:	18 16       	cp	r1, r24
    1780:	0c f0       	brlt	.+2      	; 0x1784 <CLCD_voidSendData+0x238>
    1782:	43 c0       	rjmp	.+134    	; 0x180a <CLCD_voidSendData+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1784:	fe 01       	movw	r30, r28
    1786:	ef 5a       	subi	r30, 0xAF	; 175
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	60 81       	ld	r22, Z
    178c:	71 81       	ldd	r23, Z+1	; 0x01
    178e:	82 81       	ldd	r24, Z+2	; 0x02
    1790:	93 81       	ldd	r25, Z+3	; 0x03
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	40 e2       	ldi	r20, 0x20	; 32
    1798:	51 e4       	ldi	r21, 0x41	; 65
    179a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	8e 01       	movw	r16, r28
    17a4:	05 5b       	subi	r16, 0xB5	; 181
    17a6:	1f 4f       	sbci	r17, 0xFF	; 255
    17a8:	bc 01       	movw	r22, r24
    17aa:	cd 01       	movw	r24, r26
    17ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	f8 01       	movw	r30, r16
    17b6:	91 83       	std	Z+1, r25	; 0x01
    17b8:	80 83       	st	Z, r24
    17ba:	1f c0       	rjmp	.+62     	; 0x17fa <CLCD_voidSendData+0x2ae>
    17bc:	fe 01       	movw	r30, r28
    17be:	e7 5b       	subi	r30, 0xB7	; 183
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	88 ec       	ldi	r24, 0xC8	; 200
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	80 83       	st	Z, r24
    17ca:	fe 01       	movw	r30, r28
    17cc:	e7 5b       	subi	r30, 0xB7	; 183
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	80 81       	ld	r24, Z
    17d2:	91 81       	ldd	r25, Z+1	; 0x01
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <CLCD_voidSendData+0x288>
    17d8:	fe 01       	movw	r30, r28
    17da:	e7 5b       	subi	r30, 0xB7	; 183
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e2:	de 01       	movw	r26, r28
    17e4:	a5 5b       	subi	r26, 0xB5	; 181
    17e6:	bf 4f       	sbci	r27, 0xFF	; 255
    17e8:	fe 01       	movw	r30, r28
    17ea:	e5 5b       	subi	r30, 0xB5	; 181
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	80 81       	ld	r24, Z
    17f0:	91 81       	ldd	r25, Z+1	; 0x01
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	11 96       	adiw	r26, 0x01	; 1
    17f6:	9c 93       	st	X, r25
    17f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fa:	fe 01       	movw	r30, r28
    17fc:	e5 5b       	subi	r30, 0xB5	; 181
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	80 81       	ld	r24, Z
    1802:	91 81       	ldd	r25, Z+1	; 0x01
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	d1 f6       	brne	.-76     	; 0x17bc <CLCD_voidSendData+0x270>
    1808:	27 c0       	rjmp	.+78     	; 0x1858 <CLCD_voidSendData+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180a:	8e 01       	movw	r16, r28
    180c:	05 5b       	subi	r16, 0xB5	; 181
    180e:	1f 4f       	sbci	r17, 0xFF	; 255
    1810:	fe 01       	movw	r30, r28
    1812:	e3 5b       	subi	r30, 0xB3	; 179
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	60 81       	ld	r22, Z
    1818:	71 81       	ldd	r23, Z+1	; 0x01
    181a:	82 81       	ldd	r24, Z+2	; 0x02
    181c:	93 81       	ldd	r25, Z+3	; 0x03
    181e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	f8 01       	movw	r30, r16
    1828:	91 83       	std	Z+1, r25	; 0x01
    182a:	80 83       	st	Z, r24
    182c:	de 01       	movw	r26, r28
    182e:	a9 5b       	subi	r26, 0xB9	; 185
    1830:	bf 4f       	sbci	r27, 0xFF	; 255
    1832:	fe 01       	movw	r30, r28
    1834:	e5 5b       	subi	r30, 0xB5	; 181
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	80 81       	ld	r24, Z
    183a:	91 81       	ldd	r25, Z+1	; 0x01
    183c:	8d 93       	st	X+, r24
    183e:	9c 93       	st	X, r25
    1840:	fe 01       	movw	r30, r28
    1842:	e9 5b       	subi	r30, 0xB9	; 185
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	80 81       	ld	r24, Z
    1848:	91 81       	ldd	r25, Z+1	; 0x01
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	f1 f7       	brne	.-4      	; 0x184a <CLCD_voidSendData+0x2fe>
    184e:	fe 01       	movw	r30, r28
    1850:	e9 5b       	subi	r30, 0xB9	; 185
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	91 83       	std	Z+1, r25	; 0x01
    1856:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (CLCD_DATA_BITS_MODE == 4)
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Data, 4));
    1858:	fe 01       	movw	r30, r28
    185a:	ed 59       	subi	r30, 0x9D	; 157
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 81       	ld	r24, Z
    1860:	82 95       	swap	r24
    1862:	8f 70       	andi	r24, 0x0F	; 15
    1864:	98 2f       	mov	r25, r24
    1866:	91 70       	andi	r25, 0x01	; 1
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	49 2f       	mov	r20, r25
    186e:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Data, 5));
    1872:	fe 01       	movw	r30, r28
    1874:	ed 59       	subi	r30, 0x9D	; 157
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	80 81       	ld	r24, Z
    187a:	82 95       	swap	r24
    187c:	86 95       	lsr	r24
    187e:	87 70       	andi	r24, 0x07	; 7
    1880:	98 2f       	mov	r25, r24
    1882:	91 70       	andi	r25, 0x01	; 1
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	61 e0       	ldi	r22, 0x01	; 1
    1888:	49 2f       	mov	r20, r25
    188a:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Data, 6));
    188e:	fe 01       	movw	r30, r28
    1890:	ed 59       	subi	r30, 0x9D	; 157
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	80 81       	ld	r24, Z
    1896:	82 95       	swap	r24
    1898:	86 95       	lsr	r24
    189a:	86 95       	lsr	r24
    189c:	83 70       	andi	r24, 0x03	; 3
    189e:	98 2f       	mov	r25, r24
    18a0:	91 70       	andi	r25, 0x01	; 1
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	62 e0       	ldi	r22, 0x02	; 2
    18a6:	49 2f       	mov	r20, r25
    18a8:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Data, 7));
    18ac:	fe 01       	movw	r30, r28
    18ae:	ed 59       	subi	r30, 0x9D	; 157
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	80 81       	ld	r24, Z
    18b4:	98 2f       	mov	r25, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	99 27       	eor	r25, r25
    18ba:	99 1f       	adc	r25, r25
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	63 e0       	ldi	r22, 0x03	; 3
    18c0:	49 2f       	mov	r20, r25
    18c2:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
    18c6:	fe 01       	movw	r30, r28
    18c8:	ed 5b       	subi	r30, 0xBD	; 189
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	a0 e8       	ldi	r26, 0x80	; 128
    18d2:	bf e3       	ldi	r27, 0x3F	; 63
    18d4:	80 83       	st	Z, r24
    18d6:	91 83       	std	Z+1, r25	; 0x01
    18d8:	a2 83       	std	Z+2, r26	; 0x02
    18da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18dc:	8e 01       	movw	r16, r28
    18de:	01 5c       	subi	r16, 0xC1	; 193
    18e0:	1f 4f       	sbci	r17, 0xFF	; 255
    18e2:	fe 01       	movw	r30, r28
    18e4:	ed 5b       	subi	r30, 0xBD	; 189
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	60 81       	ld	r22, Z
    18ea:	71 81       	ldd	r23, Z+1	; 0x01
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	93 81       	ldd	r25, Z+3	; 0x03
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	4a ef       	ldi	r20, 0xFA	; 250
    18f6:	54 e4       	ldi	r21, 0x44	; 68
    18f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	f8 01       	movw	r30, r16
    1902:	80 83       	st	Z, r24
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	a2 83       	std	Z+2, r26	; 0x02
    1908:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    190a:	fe 01       	movw	r30, r28
    190c:	ff 96       	adiw	r30, 0x3f	; 63
    190e:	60 81       	ld	r22, Z
    1910:	71 81       	ldd	r23, Z+1	; 0x01
    1912:	82 81       	ldd	r24, Z+2	; 0x02
    1914:	93 81       	ldd	r25, Z+3	; 0x03
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e8       	ldi	r20, 0x80	; 128
    191c:	5f e3       	ldi	r21, 0x3F	; 63
    191e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1922:	88 23       	and	r24, r24
    1924:	2c f4       	brge	.+10     	; 0x1930 <CLCD_voidSendData+0x3e4>
		__ticks = 1;
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	9e af       	std	Y+62, r25	; 0x3e
    192c:	8d af       	std	Y+61, r24	; 0x3d
    192e:	46 c0       	rjmp	.+140    	; 0x19bc <CLCD_voidSendData+0x470>
	else if (__tmp > 65535)
    1930:	fe 01       	movw	r30, r28
    1932:	ff 96       	adiw	r30, 0x3f	; 63
    1934:	60 81       	ld	r22, Z
    1936:	71 81       	ldd	r23, Z+1	; 0x01
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	3f ef       	ldi	r19, 0xFF	; 255
    1940:	4f e7       	ldi	r20, 0x7F	; 127
    1942:	57 e4       	ldi	r21, 0x47	; 71
    1944:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1948:	18 16       	cp	r1, r24
    194a:	64 f5       	brge	.+88     	; 0x19a4 <CLCD_voidSendData+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194c:	fe 01       	movw	r30, r28
    194e:	ed 5b       	subi	r30, 0xBD	; 189
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	60 81       	ld	r22, Z
    1954:	71 81       	ldd	r23, Z+1	; 0x01
    1956:	82 81       	ldd	r24, Z+2	; 0x02
    1958:	93 81       	ldd	r25, Z+3	; 0x03
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e2       	ldi	r20, 0x20	; 32
    1960:	51 e4       	ldi	r21, 0x41	; 65
    1962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	bc 01       	movw	r22, r24
    196c:	cd 01       	movw	r24, r26
    196e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	9e af       	std	Y+62, r25	; 0x3e
    1978:	8d af       	std	Y+61, r24	; 0x3d
    197a:	0f c0       	rjmp	.+30     	; 0x199a <CLCD_voidSendData+0x44e>
    197c:	88 ec       	ldi	r24, 0xC8	; 200
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	9c af       	std	Y+60, r25	; 0x3c
    1982:	8b af       	std	Y+59, r24	; 0x3b
    1984:	8b ad       	ldd	r24, Y+59	; 0x3b
    1986:	9c ad       	ldd	r25, Y+60	; 0x3c
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	f1 f7       	brne	.-4      	; 0x1988 <CLCD_voidSendData+0x43c>
    198c:	9c af       	std	Y+60, r25	; 0x3c
    198e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1990:	8d ad       	ldd	r24, Y+61	; 0x3d
    1992:	9e ad       	ldd	r25, Y+62	; 0x3e
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	9e af       	std	Y+62, r25	; 0x3e
    1998:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199a:	8d ad       	ldd	r24, Y+61	; 0x3d
    199c:	9e ad       	ldd	r25, Y+62	; 0x3e
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	69 f7       	brne	.-38     	; 0x197c <CLCD_voidSendData+0x430>
    19a2:	16 c0       	rjmp	.+44     	; 0x19d0 <CLCD_voidSendData+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a4:	fe 01       	movw	r30, r28
    19a6:	ff 96       	adiw	r30, 0x3f	; 63
    19a8:	60 81       	ld	r22, Z
    19aa:	71 81       	ldd	r23, Z+1	; 0x01
    19ac:	82 81       	ldd	r24, Z+2	; 0x02
    19ae:	93 81       	ldd	r25, Z+3	; 0x03
    19b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	9e af       	std	Y+62, r25	; 0x3e
    19ba:	8d af       	std	Y+61, r24	; 0x3d
    19bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    19be:	9e ad       	ldd	r25, Y+62	; 0x3e
    19c0:	9a af       	std	Y+58, r25	; 0x3a
    19c2:	89 af       	std	Y+57, r24	; 0x39
    19c4:	89 ad       	ldd	r24, Y+57	; 0x39
    19c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <CLCD_voidSendData+0x47c>
    19cc:	9a af       	std	Y+58, r25	; 0x3a
    19ce:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=0 */
    19d0:	82 e0       	ldi	r24, 0x02	; 2
    19d2:	67 e0       	ldi	r22, 0x07	; 7
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	a0 e8       	ldi	r26, 0x80	; 128
    19e0:	bf e3       	ldi	r27, 0x3F	; 63
    19e2:	8d ab       	std	Y+53, r24	; 0x35
    19e4:	9e ab       	std	Y+54, r25	; 0x36
    19e6:	af ab       	std	Y+55, r26	; 0x37
    19e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ea:	6d a9       	ldd	r22, Y+53	; 0x35
    19ec:	7e a9       	ldd	r23, Y+54	; 0x36
    19ee:	8f a9       	ldd	r24, Y+55	; 0x37
    19f0:	98 ad       	ldd	r25, Y+56	; 0x38
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	4a ef       	ldi	r20, 0xFA	; 250
    19f8:	54 e4       	ldi	r21, 0x44	; 68
    19fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	89 ab       	std	Y+49, r24	; 0x31
    1a04:	9a ab       	std	Y+50, r25	; 0x32
    1a06:	ab ab       	std	Y+51, r26	; 0x33
    1a08:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a10:	9c a9       	ldd	r25, Y+52	; 0x34
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e8       	ldi	r20, 0x80	; 128
    1a18:	5f e3       	ldi	r21, 0x3F	; 63
    1a1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a1e:	88 23       	and	r24, r24
    1a20:	2c f4       	brge	.+10     	; 0x1a2c <CLCD_voidSendData+0x4e0>
		__ticks = 1;
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	98 ab       	std	Y+48, r25	; 0x30
    1a28:	8f a7       	std	Y+47, r24	; 0x2f
    1a2a:	3f c0       	rjmp	.+126    	; 0x1aaa <CLCD_voidSendData+0x55e>
	else if (__tmp > 65535)
    1a2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a30:	8b a9       	ldd	r24, Y+51	; 0x33
    1a32:	9c a9       	ldd	r25, Y+52	; 0x34
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	3f ef       	ldi	r19, 0xFF	; 255
    1a38:	4f e7       	ldi	r20, 0x7F	; 127
    1a3a:	57 e4       	ldi	r21, 0x47	; 71
    1a3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a40:	18 16       	cp	r1, r24
    1a42:	4c f5       	brge	.+82     	; 0x1a96 <CLCD_voidSendData+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a44:	6d a9       	ldd	r22, Y+53	; 0x35
    1a46:	7e a9       	ldd	r23, Y+54	; 0x36
    1a48:	8f a9       	ldd	r24, Y+55	; 0x37
    1a4a:	98 ad       	ldd	r25, Y+56	; 0x38
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e2       	ldi	r20, 0x20	; 32
    1a52:	51 e4       	ldi	r21, 0x41	; 65
    1a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	bc 01       	movw	r22, r24
    1a5e:	cd 01       	movw	r24, r26
    1a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	98 ab       	std	Y+48, r25	; 0x30
    1a6a:	8f a7       	std	Y+47, r24	; 0x2f
    1a6c:	0f c0       	rjmp	.+30     	; 0x1a8c <CLCD_voidSendData+0x540>
    1a6e:	88 ec       	ldi	r24, 0xC8	; 200
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	9e a7       	std	Y+46, r25	; 0x2e
    1a74:	8d a7       	std	Y+45, r24	; 0x2d
    1a76:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a78:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <CLCD_voidSendData+0x52e>
    1a7e:	9e a7       	std	Y+46, r25	; 0x2e
    1a80:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a84:	98 a9       	ldd	r25, Y+48	; 0x30
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	98 ab       	std	Y+48, r25	; 0x30
    1a8a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	69 f7       	brne	.-38     	; 0x1a6e <CLCD_voidSendData+0x522>
    1a94:	14 c0       	rjmp	.+40     	; 0x1abe <CLCD_voidSendData+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a96:	69 a9       	ldd	r22, Y+49	; 0x31
    1a98:	7a a9       	ldd	r23, Y+50	; 0x32
    1a9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	98 ab       	std	Y+48, r25	; 0x30
    1aa8:	8f a7       	std	Y+47, r24	; 0x2f
    1aaa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aac:	98 a9       	ldd	r25, Y+48	; 0x30
    1aae:	9c a7       	std	Y+44, r25	; 0x2c
    1ab0:	8b a7       	std	Y+43, r24	; 0x2b
    1ab2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ab4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <CLCD_voidSendData+0x56a>
    1aba:	9c a7       	std	Y+44, r25	; 0x2c
    1abc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Disable LCD E=1 */
    1abe:	82 e0       	ldi	r24, 0x02	; 2
    1ac0:	67 e0       	ldi	r22, 0x07	; 7
    1ac2:	41 e0       	ldi	r20, 0x01	; 1
    1ac4:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	a0 e8       	ldi	r26, 0x80	; 128
    1ace:	bf e3       	ldi	r27, 0x3F	; 63
    1ad0:	8f a3       	std	Y+39, r24	; 0x27
    1ad2:	98 a7       	std	Y+40, r25	; 0x28
    1ad4:	a9 a7       	std	Y+41, r26	; 0x29
    1ad6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad8:	6f a1       	ldd	r22, Y+39	; 0x27
    1ada:	78 a5       	ldd	r23, Y+40	; 0x28
    1adc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ade:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	4a ef       	ldi	r20, 0xFA	; 250
    1ae6:	54 e4       	ldi	r21, 0x44	; 68
    1ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	8b a3       	std	Y+35, r24	; 0x23
    1af2:	9c a3       	std	Y+36, r25	; 0x24
    1af4:	ad a3       	std	Y+37, r26	; 0x25
    1af6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1af8:	6b a1       	ldd	r22, Y+35	; 0x23
    1afa:	7c a1       	ldd	r23, Y+36	; 0x24
    1afc:	8d a1       	ldd	r24, Y+37	; 0x25
    1afe:	9e a1       	ldd	r25, Y+38	; 0x26
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e8       	ldi	r20, 0x80	; 128
    1b06:	5f e3       	ldi	r21, 0x3F	; 63
    1b08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b0c:	88 23       	and	r24, r24
    1b0e:	2c f4       	brge	.+10     	; 0x1b1a <CLCD_voidSendData+0x5ce>
		__ticks = 1;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	9a a3       	std	Y+34, r25	; 0x22
    1b16:	89 a3       	std	Y+33, r24	; 0x21
    1b18:	3f c0       	rjmp	.+126    	; 0x1b98 <CLCD_voidSendData+0x64c>
	else if (__tmp > 65535)
    1b1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b20:	9e a1       	ldd	r25, Y+38	; 0x26
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	3f ef       	ldi	r19, 0xFF	; 255
    1b26:	4f e7       	ldi	r20, 0x7F	; 127
    1b28:	57 e4       	ldi	r21, 0x47	; 71
    1b2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b2e:	18 16       	cp	r1, r24
    1b30:	4c f5       	brge	.+82     	; 0x1b84 <CLCD_voidSendData+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b32:	6f a1       	ldd	r22, Y+39	; 0x27
    1b34:	78 a5       	ldd	r23, Y+40	; 0x28
    1b36:	89 a5       	ldd	r24, Y+41	; 0x29
    1b38:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e2       	ldi	r20, 0x20	; 32
    1b40:	51 e4       	ldi	r21, 0x41	; 65
    1b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	bc 01       	movw	r22, r24
    1b4c:	cd 01       	movw	r24, r26
    1b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	9a a3       	std	Y+34, r25	; 0x22
    1b58:	89 a3       	std	Y+33, r24	; 0x21
    1b5a:	0f c0       	rjmp	.+30     	; 0x1b7a <CLCD_voidSendData+0x62e>
    1b5c:	88 ec       	ldi	r24, 0xC8	; 200
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	98 a3       	std	Y+32, r25	; 0x20
    1b62:	8f 8f       	std	Y+31, r24	; 0x1f
    1b64:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b66:	98 a1       	ldd	r25, Y+32	; 0x20
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	f1 f7       	brne	.-4      	; 0x1b68 <CLCD_voidSendData+0x61c>
    1b6c:	98 a3       	std	Y+32, r25	; 0x20
    1b6e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b70:	89 a1       	ldd	r24, Y+33	; 0x21
    1b72:	9a a1       	ldd	r25, Y+34	; 0x22
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	9a a3       	std	Y+34, r25	; 0x22
    1b78:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	69 f7       	brne	.-38     	; 0x1b5c <CLCD_voidSendData+0x610>
    1b82:	14 c0       	rjmp	.+40     	; 0x1bac <CLCD_voidSendData+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b84:	6b a1       	ldd	r22, Y+35	; 0x23
    1b86:	7c a1       	ldd	r23, Y+36	; 0x24
    1b88:	8d a1       	ldd	r24, Y+37	; 0x25
    1b8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	9a a3       	std	Y+34, r25	; 0x22
    1b96:	89 a3       	std	Y+33, r24	; 0x21
    1b98:	89 a1       	ldd	r24, Y+33	; 0x21
    1b9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b9c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b9e:	8d 8f       	std	Y+29, r24	; 0x1d
    1ba0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ba2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <CLCD_voidSendData+0x658>
    1ba8:	9e 8f       	std	Y+30, r25	; 0x1e
    1baa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Data, 0));
    1bac:	fe 01       	movw	r30, r28
    1bae:	ed 59       	subi	r30, 0x9D	; 157
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	80 81       	ld	r24, Z
    1bb4:	98 2f       	mov	r25, r24
    1bb6:	91 70       	andi	r25, 0x01	; 1
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	49 2f       	mov	r20, r25
    1bbe:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Data, 1));
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	ed 59       	subi	r30, 0x9D	; 157
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	80 81       	ld	r24, Z
    1bca:	86 95       	lsr	r24
    1bcc:	98 2f       	mov	r25, r24
    1bce:	91 70       	andi	r25, 0x01	; 1
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	61 e0       	ldi	r22, 0x01	; 1
    1bd4:	49 2f       	mov	r20, r25
    1bd6:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Data, 2));
    1bda:	fe 01       	movw	r30, r28
    1bdc:	ed 59       	subi	r30, 0x9D	; 157
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 81       	ld	r24, Z
    1be2:	86 95       	lsr	r24
    1be4:	86 95       	lsr	r24
    1be6:	98 2f       	mov	r25, r24
    1be8:	91 70       	andi	r25, 0x01	; 1
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	62 e0       	ldi	r22, 0x02	; 2
    1bee:	49 2f       	mov	r20, r25
    1bf0:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Data, 3));
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	ed 59       	subi	r30, 0x9D	; 157
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	80 81       	ld	r24, Z
    1bfc:	86 95       	lsr	r24
    1bfe:	86 95       	lsr	r24
    1c00:	86 95       	lsr	r24
    1c02:	98 2f       	mov	r25, r24
    1c04:	91 70       	andi	r25, 0x01	; 1
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	63 e0       	ldi	r22, 0x03	; 3
    1c0a:	49 2f       	mov	r20, r25
    1c0c:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	a0 e8       	ldi	r26, 0x80	; 128
    1c16:	bf e3       	ldi	r27, 0x3F	; 63
    1c18:	89 8f       	std	Y+25, r24	; 0x19
    1c1a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c1c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c1e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c20:	69 8d       	ldd	r22, Y+25	; 0x19
    1c22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	4a ef       	ldi	r20, 0xFA	; 250
    1c2e:	54 e4       	ldi	r21, 0x44	; 68
    1c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	8d 8b       	std	Y+21, r24	; 0x15
    1c3a:	9e 8b       	std	Y+22, r25	; 0x16
    1c3c:	af 8b       	std	Y+23, r26	; 0x17
    1c3e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c40:	6d 89       	ldd	r22, Y+21	; 0x15
    1c42:	7e 89       	ldd	r23, Y+22	; 0x16
    1c44:	8f 89       	ldd	r24, Y+23	; 0x17
    1c46:	98 8d       	ldd	r25, Y+24	; 0x18
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e8       	ldi	r20, 0x80	; 128
    1c4e:	5f e3       	ldi	r21, 0x3F	; 63
    1c50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c54:	88 23       	and	r24, r24
    1c56:	2c f4       	brge	.+10     	; 0x1c62 <CLCD_voidSendData+0x716>
		__ticks = 1;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9c 8b       	std	Y+20, r25	; 0x14
    1c5e:	8b 8b       	std	Y+19, r24	; 0x13
    1c60:	3f c0       	rjmp	.+126    	; 0x1ce0 <CLCD_voidSendData+0x794>
	else if (__tmp > 65535)
    1c62:	6d 89       	ldd	r22, Y+21	; 0x15
    1c64:	7e 89       	ldd	r23, Y+22	; 0x16
    1c66:	8f 89       	ldd	r24, Y+23	; 0x17
    1c68:	98 8d       	ldd	r25, Y+24	; 0x18
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	3f ef       	ldi	r19, 0xFF	; 255
    1c6e:	4f e7       	ldi	r20, 0x7F	; 127
    1c70:	57 e4       	ldi	r21, 0x47	; 71
    1c72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c76:	18 16       	cp	r1, r24
    1c78:	4c f5       	brge	.+82     	; 0x1ccc <CLCD_voidSendData+0x780>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e2       	ldi	r20, 0x20	; 32
    1c88:	51 e4       	ldi	r21, 0x41	; 65
    1c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	9c 8b       	std	Y+20, r25	; 0x14
    1ca0:	8b 8b       	std	Y+19, r24	; 0x13
    1ca2:	0f c0       	rjmp	.+30     	; 0x1cc2 <CLCD_voidSendData+0x776>
    1ca4:	88 ec       	ldi	r24, 0xC8	; 200
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9a 8b       	std	Y+18, r25	; 0x12
    1caa:	89 8b       	std	Y+17, r24	; 0x11
    1cac:	89 89       	ldd	r24, Y+17	; 0x11
    1cae:	9a 89       	ldd	r25, Y+18	; 0x12
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <CLCD_voidSendData+0x764>
    1cb4:	9a 8b       	std	Y+18, r25	; 0x12
    1cb6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cba:	9c 89       	ldd	r25, Y+20	; 0x14
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	9c 8b       	std	Y+20, r25	; 0x14
    1cc0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	69 f7       	brne	.-38     	; 0x1ca4 <CLCD_voidSendData+0x758>
    1cca:	14 c0       	rjmp	.+40     	; 0x1cf4 <CLCD_voidSendData+0x7a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ccc:	6d 89       	ldd	r22, Y+21	; 0x15
    1cce:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	9c 8b       	std	Y+20, r25	; 0x14
    1cde:	8b 8b       	std	Y+19, r24	; 0x13
    1ce0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce4:	98 8b       	std	Y+16, r25	; 0x10
    1ce6:	8f 87       	std	Y+15, r24	; 0x0f
    1ce8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cea:	98 89       	ldd	r25, Y+16	; 0x10
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <CLCD_voidSendData+0x7a0>
    1cf0:	98 8b       	std	Y+16, r25	; 0x10
    1cf2:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW);
    1cf4:	82 e0       	ldi	r24, 0x02	; 2
    1cf6:	67 e0       	ldi	r22, 0x07	; 7
    1cf8:	40 e0       	ldi	r20, 0x00	; 0
    1cfa:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	a0 e8       	ldi	r26, 0x80	; 128
    1d04:	bf e3       	ldi	r27, 0x3F	; 63
    1d06:	8b 87       	std	Y+11, r24	; 0x0b
    1d08:	9c 87       	std	Y+12, r25	; 0x0c
    1d0a:	ad 87       	std	Y+13, r26	; 0x0d
    1d0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	4a ef       	ldi	r20, 0xFA	; 250
    1d1c:	54 e4       	ldi	r21, 0x44	; 68
    1d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	8f 83       	std	Y+7, r24	; 0x07
    1d28:	98 87       	std	Y+8, r25	; 0x08
    1d2a:	a9 87       	std	Y+9, r26	; 0x09
    1d2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d30:	78 85       	ldd	r23, Y+8	; 0x08
    1d32:	89 85       	ldd	r24, Y+9	; 0x09
    1d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e8       	ldi	r20, 0x80	; 128
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d42:	88 23       	and	r24, r24
    1d44:	2c f4       	brge	.+10     	; 0x1d50 <CLCD_voidSendData+0x804>
		__ticks = 1;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
    1d4e:	3f c0       	rjmp	.+126    	; 0x1dce <CLCD_voidSendData+0x882>
	else if (__tmp > 65535)
    1d50:	6f 81       	ldd	r22, Y+7	; 0x07
    1d52:	78 85       	ldd	r23, Y+8	; 0x08
    1d54:	89 85       	ldd	r24, Y+9	; 0x09
    1d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	3f ef       	ldi	r19, 0xFF	; 255
    1d5c:	4f e7       	ldi	r20, 0x7F	; 127
    1d5e:	57 e4       	ldi	r21, 0x47	; 71
    1d60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d64:	18 16       	cp	r1, r24
    1d66:	4c f5       	brge	.+82     	; 0x1dba <CLCD_voidSendData+0x86e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e2       	ldi	r20, 0x20	; 32
    1d76:	51 e4       	ldi	r21, 0x41	; 65
    1d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	bc 01       	movw	r22, r24
    1d82:	cd 01       	movw	r24, r26
    1d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	9e 83       	std	Y+6, r25	; 0x06
    1d8e:	8d 83       	std	Y+5, r24	; 0x05
    1d90:	0f c0       	rjmp	.+30     	; 0x1db0 <CLCD_voidSendData+0x864>
    1d92:	88 ec       	ldi	r24, 0xC8	; 200
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9c 83       	std	Y+4, r25	; 0x04
    1d98:	8b 83       	std	Y+3, r24	; 0x03
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <CLCD_voidSendData+0x852>
    1da2:	9c 83       	std	Y+4, r25	; 0x04
    1da4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da6:	8d 81       	ldd	r24, Y+5	; 0x05
    1da8:	9e 81       	ldd	r25, Y+6	; 0x06
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	9e 83       	std	Y+6, r25	; 0x06
    1dae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db0:	8d 81       	ldd	r24, Y+5	; 0x05
    1db2:	9e 81       	ldd	r25, Y+6	; 0x06
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	69 f7       	brne	.-38     	; 0x1d92 <CLCD_voidSendData+0x846>
    1db8:	14 c0       	rjmp	.+40     	; 0x1de2 <CLCD_voidSendData+0x896>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	9e 83       	std	Y+6, r25	; 0x06
    1dcc:	8d 83       	std	Y+5, r24	; 0x05
    1dce:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd2:	9a 83       	std	Y+2, r25	; 0x02
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <CLCD_voidSendData+0x88e>
    1dde:	9a 83       	std	Y+2, r25	; 0x02
    1de0:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_U8Data);
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW);
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1de2:	cd 59       	subi	r28, 0x9D	; 157
    1de4:	df 4f       	sbci	r29, 0xFF	; 255
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	08 95       	ret

00001dfa <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	2e 97       	sbiw	r28, 0x0e	; 14
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS , E and RW pins as output pins */
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_OUTPUT);
    1e0e:	82 e0       	ldi	r24, 0x02	; 2
    1e10:	60 e0       	ldi	r22, 0x00	; 0
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_OUTPUT);
    1e18:	82 e0       	ldi	r24, 0x02	; 2
    1e1a:	61 e0       	ldi	r22, 0x01	; 1
    1e1c:	41 e0       	ldi	r20, 0x01	; 1
    1e1e:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_OUTPUT);
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	67 e0       	ldi	r22, 0x07	; 7
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	a0 ea       	ldi	r26, 0xA0	; 160
    1e32:	b1 e4       	ldi	r27, 0x41	; 65
    1e34:	8b 87       	std	Y+11, r24	; 0x0b
    1e36:	9c 87       	std	Y+12, r25	; 0x0c
    1e38:	ad 87       	std	Y+13, r26	; 0x0d
    1e3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	4a ef       	ldi	r20, 0xFA	; 250
    1e4a:	54 e4       	ldi	r21, 0x44	; 68
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	8f 83       	std	Y+7, r24	; 0x07
    1e56:	98 87       	std	Y+8, r25	; 0x08
    1e58:	a9 87       	std	Y+9, r26	; 0x09
    1e5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5e:	78 85       	ldd	r23, Y+8	; 0x08
    1e60:	89 85       	ldd	r24, Y+9	; 0x09
    1e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e70:	88 23       	and	r24, r24
    1e72:	2c f4       	brge	.+10     	; 0x1e7e <CLCD_voidInit+0x84>
		__ticks = 1;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	9e 83       	std	Y+6, r25	; 0x06
    1e7a:	8d 83       	std	Y+5, r24	; 0x05
    1e7c:	3f c0       	rjmp	.+126    	; 0x1efc <CLCD_voidInit+0x102>
	else if (__tmp > 65535)
    1e7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e80:	78 85       	ldd	r23, Y+8	; 0x08
    1e82:	89 85       	ldd	r24, Y+9	; 0x09
    1e84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	3f ef       	ldi	r19, 0xFF	; 255
    1e8a:	4f e7       	ldi	r20, 0x7F	; 127
    1e8c:	57 e4       	ldi	r21, 0x47	; 71
    1e8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e92:	18 16       	cp	r1, r24
    1e94:	4c f5       	brge	.+82     	; 0x1ee8 <CLCD_voidInit+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e2       	ldi	r20, 0x20	; 32
    1ea4:	51 e4       	ldi	r21, 0x41	; 65
    1ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
    1ebe:	0f c0       	rjmp	.+30     	; 0x1ede <CLCD_voidInit+0xe4>
    1ec0:	88 ec       	ldi	r24, 0xC8	; 200
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9c 83       	std	Y+4, r25	; 0x04
    1ec6:	8b 83       	std	Y+3, r24	; 0x03
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <CLCD_voidInit+0xd2>
    1ed0:	9c 83       	std	Y+4, r25	; 0x04
    1ed2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	9e 83       	std	Y+6, r25	; 0x06
    1edc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	69 f7       	brne	.-38     	; 0x1ec0 <CLCD_voidInit+0xc6>
    1ee6:	14 c0       	rjmp	.+40     	; 0x1f10 <CLCD_voidInit+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eea:	78 85       	ldd	r23, Y+8	; 0x08
    1eec:	89 85       	ldd	r24, Y+9	; 0x09
    1eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	9e 83       	std	Y+6, r25	; 0x06
    1efa:	8d 83       	std	Y+5, r24	; 0x05
    1efc:	8d 81       	ldd	r24, Y+5	; 0x05
    1efe:	9e 81       	ldd	r25, Y+6	; 0x06
    1f00:	9a 83       	std	Y+2, r25	; 0x02
    1f02:	89 83       	std	Y+1, r24	; 0x01
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	9a 81       	ldd	r25, Y+2	; 0x02
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <CLCD_voidInit+0x10e>
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if (CLCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D4_PIN,DIO_u8PIN_OUTPUT);
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	60 e0       	ldi	r22, 0x00	; 0
    1f14:	41 e0       	ldi	r20, 0x01	; 1
    1f16:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D5_PIN,DIO_u8PIN_OUTPUT);
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	61 e0       	ldi	r22, 0x01	; 1
    1f1e:	41 e0       	ldi	r20, 0x01	; 1
    1f20:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D6_PIN,DIO_u8PIN_OUTPUT);
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	62 e0       	ldi	r22, 0x02	; 2
    1f28:	41 e0       	ldi	r20, 0x01	; 1
    1f2a:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D7_PIN,DIO_u8PIN_OUTPUT);
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	63 e0       	ldi	r22, 0x03	; 3
    1f32:	41 e0       	ldi	r20, 0x01	; 1
    1f34:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>

	/* Send for 4 bit initialization of LCD  */
	CLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1f38:	83 e3       	ldi	r24, 0x33	; 51
    1f3a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
	CLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1f3e:	82 e3       	ldi	r24, 0x32	; 50
    1f40:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	CLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1f44:	88 e2       	ldi	r24, 0x28	; 40
    1f46:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	CLCD_voidSendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
#endif

	CLCD_voidSendCommand(LCD_CURSOR_OFF);    /* cursor off */
    1f4a:	8c e0       	ldi	r24, 0x0C	; 12
    1f4c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
	CLCD_voidSendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
}
    1f56:	2e 96       	adiw	r28, 0x0e	; 14
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	00 d0       	rcall	.+0      	; 0x1f6e <CLCD_voidSendString+0x6>
    1f6e:	0f 92       	push	r0
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	9b 83       	std	Y+3, r25	; 0x03
    1f76:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    1f78:	19 82       	std	Y+1, r1	; 0x01
    1f7a:	0e c0       	rjmp	.+28     	; 0x1f98 <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	9b 81       	ldd	r25, Y+3	; 0x03
    1f86:	fc 01       	movw	r30, r24
    1f88:	e2 0f       	add	r30, r18
    1f8a:	f3 1f       	adc	r31, r19
    1f8c:	80 81       	ld	r24, Z
    1f8e:	0e 94 a6 0a 	call	0x154c	; 0x154c <CLCD_voidSendData>
		Local_u8Counter++;
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	8f 5f       	subi	r24, 0xFF	; 255
    1f96:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter = 0;
	while(Copy_pcString[Local_u8Counter] != '\0')
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	e2 0f       	add	r30, r18
    1fa6:	f3 1f       	adc	r31, r19
    1fa8:	80 81       	ld	r24, Z
    1faa:	88 23       	and	r24, r24
    1fac:	39 f7       	brne	.-50     	; 0x1f7c <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <CLCD_voidGoToXY+0x6>
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <CLCD_voidGoToXY+0x8>
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    1fc8:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8XPos) {
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	3c 83       	std	Y+4, r19	; 0x04
    1fd2:	2b 83       	std	Y+3, r18	; 0x03
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd8:	81 30       	cpi	r24, 0x01	; 1
    1fda:	91 05       	cpc	r25, r1
    1fdc:	d1 f0       	breq	.+52     	; 0x2012 <CLCD_voidGoToXY+0x58>
    1fde:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe2:	22 30       	cpi	r18, 0x02	; 2
    1fe4:	31 05       	cpc	r19, r1
    1fe6:	2c f4       	brge	.+10     	; 0x1ff2 <CLCD_voidGoToXY+0x38>
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	61 f0       	breq	.+24     	; 0x2008 <CLCD_voidGoToXY+0x4e>
    1ff0:	1d c0       	rjmp	.+58     	; 0x202c <CLCD_voidGoToXY+0x72>
    1ff2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ff6:	22 30       	cpi	r18, 0x02	; 2
    1ff8:	31 05       	cpc	r19, r1
    1ffa:	81 f0       	breq	.+32     	; 0x201c <CLCD_voidGoToXY+0x62>
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    2000:	83 30       	cpi	r24, 0x03	; 3
    2002:	91 05       	cpc	r25, r1
    2004:	79 f0       	breq	.+30     	; 0x2024 <CLCD_voidGoToXY+0x6a>
    2006:	12 c0       	rjmp	.+36     	; 0x202c <CLCD_voidGoToXY+0x72>
	case 0:
		CLCD_voidSendCommand(128 + Copy_u8YPos);
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	80 58       	subi	r24, 0x80	; 128
    200c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
    2010:	0d c0       	rjmp	.+26     	; 0x202c <CLCD_voidGoToXY+0x72>
		break;
	case 1:
		CLCD_voidSendCommand(192 + Copy_u8YPos);
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	80 54       	subi	r24, 0x40	; 64
    2016:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
    201a:	08 c0       	rjmp	.+16     	; 0x202c <CLCD_voidGoToXY+0x72>
		break;
	case 2:
		CLCD_voidSendCommand(256 + Copy_u8YPos);
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
    2022:	04 c0       	rjmp	.+8      	; 0x202c <CLCD_voidGoToXY+0x72>
		break;
	case 3:
		CLCD_voidSendCommand(320 + Copy_u8YPos);
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	80 5c       	subi	r24, 0xC0	; 192
    2028:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
	default:
		//
		break;

	}
}
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <CLCD_voidSendStringGoToXY>:

void CLCD_voidSendStringGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos,const char* Copy_pcString)
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	00 d0       	rcall	.+0      	; 0x2040 <CLCD_voidSendStringGoToXY+0x6>
    2040:	00 d0       	rcall	.+0      	; 0x2042 <CLCD_voidSendStringGoToXY+0x8>
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	6a 83       	std	Y+2, r22	; 0x02
    204a:	5c 83       	std	Y+4, r21	; 0x04
    204c:	4b 83       	std	Y+3, r20	; 0x03
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	6a 81       	ldd	r22, Y+2	; 0x02
    2052:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
	CLCD_voidSendString(Copy_pcString);
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	9c 81       	ldd	r25, Y+4	; 0x04
    205a:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>


}
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <CLCD_voidWriteSpecialCharacter>:
void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern , u8 Copy_u8PatternNumber , u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
    2074:	27 97       	sbiw	r28, 0x07	; 7
    2076:	0f b6       	in	r0, 0x3f	; 63
    2078:	f8 94       	cli
    207a:	de bf       	out	0x3e, r29	; 62
    207c:	0f be       	out	0x3f, r0	; 63
    207e:	cd bf       	out	0x3d, r28	; 61
    2080:	9c 83       	std	Y+4, r25	; 0x04
    2082:	8b 83       	std	Y+3, r24	; 0x03
    2084:	6d 83       	std	Y+5, r22	; 0x05
    2086:	4e 83       	std	Y+6, r20	; 0x06
    2088:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAdress = 0;
    208a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterator;
	u8SateSpecialCharIndx = 1;
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	80 93 36 01 	sts	0x0136, r24

	Local_u8CGRAMAdress = Copy_u8PatternNumber * 8;
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	88 2f       	mov	r24, r24
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCommand(Local_u8CGRAMAdress + 64);
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	80 5c       	subi	r24, 0xC0	; 192
    20aa:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator++)
    20ae:	19 82       	std	Y+1, r1	; 0x01
    20b0:	0e c0       	rjmp	.+28     	; 0x20ce <CLCD_voidWriteSpecialCharacter+0x62>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	9c 81       	ldd	r25, Y+4	; 0x04
    20bc:	fc 01       	movw	r30, r24
    20be:	e2 0f       	add	r30, r18
    20c0:	f3 1f       	adc	r31, r19
    20c2:	80 81       	ld	r24, Z
    20c4:	0e 94 a6 0a 	call	0x154c	; 0x154c <CLCD_voidSendData>
	u8SateSpecialCharIndx = 1;

	Local_u8CGRAMAdress = Copy_u8PatternNumber * 8;
	CLCD_voidSendCommand(Local_u8CGRAMAdress + 64);

	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator++)
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	8f 5f       	subi	r24, 0xFF	; 255
    20cc:	89 83       	std	Y+1, r24	; 0x01
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	88 30       	cpi	r24, 0x08	; 8
    20d2:	78 f3       	brcs	.-34     	; 0x20b2 <CLCD_voidWriteSpecialCharacter+0x46>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}
	CLCD_voidGoToXY(Copy_u8XPos , Copy_u8YPos);
    20d4:	8e 81       	ldd	r24, Y+6	; 0x06
    20d6:	6f 81       	ldd	r22, Y+7	; 0x07
    20d8:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNumber);
    20dc:	8d 81       	ldd	r24, Y+5	; 0x05
    20de:	0e 94 a6 0a 	call	0x154c	; 0x154c <CLCD_voidSendData>
	u8SateSpecialCharIndx = 0;
    20e2:	10 92 36 01 	sts	0x0136, r1
}
    20e6:	27 96       	adiw	r28, 0x07	; 7
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	08 95       	ret

000020f8 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(u32 Copy_u32Number)
{
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	61 97       	sbiw	r28, 0x11	; 17
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	de bf       	out	0x3e, r29	; 62
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	cd bf       	out	0x3d, r28	; 61
    210c:	6e 87       	std	Y+14, r22	; 0x0e
    210e:	7f 87       	std	Y+15, r23	; 0x0f
    2110:	88 8b       	std	Y+16, r24	; 0x10
    2112:	99 8b       	std	Y+17, r25	; 0x11
	u8 Local_u8DigitNumber;
	s8 Local_s8Counter = -1 , Local_s8Iterator;
    2114:	8f ef       	ldi	r24, 0xFF	; 255
    2116:	8a 83       	std	Y+2, r24	; 0x02
	u8 Array_Number[CLCD_SIZE_OF_ARRAY];
	do
	{
		Local_s8Counter++;
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	8f 5f       	subi	r24, 0xFF	; 255
    211c:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8DigitNumber = Copy_u32Number % 10;
    211e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2120:	9f 85       	ldd	r25, Y+15	; 0x0f
    2122:	a8 89       	ldd	r26, Y+16	; 0x10
    2124:	b9 89       	ldd	r27, Y+17	; 0x11
    2126:	2a e0       	ldi	r18, 0x0A	; 10
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e0       	ldi	r20, 0x00	; 0
    212c:	50 e0       	ldi	r21, 0x00	; 0
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	0e 94 b4 31 	call	0x6368	; 0x6368 <__udivmodsi4>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8b 83       	std	Y+3, r24	; 0x03
		Array_Number[Local_s8Counter] = Local_u8DigitNumber + '0';
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	28 2f       	mov	r18, r24
    2140:	33 27       	eor	r19, r19
    2142:	27 fd       	sbrc	r18, 7
    2144:	30 95       	com	r19
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	48 2f       	mov	r20, r24
    214a:	40 5d       	subi	r20, 0xD0	; 208
    214c:	ce 01       	movw	r24, r28
    214e:	04 96       	adiw	r24, 0x04	; 4
    2150:	fc 01       	movw	r30, r24
    2152:	e2 0f       	add	r30, r18
    2154:	f3 1f       	adc	r31, r19
    2156:	40 83       	st	Z, r20
		Copy_u32Number /= 10;
    2158:	8e 85       	ldd	r24, Y+14	; 0x0e
    215a:	9f 85       	ldd	r25, Y+15	; 0x0f
    215c:	a8 89       	ldd	r26, Y+16	; 0x10
    215e:	b9 89       	ldd	r27, Y+17	; 0x11
    2160:	2a e0       	ldi	r18, 0x0A	; 10
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e0       	ldi	r20, 0x00	; 0
    2166:	50 e0       	ldi	r21, 0x00	; 0
    2168:	bc 01       	movw	r22, r24
    216a:	cd 01       	movw	r24, r26
    216c:	0e 94 b4 31 	call	0x6368	; 0x6368 <__udivmodsi4>
    2170:	da 01       	movw	r26, r20
    2172:	c9 01       	movw	r24, r18
    2174:	8e 87       	std	Y+14, r24	; 0x0e
    2176:	9f 87       	std	Y+15, r25	; 0x0f
    2178:	a8 8b       	std	Y+16, r26	; 0x10
    217a:	b9 8b       	std	Y+17, r27	; 0x11
	}while(Copy_u32Number != 0);
    217c:	8e 85       	ldd	r24, Y+14	; 0x0e
    217e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2180:	a8 89       	ldd	r26, Y+16	; 0x10
    2182:	b9 89       	ldd	r27, Y+17	; 0x11
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	a1 05       	cpc	r26, r1
    2188:	b1 05       	cpc	r27, r1
    218a:	31 f6       	brne	.-116    	; 0x2118 <CLCD_voidSendNumber+0x20>
	for(Local_s8Iterator = Local_s8Counter; Local_s8Iterator >= 0; Local_s8Iterator--)
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01
    2190:	10 c0       	rjmp	.+32     	; 0x21b2 <CLCD_voidSendNumber+0xba>
	{
		CLCD_voidSendData(Array_Number[Local_s8Iterator]);
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	28 2f       	mov	r18, r24
    2196:	33 27       	eor	r19, r19
    2198:	27 fd       	sbrc	r18, 7
    219a:	30 95       	com	r19
    219c:	ce 01       	movw	r24, r28
    219e:	04 96       	adiw	r24, 0x04	; 4
    21a0:	fc 01       	movw	r30, r24
    21a2:	e2 0f       	add	r30, r18
    21a4:	f3 1f       	adc	r31, r19
    21a6:	80 81       	ld	r24, Z
    21a8:	0e 94 a6 0a 	call	0x154c	; 0x154c <CLCD_voidSendData>
		Local_s8Counter++;
		Local_u8DigitNumber = Copy_u32Number % 10;
		Array_Number[Local_s8Counter] = Local_u8DigitNumber + '0';
		Copy_u32Number /= 10;
	}while(Copy_u32Number != 0);
	for(Local_s8Iterator = Local_s8Counter; Local_s8Iterator >= 0; Local_s8Iterator--)
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	81 50       	subi	r24, 0x01	; 1
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	88 23       	and	r24, r24
    21b6:	6c f7       	brge	.-38     	; 0x2192 <CLCD_voidSendNumber+0x9a>
	{
		CLCD_voidSendData(Array_Number[Local_s8Iterator]);
	}
}
    21b8:	61 96       	adiw	r28, 0x11	; 17
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	f8 94       	cli
    21be:	de bf       	out	0x3e, r29	; 62
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	cd bf       	out	0x3d, r28	; 61
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <CLCD_voidIntegerToString>:

void CLCD_voidIntegerToString (u8 value)	// Display certain integer value on screen
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	61 97       	sbiw	r28, 0x11	; 17
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	f8 94       	cli
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	cd bf       	out	0x3d, r28	; 61
    21de:	89 8b       	std	Y+17, r24	; 0x11
	u8 number_str[16];
	itoa(value, number_str, 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    21e0:	89 89       	ldd	r24, Y+17	; 0x11
    21e2:	88 2f       	mov	r24, r24
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	9e 01       	movw	r18, r28
    21e8:	2f 5f       	subi	r18, 0xFF	; 255
    21ea:	3f 4f       	sbci	r19, 0xFF	; 255
    21ec:	b9 01       	movw	r22, r18
    21ee:	4a e0       	ldi	r20, 0x0A	; 10
    21f0:	50 e0       	ldi	r21, 0x00	; 0
    21f2:	0e 94 28 32 	call	0x6450	; 0x6450 <itoa>
	CLCD_voidSendString(number_str);
    21f6:	ce 01       	movw	r24, r28
    21f8:	01 96       	adiw	r24, 0x01	; 1
    21fa:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>
}
    21fe:	61 96       	adiw	r28, 0x11	; 17
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <CLCD_voidClearScreen>:

void CLCD_voidClearScreen (void)
{
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(LCD_CLEAR_COMMAND);
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
}
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	08 95       	ret

00002224 <DIO_voidInit>:
#include "DIO_register.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN0,DIO_u8PIN_OUTPUT);
    222c:	83 e0       	ldi	r24, 0x03	; 3
    222e:	60 e0       	ldi	r22, 0x00	; 0
    2230:	41 e0       	ldi	r20, 0x01	; 1
    2232:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_OUTPUT);
    2236:	83 e0       	ldi	r24, 0x03	; 3
    2238:	61 e0       	ldi	r22, 0x01	; 1
    223a:	41 e0       	ldi	r20, 0x01	; 1
    223c:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN2,DIO_u8PIN_OUTPUT);
    2240:	83 e0       	ldi	r24, 0x03	; 3
    2242:	62 e0       	ldi	r22, 0x02	; 2
    2244:	41 e0       	ldi	r20, 0x01	; 1
    2246:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN3,DIO_u8PIN_OUTPUT);
    224a:	83 e0       	ldi	r24, 0x03	; 3
    224c:	63 e0       	ldi	r22, 0x03	; 3
    224e:	41 e0       	ldi	r20, 0x01	; 1
    2250:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>


	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN6,DIO_u8PIN_OUTPUT);
    2254:	83 e0       	ldi	r24, 0x03	; 3
    2256:	66 e0       	ldi	r22, 0x06	; 6
    2258:	41 e0       	ldi	r20, 0x01	; 1
    225a:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN7,DIO_u8PIN_OUTPUT);
    225e:	83 e0       	ldi	r24, 0x03	; 3
    2260:	67 e0       	ldi	r22, 0x07	; 7
    2262:	41 e0       	ldi	r20, 0x01	; 1
    2264:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>

	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN0,DIO_u8PIN_LOW);
    2268:	83 e0       	ldi	r24, 0x03	; 3
    226a:	60 e0       	ldi	r22, 0x00	; 0
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_HIGH);
    2272:	83 e0       	ldi	r24, 0x03	; 3
    2274:	61 e0       	ldi	r22, 0x01	; 1
    2276:	41 e0       	ldi	r20, 0x01	; 1
    2278:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN2,DIO_u8PIN_LOW);
    227c:	83 e0       	ldi	r24, 0x03	; 3
    227e:	62 e0       	ldi	r22, 0x02	; 2
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN3,DIO_u8PIN_LOW);
    2286:	83 e0       	ldi	r24, 0x03	; 3
    2288:	63 e0       	ldi	r22, 0x03	; 3
    228a:	40 e0       	ldi	r20, 0x00	; 0
    228c:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN6,DIO_u8PIN_LOW);
    2290:	83 e0       	ldi	r24, 0x03	; 3
    2292:	66 e0       	ldi	r22, 0x06	; 6
    2294:	40 e0       	ldi	r20, 0x00	; 0
    2296:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN7,DIO_u8PIN_LOW);
    229a:	83 e0       	ldi	r24, 0x03	; 3
    229c:	67 e0       	ldi	r22, 0x07	; 7
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
}
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	2a 97       	sbiw	r28, 0x0a	; 10
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	de bf       	out	0x3e, r29	; 62
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	cd bf       	out	0x3d, r28	; 61
    22be:	8a 83       	std	Y+2, r24	; 0x02
    22c0:	6b 83       	std	Y+3, r22	; 0x03
    22c2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    22c4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	88 30       	cpi	r24, 0x08	; 8
    22ca:	08 f0       	brcs	.+2      	; 0x22ce <DIO_u8SetPinDirection+0x24>
    22cc:	b9 c1       	rjmp	.+882    	; 0x2640 <DIO_u8SetPinDirection+0x396>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    22ce:	8c 81       	ldd	r24, Y+4	; 0x04
    22d0:	88 23       	and	r24, r24
    22d2:	09 f0       	breq	.+2      	; 0x22d6 <DIO_u8SetPinDirection+0x2c>
    22d4:	77 c0       	rjmp	.+238    	; 0x23c4 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	28 2f       	mov	r18, r24
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	3a 87       	std	Y+10, r19	; 0x0a
    22de:	29 87       	std	Y+9, r18	; 0x09
    22e0:	89 85       	ldd	r24, Y+9	; 0x09
    22e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e4:	81 30       	cpi	r24, 0x01	; 1
    22e6:	91 05       	cpc	r25, r1
    22e8:	59 f1       	breq	.+86     	; 0x2340 <DIO_u8SetPinDirection+0x96>
    22ea:	29 85       	ldd	r18, Y+9	; 0x09
    22ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    22ee:	22 30       	cpi	r18, 0x02	; 2
    22f0:	31 05       	cpc	r19, r1
    22f2:	2c f4       	brge	.+10     	; 0x22fe <DIO_u8SetPinDirection+0x54>
    22f4:	89 85       	ldd	r24, Y+9	; 0x09
    22f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	69 f0       	breq	.+26     	; 0x2316 <DIO_u8SetPinDirection+0x6c>
    22fc:	60 c0       	rjmp	.+192    	; 0x23be <DIO_u8SetPinDirection+0x114>
    22fe:	29 85       	ldd	r18, Y+9	; 0x09
    2300:	3a 85       	ldd	r19, Y+10	; 0x0a
    2302:	22 30       	cpi	r18, 0x02	; 2
    2304:	31 05       	cpc	r19, r1
    2306:	89 f1       	breq	.+98     	; 0x236a <DIO_u8SetPinDirection+0xc0>
    2308:	89 85       	ldd	r24, Y+9	; 0x09
    230a:	9a 85       	ldd	r25, Y+10	; 0x0a
    230c:	83 30       	cpi	r24, 0x03	; 3
    230e:	91 05       	cpc	r25, r1
    2310:	09 f4       	brne	.+2      	; 0x2314 <DIO_u8SetPinDirection+0x6a>
    2312:	40 c0       	rjmp	.+128    	; 0x2394 <DIO_u8SetPinDirection+0xea>
    2314:	54 c0       	rjmp	.+168    	; 0x23be <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    2316:	aa e3       	ldi	r26, 0x3A	; 58
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	ea e3       	ldi	r30, 0x3A	; 58
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	48 2f       	mov	r20, r24
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	28 2f       	mov	r18, r24
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	02 2e       	mov	r0, r18
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <DIO_u8SetPinDirection+0x8a>
    2330:	88 0f       	add	r24, r24
    2332:	99 1f       	adc	r25, r25
    2334:	0a 94       	dec	r0
    2336:	e2 f7       	brpl	.-8      	; 0x2330 <DIO_u8SetPinDirection+0x86>
    2338:	80 95       	com	r24
    233a:	84 23       	and	r24, r20
    233c:	8c 93       	st	X, r24
    233e:	82 c1       	rjmp	.+772    	; 0x2644 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    2340:	a7 e3       	ldi	r26, 0x37	; 55
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	e7 e3       	ldi	r30, 0x37	; 55
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	48 2f       	mov	r20, r24
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	28 2f       	mov	r18, r24
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	02 2e       	mov	r0, r18
    2358:	02 c0       	rjmp	.+4      	; 0x235e <DIO_u8SetPinDirection+0xb4>
    235a:	88 0f       	add	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	0a 94       	dec	r0
    2360:	e2 f7       	brpl	.-8      	; 0x235a <DIO_u8SetPinDirection+0xb0>
    2362:	80 95       	com	r24
    2364:	84 23       	and	r24, r20
    2366:	8c 93       	st	X, r24
    2368:	6d c1       	rjmp	.+730    	; 0x2644 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    236a:	a4 e3       	ldi	r26, 0x34	; 52
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	e4 e3       	ldi	r30, 0x34	; 52
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	48 2f       	mov	r20, r24
    2376:	8b 81       	ldd	r24, Y+3	; 0x03
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	02 2e       	mov	r0, r18
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <DIO_u8SetPinDirection+0xde>
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	0a 94       	dec	r0
    238a:	e2 f7       	brpl	.-8      	; 0x2384 <DIO_u8SetPinDirection+0xda>
    238c:	80 95       	com	r24
    238e:	84 23       	and	r24, r20
    2390:	8c 93       	st	X, r24
    2392:	58 c1       	rjmp	.+688    	; 0x2644 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    2394:	a1 e3       	ldi	r26, 0x31	; 49
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	e1 e3       	ldi	r30, 0x31	; 49
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	48 2f       	mov	r20, r24
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	28 2f       	mov	r18, r24
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	02 2e       	mov	r0, r18
    23ac:	02 c0       	rjmp	.+4      	; 0x23b2 <DIO_u8SetPinDirection+0x108>
    23ae:	88 0f       	add	r24, r24
    23b0:	99 1f       	adc	r25, r25
    23b2:	0a 94       	dec	r0
    23b4:	e2 f7       	brpl	.-8      	; 0x23ae <DIO_u8SetPinDirection+0x104>
    23b6:	80 95       	com	r24
    23b8:	84 23       	and	r24, r20
    23ba:	8c 93       	st	X, r24
    23bc:	43 c1       	rjmp	.+646    	; 0x2644 <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	89 83       	std	Y+1, r24	; 0x01
    23c2:	40 c1       	rjmp	.+640    	; 0x2644 <DIO_u8SetPinDirection+0x39a>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
    23c4:	8c 81       	ldd	r24, Y+4	; 0x04
    23c6:	81 30       	cpi	r24, 0x01	; 1
    23c8:	09 f0       	breq	.+2      	; 0x23cc <DIO_u8SetPinDirection+0x122>
    23ca:	72 c0       	rjmp	.+228    	; 0x24b0 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	28 2f       	mov	r18, r24
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	38 87       	std	Y+8, r19	; 0x08
    23d4:	2f 83       	std	Y+7, r18	; 0x07
    23d6:	8f 81       	ldd	r24, Y+7	; 0x07
    23d8:	98 85       	ldd	r25, Y+8	; 0x08
    23da:	81 30       	cpi	r24, 0x01	; 1
    23dc:	91 05       	cpc	r25, r1
    23de:	49 f1       	breq	.+82     	; 0x2432 <DIO_u8SetPinDirection+0x188>
    23e0:	2f 81       	ldd	r18, Y+7	; 0x07
    23e2:	38 85       	ldd	r19, Y+8	; 0x08
    23e4:	22 30       	cpi	r18, 0x02	; 2
    23e6:	31 05       	cpc	r19, r1
    23e8:	2c f4       	brge	.+10     	; 0x23f4 <DIO_u8SetPinDirection+0x14a>
    23ea:	8f 81       	ldd	r24, Y+7	; 0x07
    23ec:	98 85       	ldd	r25, Y+8	; 0x08
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	61 f0       	breq	.+24     	; 0x240a <DIO_u8SetPinDirection+0x160>
    23f2:	5b c0       	rjmp	.+182    	; 0x24aa <DIO_u8SetPinDirection+0x200>
    23f4:	2f 81       	ldd	r18, Y+7	; 0x07
    23f6:	38 85       	ldd	r19, Y+8	; 0x08
    23f8:	22 30       	cpi	r18, 0x02	; 2
    23fa:	31 05       	cpc	r19, r1
    23fc:	71 f1       	breq	.+92     	; 0x245a <DIO_u8SetPinDirection+0x1b0>
    23fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2400:	98 85       	ldd	r25, Y+8	; 0x08
    2402:	83 30       	cpi	r24, 0x03	; 3
    2404:	91 05       	cpc	r25, r1
    2406:	e9 f1       	breq	.+122    	; 0x2482 <DIO_u8SetPinDirection+0x1d8>
    2408:	50 c0       	rjmp	.+160    	; 0x24aa <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    240a:	aa e3       	ldi	r26, 0x3A	; 58
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	ea e3       	ldi	r30, 0x3A	; 58
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	48 2f       	mov	r20, r24
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	28 2f       	mov	r18, r24
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	02 2e       	mov	r0, r18
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <DIO_u8SetPinDirection+0x17e>
    2424:	88 0f       	add	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	0a 94       	dec	r0
    242a:	e2 f7       	brpl	.-8      	; 0x2424 <DIO_u8SetPinDirection+0x17a>
    242c:	84 2b       	or	r24, r20
    242e:	8c 93       	st	X, r24
    2430:	09 c1       	rjmp	.+530    	; 0x2644 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    2432:	a7 e3       	ldi	r26, 0x37	; 55
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	e7 e3       	ldi	r30, 0x37	; 55
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	48 2f       	mov	r20, r24
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	28 2f       	mov	r18, r24
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	02 2e       	mov	r0, r18
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <DIO_u8SetPinDirection+0x1a6>
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	0a 94       	dec	r0
    2452:	e2 f7       	brpl	.-8      	; 0x244c <DIO_u8SetPinDirection+0x1a2>
    2454:	84 2b       	or	r24, r20
    2456:	8c 93       	st	X, r24
    2458:	f5 c0       	rjmp	.+490    	; 0x2644 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    245a:	a4 e3       	ldi	r26, 0x34	; 52
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e4 e3       	ldi	r30, 0x34	; 52
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	48 2f       	mov	r20, r24
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	28 2f       	mov	r18, r24
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	02 2e       	mov	r0, r18
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <DIO_u8SetPinDirection+0x1ce>
    2474:	88 0f       	add	r24, r24
    2476:	99 1f       	adc	r25, r25
    2478:	0a 94       	dec	r0
    247a:	e2 f7       	brpl	.-8      	; 0x2474 <DIO_u8SetPinDirection+0x1ca>
    247c:	84 2b       	or	r24, r20
    247e:	8c 93       	st	X, r24
    2480:	e1 c0       	rjmp	.+450    	; 0x2644 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    2482:	a1 e3       	ldi	r26, 0x31	; 49
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	e1 e3       	ldi	r30, 0x31	; 49
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	48 2f       	mov	r20, r24
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	28 2f       	mov	r18, r24
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	02 2e       	mov	r0, r18
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <DIO_u8SetPinDirection+0x1f6>
    249c:	88 0f       	add	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	0a 94       	dec	r0
    24a2:	e2 f7       	brpl	.-8      	; 0x249c <DIO_u8SetPinDirection+0x1f2>
    24a4:	84 2b       	or	r24, r20
    24a6:	8c 93       	st	X, r24
    24a8:	cd c0       	rjmp	.+410    	; 0x2644 <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	89 83       	std	Y+1, r24	; 0x01
    24ae:	ca c0       	rjmp	.+404    	; 0x2644 <DIO_u8SetPinDirection+0x39a>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_INPULLUP)
    24b0:	8c 81       	ldd	r24, Y+4	; 0x04
    24b2:	82 30       	cpi	r24, 0x02	; 2
    24b4:	09 f0       	breq	.+2      	; 0x24b8 <DIO_u8SetPinDirection+0x20e>
    24b6:	c1 c0       	rjmp	.+386    	; 0x263a <DIO_u8SetPinDirection+0x390>
			{
				switch(Copy_u8Port)
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	3e 83       	std	Y+6, r19	; 0x06
    24c0:	2d 83       	std	Y+5, r18	; 0x05
    24c2:	8d 81       	ldd	r24, Y+5	; 0x05
    24c4:	9e 81       	ldd	r25, Y+6	; 0x06
    24c6:	81 30       	cpi	r24, 0x01	; 1
    24c8:	91 05       	cpc	r25, r1
    24ca:	09 f4       	brne	.+2      	; 0x24ce <DIO_u8SetPinDirection+0x224>
    24cc:	3e c0       	rjmp	.+124    	; 0x254a <DIO_u8SetPinDirection+0x2a0>
    24ce:	2d 81       	ldd	r18, Y+5	; 0x05
    24d0:	3e 81       	ldd	r19, Y+6	; 0x06
    24d2:	22 30       	cpi	r18, 0x02	; 2
    24d4:	31 05       	cpc	r19, r1
    24d6:	2c f4       	brge	.+10     	; 0x24e2 <DIO_u8SetPinDirection+0x238>
    24d8:	8d 81       	ldd	r24, Y+5	; 0x05
    24da:	9e 81       	ldd	r25, Y+6	; 0x06
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	71 f0       	breq	.+28     	; 0x24fc <DIO_u8SetPinDirection+0x252>
    24e0:	a9 c0       	rjmp	.+338    	; 0x2634 <DIO_u8SetPinDirection+0x38a>
    24e2:	2d 81       	ldd	r18, Y+5	; 0x05
    24e4:	3e 81       	ldd	r19, Y+6	; 0x06
    24e6:	22 30       	cpi	r18, 0x02	; 2
    24e8:	31 05       	cpc	r19, r1
    24ea:	09 f4       	brne	.+2      	; 0x24ee <DIO_u8SetPinDirection+0x244>
    24ec:	55 c0       	rjmp	.+170    	; 0x2598 <DIO_u8SetPinDirection+0x2ee>
    24ee:	8d 81       	ldd	r24, Y+5	; 0x05
    24f0:	9e 81       	ldd	r25, Y+6	; 0x06
    24f2:	83 30       	cpi	r24, 0x03	; 3
    24f4:	91 05       	cpc	r25, r1
    24f6:	09 f4       	brne	.+2      	; 0x24fa <DIO_u8SetPinDirection+0x250>
    24f8:	76 c0       	rjmp	.+236    	; 0x25e6 <DIO_u8SetPinDirection+0x33c>
    24fa:	9c c0       	rjmp	.+312    	; 0x2634 <DIO_u8SetPinDirection+0x38a>
				{
				case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); SET_BIT(PORTA,Copy_u8Pin); break;
    24fc:	aa e3       	ldi	r26, 0x3A	; 58
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	ea e3       	ldi	r30, 0x3A	; 58
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	48 2f       	mov	r20, r24
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	28 2f       	mov	r18, r24
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <DIO_u8SetPinDirection+0x26e>
    2514:	88 0f       	add	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	2a 95       	dec	r18
    251a:	e2 f7       	brpl	.-8      	; 0x2514 <DIO_u8SetPinDirection+0x26a>
    251c:	80 95       	com	r24
    251e:	84 23       	and	r24, r20
    2520:	8c 93       	st	X, r24
    2522:	ab e3       	ldi	r26, 0x3B	; 59
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	eb e3       	ldi	r30, 0x3B	; 59
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	48 2f       	mov	r20, r24
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	02 2e       	mov	r0, r18
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <DIO_u8SetPinDirection+0x296>
    253c:	88 0f       	add	r24, r24
    253e:	99 1f       	adc	r25, r25
    2540:	0a 94       	dec	r0
    2542:	e2 f7       	brpl	.-8      	; 0x253c <DIO_u8SetPinDirection+0x292>
    2544:	84 2b       	or	r24, r20
    2546:	8c 93       	st	X, r24
    2548:	7d c0       	rjmp	.+250    	; 0x2644 <DIO_u8SetPinDirection+0x39a>
				case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); SET_BIT(PORTB,Copy_u8Pin); break;
    254a:	a7 e3       	ldi	r26, 0x37	; 55
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e7 e3       	ldi	r30, 0x37	; 55
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	48 2f       	mov	r20, r24
    2556:	8b 81       	ldd	r24, Y+3	; 0x03
    2558:	28 2f       	mov	r18, r24
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <DIO_u8SetPinDirection+0x2bc>
    2562:	88 0f       	add	r24, r24
    2564:	99 1f       	adc	r25, r25
    2566:	2a 95       	dec	r18
    2568:	e2 f7       	brpl	.-8      	; 0x2562 <DIO_u8SetPinDirection+0x2b8>
    256a:	80 95       	com	r24
    256c:	84 23       	and	r24, r20
    256e:	8c 93       	st	X, r24
    2570:	a8 e3       	ldi	r26, 0x38	; 56
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	e8 e3       	ldi	r30, 0x38	; 56
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	48 2f       	mov	r20, r24
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	28 2f       	mov	r18, r24
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	02 2e       	mov	r0, r18
    2588:	02 c0       	rjmp	.+4      	; 0x258e <DIO_u8SetPinDirection+0x2e4>
    258a:	88 0f       	add	r24, r24
    258c:	99 1f       	adc	r25, r25
    258e:	0a 94       	dec	r0
    2590:	e2 f7       	brpl	.-8      	; 0x258a <DIO_u8SetPinDirection+0x2e0>
    2592:	84 2b       	or	r24, r20
    2594:	8c 93       	st	X, r24
    2596:	56 c0       	rjmp	.+172    	; 0x2644 <DIO_u8SetPinDirection+0x39a>
				case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); SET_BIT(PORTC,Copy_u8Pin); break;
    2598:	a4 e3       	ldi	r26, 0x34	; 52
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e4 e3       	ldi	r30, 0x34	; 52
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	48 2f       	mov	r20, r24
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	28 2f       	mov	r18, r24
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <DIO_u8SetPinDirection+0x30a>
    25b0:	88 0f       	add	r24, r24
    25b2:	99 1f       	adc	r25, r25
    25b4:	2a 95       	dec	r18
    25b6:	e2 f7       	brpl	.-8      	; 0x25b0 <DIO_u8SetPinDirection+0x306>
    25b8:	80 95       	com	r24
    25ba:	84 23       	and	r24, r20
    25bc:	8c 93       	st	X, r24
    25be:	a5 e3       	ldi	r26, 0x35	; 53
    25c0:	b0 e0       	ldi	r27, 0x00	; 0
    25c2:	e5 e3       	ldi	r30, 0x35	; 53
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	48 2f       	mov	r20, r24
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
    25cc:	28 2f       	mov	r18, r24
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	02 2e       	mov	r0, r18
    25d6:	02 c0       	rjmp	.+4      	; 0x25dc <DIO_u8SetPinDirection+0x332>
    25d8:	88 0f       	add	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	0a 94       	dec	r0
    25de:	e2 f7       	brpl	.-8      	; 0x25d8 <DIO_u8SetPinDirection+0x32e>
    25e0:	84 2b       	or	r24, r20
    25e2:	8c 93       	st	X, r24
    25e4:	2f c0       	rjmp	.+94     	; 0x2644 <DIO_u8SetPinDirection+0x39a>
				case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); SET_BIT(PORTD,Copy_u8Pin); break;
    25e6:	a1 e3       	ldi	r26, 0x31	; 49
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	e1 e3       	ldi	r30, 0x31	; 49
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	48 2f       	mov	r20, r24
    25f2:	8b 81       	ldd	r24, Y+3	; 0x03
    25f4:	28 2f       	mov	r18, r24
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	02 c0       	rjmp	.+4      	; 0x2602 <DIO_u8SetPinDirection+0x358>
    25fe:	88 0f       	add	r24, r24
    2600:	99 1f       	adc	r25, r25
    2602:	2a 95       	dec	r18
    2604:	e2 f7       	brpl	.-8      	; 0x25fe <DIO_u8SetPinDirection+0x354>
    2606:	80 95       	com	r24
    2608:	84 23       	and	r24, r20
    260a:	8c 93       	st	X, r24
    260c:	a2 e3       	ldi	r26, 0x32	; 50
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	e2 e3       	ldi	r30, 0x32	; 50
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	48 2f       	mov	r20, r24
    2618:	8b 81       	ldd	r24, Y+3	; 0x03
    261a:	28 2f       	mov	r18, r24
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	02 2e       	mov	r0, r18
    2624:	02 c0       	rjmp	.+4      	; 0x262a <DIO_u8SetPinDirection+0x380>
    2626:	88 0f       	add	r24, r24
    2628:	99 1f       	adc	r25, r25
    262a:	0a 94       	dec	r0
    262c:	e2 f7       	brpl	.-8      	; 0x2626 <DIO_u8SetPinDirection+0x37c>
    262e:	84 2b       	or	r24, r20
    2630:	8c 93       	st	X, r24
    2632:	08 c0       	rjmp	.+16     	; 0x2644 <DIO_u8SetPinDirection+0x39a>
				default: Local_u8ErrorState=1; break;
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	89 83       	std	Y+1, r24	; 0x01
    2638:	05 c0       	rjmp	.+10     	; 0x2644 <DIO_u8SetPinDirection+0x39a>
				}
			}
		else
		{
			Local_u8ErrorState=1;
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	89 83       	std	Y+1, r24	; 0x01
    263e:	02 c0       	rjmp	.+4      	; 0x2644 <DIO_u8SetPinDirection+0x39a>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2644:	89 81       	ldd	r24, Y+1	; 0x01
}
    2646:	2a 96       	adiw	r28, 0x0a	; 10
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	cd bf       	out	0x3d, r28	; 61
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	00 d0       	rcall	.+0      	; 0x265e <DIO_u8SetPortDirection+0x6>
    265e:	00 d0       	rcall	.+0      	; 0x2660 <DIO_u8SetPortDirection+0x8>
    2660:	0f 92       	push	r0
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
    2666:	8a 83       	std	Y+2, r24	; 0x02
    2668:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    266a:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	28 2f       	mov	r18, r24
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	3d 83       	std	Y+5, r19	; 0x05
    2674:	2c 83       	std	Y+4, r18	; 0x04
    2676:	8c 81       	ldd	r24, Y+4	; 0x04
    2678:	9d 81       	ldd	r25, Y+5	; 0x05
    267a:	81 30       	cpi	r24, 0x01	; 1
    267c:	91 05       	cpc	r25, r1
    267e:	d1 f0       	breq	.+52     	; 0x26b4 <DIO_u8SetPortDirection+0x5c>
    2680:	2c 81       	ldd	r18, Y+4	; 0x04
    2682:	3d 81       	ldd	r19, Y+5	; 0x05
    2684:	22 30       	cpi	r18, 0x02	; 2
    2686:	31 05       	cpc	r19, r1
    2688:	2c f4       	brge	.+10     	; 0x2694 <DIO_u8SetPortDirection+0x3c>
    268a:	8c 81       	ldd	r24, Y+4	; 0x04
    268c:	9d 81       	ldd	r25, Y+5	; 0x05
    268e:	00 97       	sbiw	r24, 0x00	; 0
    2690:	61 f0       	breq	.+24     	; 0x26aa <DIO_u8SetPortDirection+0x52>
    2692:	1f c0       	rjmp	.+62     	; 0x26d2 <DIO_u8SetPortDirection+0x7a>
    2694:	2c 81       	ldd	r18, Y+4	; 0x04
    2696:	3d 81       	ldd	r19, Y+5	; 0x05
    2698:	22 30       	cpi	r18, 0x02	; 2
    269a:	31 05       	cpc	r19, r1
    269c:	81 f0       	breq	.+32     	; 0x26be <DIO_u8SetPortDirection+0x66>
    269e:	8c 81       	ldd	r24, Y+4	; 0x04
    26a0:	9d 81       	ldd	r25, Y+5	; 0x05
    26a2:	83 30       	cpi	r24, 0x03	; 3
    26a4:	91 05       	cpc	r25, r1
    26a6:	81 f0       	breq	.+32     	; 0x26c8 <DIO_u8SetPortDirection+0x70>
    26a8:	14 c0       	rjmp	.+40     	; 0x26d2 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    26aa:	ea e3       	ldi	r30, 0x3A	; 58
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	8b 81       	ldd	r24, Y+3	; 0x03
    26b0:	80 83       	st	Z, r24
    26b2:	11 c0       	rjmp	.+34     	; 0x26d6 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    26b4:	e7 e3       	ldi	r30, 0x37	; 55
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ba:	80 83       	st	Z, r24
    26bc:	0c c0       	rjmp	.+24     	; 0x26d6 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    26be:	e4 e3       	ldi	r30, 0x34	; 52
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	80 83       	st	Z, r24
    26c6:	07 c0       	rjmp	.+14     	; 0x26d6 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    26c8:	e1 e3       	ldi	r30, 0x31	; 49
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	80 83       	st	Z, r24
    26d0:	02 c0       	rjmp	.+4      	; 0x26d6 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    26d8:	0f 90       	pop	r0
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	cf 91       	pop	r28
    26e4:	df 91       	pop	r29
    26e6:	08 95       	ret

000026e8 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    26e8:	df 93       	push	r29
    26ea:	cf 93       	push	r28
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    26f0:	28 97       	sbiw	r28, 0x08	; 8
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	de bf       	out	0x3e, r29	; 62
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	cd bf       	out	0x3d, r28	; 61
    26fc:	8a 83       	std	Y+2, r24	; 0x02
    26fe:	6b 83       	std	Y+3, r22	; 0x03
    2700:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2702:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	88 30       	cpi	r24, 0x08	; 8
    2708:	08 f0       	brcs	.+2      	; 0x270c <DIO_u8SetPinValue+0x24>
    270a:	f4 c0       	rjmp	.+488    	; 0x28f4 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    270c:	8c 81       	ldd	r24, Y+4	; 0x04
    270e:	88 23       	and	r24, r24
    2710:	09 f0       	breq	.+2      	; 0x2714 <DIO_u8SetPinValue+0x2c>
    2712:	77 c0       	rjmp	.+238    	; 0x2802 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    2714:	8a 81       	ldd	r24, Y+2	; 0x02
    2716:	28 2f       	mov	r18, r24
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	38 87       	std	Y+8, r19	; 0x08
    271c:	2f 83       	std	Y+7, r18	; 0x07
    271e:	8f 81       	ldd	r24, Y+7	; 0x07
    2720:	98 85       	ldd	r25, Y+8	; 0x08
    2722:	81 30       	cpi	r24, 0x01	; 1
    2724:	91 05       	cpc	r25, r1
    2726:	59 f1       	breq	.+86     	; 0x277e <DIO_u8SetPinValue+0x96>
    2728:	2f 81       	ldd	r18, Y+7	; 0x07
    272a:	38 85       	ldd	r19, Y+8	; 0x08
    272c:	22 30       	cpi	r18, 0x02	; 2
    272e:	31 05       	cpc	r19, r1
    2730:	2c f4       	brge	.+10     	; 0x273c <DIO_u8SetPinValue+0x54>
    2732:	8f 81       	ldd	r24, Y+7	; 0x07
    2734:	98 85       	ldd	r25, Y+8	; 0x08
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	69 f0       	breq	.+26     	; 0x2754 <DIO_u8SetPinValue+0x6c>
    273a:	60 c0       	rjmp	.+192    	; 0x27fc <DIO_u8SetPinValue+0x114>
    273c:	2f 81       	ldd	r18, Y+7	; 0x07
    273e:	38 85       	ldd	r19, Y+8	; 0x08
    2740:	22 30       	cpi	r18, 0x02	; 2
    2742:	31 05       	cpc	r19, r1
    2744:	89 f1       	breq	.+98     	; 0x27a8 <DIO_u8SetPinValue+0xc0>
    2746:	8f 81       	ldd	r24, Y+7	; 0x07
    2748:	98 85       	ldd	r25, Y+8	; 0x08
    274a:	83 30       	cpi	r24, 0x03	; 3
    274c:	91 05       	cpc	r25, r1
    274e:	09 f4       	brne	.+2      	; 0x2752 <DIO_u8SetPinValue+0x6a>
    2750:	40 c0       	rjmp	.+128    	; 0x27d2 <DIO_u8SetPinValue+0xea>
    2752:	54 c0       	rjmp	.+168    	; 0x27fc <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    2754:	ab e3       	ldi	r26, 0x3B	; 59
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	eb e3       	ldi	r30, 0x3B	; 59
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	48 2f       	mov	r20, r24
    2760:	8b 81       	ldd	r24, Y+3	; 0x03
    2762:	28 2f       	mov	r18, r24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	02 2e       	mov	r0, r18
    276c:	02 c0       	rjmp	.+4      	; 0x2772 <DIO_u8SetPinValue+0x8a>
    276e:	88 0f       	add	r24, r24
    2770:	99 1f       	adc	r25, r25
    2772:	0a 94       	dec	r0
    2774:	e2 f7       	brpl	.-8      	; 0x276e <DIO_u8SetPinValue+0x86>
    2776:	80 95       	com	r24
    2778:	84 23       	and	r24, r20
    277a:	8c 93       	st	X, r24
    277c:	bd c0       	rjmp	.+378    	; 0x28f8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    277e:	a8 e3       	ldi	r26, 0x38	; 56
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	e8 e3       	ldi	r30, 0x38	; 56
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	48 2f       	mov	r20, r24
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	28 2f       	mov	r18, r24
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	02 2e       	mov	r0, r18
    2796:	02 c0       	rjmp	.+4      	; 0x279c <DIO_u8SetPinValue+0xb4>
    2798:	88 0f       	add	r24, r24
    279a:	99 1f       	adc	r25, r25
    279c:	0a 94       	dec	r0
    279e:	e2 f7       	brpl	.-8      	; 0x2798 <DIO_u8SetPinValue+0xb0>
    27a0:	80 95       	com	r24
    27a2:	84 23       	and	r24, r20
    27a4:	8c 93       	st	X, r24
    27a6:	a8 c0       	rjmp	.+336    	; 0x28f8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    27a8:	a5 e3       	ldi	r26, 0x35	; 53
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	e5 e3       	ldi	r30, 0x35	; 53
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	48 2f       	mov	r20, r24
    27b4:	8b 81       	ldd	r24, Y+3	; 0x03
    27b6:	28 2f       	mov	r18, r24
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	02 2e       	mov	r0, r18
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <DIO_u8SetPinValue+0xde>
    27c2:	88 0f       	add	r24, r24
    27c4:	99 1f       	adc	r25, r25
    27c6:	0a 94       	dec	r0
    27c8:	e2 f7       	brpl	.-8      	; 0x27c2 <DIO_u8SetPinValue+0xda>
    27ca:	80 95       	com	r24
    27cc:	84 23       	and	r24, r20
    27ce:	8c 93       	st	X, r24
    27d0:	93 c0       	rjmp	.+294    	; 0x28f8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    27d2:	a2 e3       	ldi	r26, 0x32	; 50
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	e2 e3       	ldi	r30, 0x32	; 50
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	48 2f       	mov	r20, r24
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	02 2e       	mov	r0, r18
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <DIO_u8SetPinValue+0x108>
    27ec:	88 0f       	add	r24, r24
    27ee:	99 1f       	adc	r25, r25
    27f0:	0a 94       	dec	r0
    27f2:	e2 f7       	brpl	.-8      	; 0x27ec <DIO_u8SetPinValue+0x104>
    27f4:	80 95       	com	r24
    27f6:	84 23       	and	r24, r20
    27f8:	8c 93       	st	X, r24
    27fa:	7e c0       	rjmp	.+252    	; 0x28f8 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	7b c0       	rjmp	.+246    	; 0x28f8 <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
    2802:	8c 81       	ldd	r24, Y+4	; 0x04
    2804:	81 30       	cpi	r24, 0x01	; 1
    2806:	09 f0       	breq	.+2      	; 0x280a <DIO_u8SetPinValue+0x122>
    2808:	72 c0       	rjmp	.+228    	; 0x28ee <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
    280c:	28 2f       	mov	r18, r24
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	3e 83       	std	Y+6, r19	; 0x06
    2812:	2d 83       	std	Y+5, r18	; 0x05
    2814:	8d 81       	ldd	r24, Y+5	; 0x05
    2816:	9e 81       	ldd	r25, Y+6	; 0x06
    2818:	81 30       	cpi	r24, 0x01	; 1
    281a:	91 05       	cpc	r25, r1
    281c:	49 f1       	breq	.+82     	; 0x2870 <DIO_u8SetPinValue+0x188>
    281e:	2d 81       	ldd	r18, Y+5	; 0x05
    2820:	3e 81       	ldd	r19, Y+6	; 0x06
    2822:	22 30       	cpi	r18, 0x02	; 2
    2824:	31 05       	cpc	r19, r1
    2826:	2c f4       	brge	.+10     	; 0x2832 <DIO_u8SetPinValue+0x14a>
    2828:	8d 81       	ldd	r24, Y+5	; 0x05
    282a:	9e 81       	ldd	r25, Y+6	; 0x06
    282c:	00 97       	sbiw	r24, 0x00	; 0
    282e:	61 f0       	breq	.+24     	; 0x2848 <DIO_u8SetPinValue+0x160>
    2830:	5b c0       	rjmp	.+182    	; 0x28e8 <DIO_u8SetPinValue+0x200>
    2832:	2d 81       	ldd	r18, Y+5	; 0x05
    2834:	3e 81       	ldd	r19, Y+6	; 0x06
    2836:	22 30       	cpi	r18, 0x02	; 2
    2838:	31 05       	cpc	r19, r1
    283a:	71 f1       	breq	.+92     	; 0x2898 <DIO_u8SetPinValue+0x1b0>
    283c:	8d 81       	ldd	r24, Y+5	; 0x05
    283e:	9e 81       	ldd	r25, Y+6	; 0x06
    2840:	83 30       	cpi	r24, 0x03	; 3
    2842:	91 05       	cpc	r25, r1
    2844:	e9 f1       	breq	.+122    	; 0x28c0 <DIO_u8SetPinValue+0x1d8>
    2846:	50 c0       	rjmp	.+160    	; 0x28e8 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    2848:	ab e3       	ldi	r26, 0x3B	; 59
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	eb e3       	ldi	r30, 0x3B	; 59
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	48 2f       	mov	r20, r24
    2854:	8b 81       	ldd	r24, Y+3	; 0x03
    2856:	28 2f       	mov	r18, r24
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	02 2e       	mov	r0, r18
    2860:	02 c0       	rjmp	.+4      	; 0x2866 <DIO_u8SetPinValue+0x17e>
    2862:	88 0f       	add	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	0a 94       	dec	r0
    2868:	e2 f7       	brpl	.-8      	; 0x2862 <DIO_u8SetPinValue+0x17a>
    286a:	84 2b       	or	r24, r20
    286c:	8c 93       	st	X, r24
    286e:	44 c0       	rjmp	.+136    	; 0x28f8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    2870:	a8 e3       	ldi	r26, 0x38	; 56
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	e8 e3       	ldi	r30, 0x38	; 56
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	48 2f       	mov	r20, r24
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	28 2f       	mov	r18, r24
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	02 2e       	mov	r0, r18
    2888:	02 c0       	rjmp	.+4      	; 0x288e <DIO_u8SetPinValue+0x1a6>
    288a:	88 0f       	add	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	0a 94       	dec	r0
    2890:	e2 f7       	brpl	.-8      	; 0x288a <DIO_u8SetPinValue+0x1a2>
    2892:	84 2b       	or	r24, r20
    2894:	8c 93       	st	X, r24
    2896:	30 c0       	rjmp	.+96     	; 0x28f8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    2898:	a5 e3       	ldi	r26, 0x35	; 53
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	e5 e3       	ldi	r30, 0x35	; 53
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	48 2f       	mov	r20, r24
    28a4:	8b 81       	ldd	r24, Y+3	; 0x03
    28a6:	28 2f       	mov	r18, r24
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	02 2e       	mov	r0, r18
    28b0:	02 c0       	rjmp	.+4      	; 0x28b6 <DIO_u8SetPinValue+0x1ce>
    28b2:	88 0f       	add	r24, r24
    28b4:	99 1f       	adc	r25, r25
    28b6:	0a 94       	dec	r0
    28b8:	e2 f7       	brpl	.-8      	; 0x28b2 <DIO_u8SetPinValue+0x1ca>
    28ba:	84 2b       	or	r24, r20
    28bc:	8c 93       	st	X, r24
    28be:	1c c0       	rjmp	.+56     	; 0x28f8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    28c0:	a2 e3       	ldi	r26, 0x32	; 50
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	e2 e3       	ldi	r30, 0x32	; 50
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	48 2f       	mov	r20, r24
    28cc:	8b 81       	ldd	r24, Y+3	; 0x03
    28ce:	28 2f       	mov	r18, r24
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	02 2e       	mov	r0, r18
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <DIO_u8SetPinValue+0x1f6>
    28da:	88 0f       	add	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	0a 94       	dec	r0
    28e0:	e2 f7       	brpl	.-8      	; 0x28da <DIO_u8SetPinValue+0x1f2>
    28e2:	84 2b       	or	r24, r20
    28e4:	8c 93       	st	X, r24
    28e6:	08 c0       	rjmp	.+16     	; 0x28f8 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	89 83       	std	Y+1, r24	; 0x01
    28ec:	05 c0       	rjmp	.+10     	; 0x28f8 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	89 83       	std	Y+1, r24	; 0x01
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    28fa:	28 96       	adiw	r28, 0x08	; 8
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	f8 94       	cli
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	cd bf       	out	0x3d, r28	; 61
    2906:	cf 91       	pop	r28
    2908:	df 91       	pop	r29
    290a:	08 95       	ret

0000290c <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    290c:	df 93       	push	r29
    290e:	cf 93       	push	r28
    2910:	00 d0       	rcall	.+0      	; 0x2912 <DIO_u8SetPortValue+0x6>
    2912:	00 d0       	rcall	.+0      	; 0x2914 <DIO_u8SetPortValue+0x8>
    2914:	0f 92       	push	r0
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
    291a:	8a 83       	std	Y+2, r24	; 0x02
    291c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    291e:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
    2922:	28 2f       	mov	r18, r24
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	3d 83       	std	Y+5, r19	; 0x05
    2928:	2c 83       	std	Y+4, r18	; 0x04
    292a:	8c 81       	ldd	r24, Y+4	; 0x04
    292c:	9d 81       	ldd	r25, Y+5	; 0x05
    292e:	81 30       	cpi	r24, 0x01	; 1
    2930:	91 05       	cpc	r25, r1
    2932:	d1 f0       	breq	.+52     	; 0x2968 <DIO_u8SetPortValue+0x5c>
    2934:	2c 81       	ldd	r18, Y+4	; 0x04
    2936:	3d 81       	ldd	r19, Y+5	; 0x05
    2938:	22 30       	cpi	r18, 0x02	; 2
    293a:	31 05       	cpc	r19, r1
    293c:	2c f4       	brge	.+10     	; 0x2948 <DIO_u8SetPortValue+0x3c>
    293e:	8c 81       	ldd	r24, Y+4	; 0x04
    2940:	9d 81       	ldd	r25, Y+5	; 0x05
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	61 f0       	breq	.+24     	; 0x295e <DIO_u8SetPortValue+0x52>
    2946:	1f c0       	rjmp	.+62     	; 0x2986 <DIO_u8SetPortValue+0x7a>
    2948:	2c 81       	ldd	r18, Y+4	; 0x04
    294a:	3d 81       	ldd	r19, Y+5	; 0x05
    294c:	22 30       	cpi	r18, 0x02	; 2
    294e:	31 05       	cpc	r19, r1
    2950:	81 f0       	breq	.+32     	; 0x2972 <DIO_u8SetPortValue+0x66>
    2952:	8c 81       	ldd	r24, Y+4	; 0x04
    2954:	9d 81       	ldd	r25, Y+5	; 0x05
    2956:	83 30       	cpi	r24, 0x03	; 3
    2958:	91 05       	cpc	r25, r1
    295a:	81 f0       	breq	.+32     	; 0x297c <DIO_u8SetPortValue+0x70>
    295c:	14 c0       	rjmp	.+40     	; 0x2986 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    295e:	eb e3       	ldi	r30, 0x3B	; 59
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	8b 81       	ldd	r24, Y+3	; 0x03
    2964:	80 83       	st	Z, r24
    2966:	11 c0       	rjmp	.+34     	; 0x298a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    2968:	e8 e3       	ldi	r30, 0x38	; 56
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	8b 81       	ldd	r24, Y+3	; 0x03
    296e:	80 83       	st	Z, r24
    2970:	0c c0       	rjmp	.+24     	; 0x298a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    2972:	e5 e3       	ldi	r30, 0x35	; 53
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	8b 81       	ldd	r24, Y+3	; 0x03
    2978:	80 83       	st	Z, r24
    297a:	07 c0       	rjmp	.+14     	; 0x298a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    297c:	e2 e3       	ldi	r30, 0x32	; 50
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	8b 81       	ldd	r24, Y+3	; 0x03
    2982:	80 83       	st	Z, r24
    2984:	02 c0       	rjmp	.+4      	; 0x298a <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    298a:	89 81       	ldd	r24, Y+1	; 0x01
}
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <DIO_u8TogglePinValue>:

u8 DIO_u8TogglePinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <DIO_u8TogglePinValue+0x6>
    29a2:	00 d0       	rcall	.+0      	; 0x29a4 <DIO_u8TogglePinValue+0x8>
    29a4:	0f 92       	push	r0
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
    29aa:	8a 83       	std	Y+2, r24	; 0x02
    29ac:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    29ae:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    29b0:	8a 81       	ldd	r24, Y+2	; 0x02
    29b2:	28 2f       	mov	r18, r24
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	3d 83       	std	Y+5, r19	; 0x05
    29b8:	2c 83       	std	Y+4, r18	; 0x04
    29ba:	8c 81       	ldd	r24, Y+4	; 0x04
    29bc:	9d 81       	ldd	r25, Y+5	; 0x05
    29be:	81 30       	cpi	r24, 0x01	; 1
    29c0:	91 05       	cpc	r25, r1
    29c2:	49 f1       	breq	.+82     	; 0x2a16 <DIO_u8TogglePinValue+0x7a>
    29c4:	2c 81       	ldd	r18, Y+4	; 0x04
    29c6:	3d 81       	ldd	r19, Y+5	; 0x05
    29c8:	22 30       	cpi	r18, 0x02	; 2
    29ca:	31 05       	cpc	r19, r1
    29cc:	2c f4       	brge	.+10     	; 0x29d8 <DIO_u8TogglePinValue+0x3c>
    29ce:	8c 81       	ldd	r24, Y+4	; 0x04
    29d0:	9d 81       	ldd	r25, Y+5	; 0x05
    29d2:	00 97       	sbiw	r24, 0x00	; 0
    29d4:	61 f0       	breq	.+24     	; 0x29ee <DIO_u8TogglePinValue+0x52>
    29d6:	5b c0       	rjmp	.+182    	; 0x2a8e <DIO_u8TogglePinValue+0xf2>
    29d8:	2c 81       	ldd	r18, Y+4	; 0x04
    29da:	3d 81       	ldd	r19, Y+5	; 0x05
    29dc:	22 30       	cpi	r18, 0x02	; 2
    29de:	31 05       	cpc	r19, r1
    29e0:	71 f1       	breq	.+92     	; 0x2a3e <DIO_u8TogglePinValue+0xa2>
    29e2:	8c 81       	ldd	r24, Y+4	; 0x04
    29e4:	9d 81       	ldd	r25, Y+5	; 0x05
    29e6:	83 30       	cpi	r24, 0x03	; 3
    29e8:	91 05       	cpc	r25, r1
    29ea:	e9 f1       	breq	.+122    	; 0x2a66 <DIO_u8TogglePinValue+0xca>
    29ec:	50 c0       	rjmp	.+160    	; 0x2a8e <DIO_u8TogglePinValue+0xf2>
	{
	case DIO_u8PORTA: TOOGLE_BIT(PORTA,Copy_u8Pin); break;
    29ee:	ab e3       	ldi	r26, 0x3B	; 59
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	eb e3       	ldi	r30, 0x3B	; 59
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	48 2f       	mov	r20, r24
    29fa:	8b 81       	ldd	r24, Y+3	; 0x03
    29fc:	28 2f       	mov	r18, r24
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	02 2e       	mov	r0, r18
    2a06:	02 c0       	rjmp	.+4      	; 0x2a0c <DIO_u8TogglePinValue+0x70>
    2a08:	88 0f       	add	r24, r24
    2a0a:	99 1f       	adc	r25, r25
    2a0c:	0a 94       	dec	r0
    2a0e:	e2 f7       	brpl	.-8      	; 0x2a08 <DIO_u8TogglePinValue+0x6c>
    2a10:	84 27       	eor	r24, r20
    2a12:	8c 93       	st	X, r24
    2a14:	3e c0       	rjmp	.+124    	; 0x2a92 <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTB: TOOGLE_BIT(PORTB,Copy_u8Pin); break;
    2a16:	a8 e3       	ldi	r26, 0x38	; 56
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	e8 e3       	ldi	r30, 0x38	; 56
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	48 2f       	mov	r20, r24
    2a22:	8b 81       	ldd	r24, Y+3	; 0x03
    2a24:	28 2f       	mov	r18, r24
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	02 2e       	mov	r0, r18
    2a2e:	02 c0       	rjmp	.+4      	; 0x2a34 <DIO_u8TogglePinValue+0x98>
    2a30:	88 0f       	add	r24, r24
    2a32:	99 1f       	adc	r25, r25
    2a34:	0a 94       	dec	r0
    2a36:	e2 f7       	brpl	.-8      	; 0x2a30 <DIO_u8TogglePinValue+0x94>
    2a38:	84 27       	eor	r24, r20
    2a3a:	8c 93       	st	X, r24
    2a3c:	2a c0       	rjmp	.+84     	; 0x2a92 <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTC: TOOGLE_BIT(PORTC,Copy_u8Pin); break;
    2a3e:	a5 e3       	ldi	r26, 0x35	; 53
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	e5 e3       	ldi	r30, 0x35	; 53
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	48 2f       	mov	r20, r24
    2a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4c:	28 2f       	mov	r18, r24
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	02 2e       	mov	r0, r18
    2a56:	02 c0       	rjmp	.+4      	; 0x2a5c <DIO_u8TogglePinValue+0xc0>
    2a58:	88 0f       	add	r24, r24
    2a5a:	99 1f       	adc	r25, r25
    2a5c:	0a 94       	dec	r0
    2a5e:	e2 f7       	brpl	.-8      	; 0x2a58 <DIO_u8TogglePinValue+0xbc>
    2a60:	84 27       	eor	r24, r20
    2a62:	8c 93       	st	X, r24
    2a64:	16 c0       	rjmp	.+44     	; 0x2a92 <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTD: TOOGLE_BIT(PORTD,Copy_u8Pin); break;
    2a66:	a2 e3       	ldi	r26, 0x32	; 50
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	e2 e3       	ldi	r30, 0x32	; 50
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	48 2f       	mov	r20, r24
    2a72:	8b 81       	ldd	r24, Y+3	; 0x03
    2a74:	28 2f       	mov	r18, r24
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	02 2e       	mov	r0, r18
    2a7e:	02 c0       	rjmp	.+4      	; 0x2a84 <DIO_u8TogglePinValue+0xe8>
    2a80:	88 0f       	add	r24, r24
    2a82:	99 1f       	adc	r25, r25
    2a84:	0a 94       	dec	r0
    2a86:	e2 f7       	brpl	.-8      	; 0x2a80 <DIO_u8TogglePinValue+0xe4>
    2a88:	84 27       	eor	r24, r20
    2a8a:	8c 93       	st	X, r24
    2a8c:	02 c0       	rjmp	.+4      	; 0x2a92 <DIO_u8TogglePinValue+0xf6>
	default: Local_u8ErrorState=1;
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	cf 91       	pop	r28
    2aa0:	df 91       	pop	r29
    2aa2:	08 95       	ret

00002aa4 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
    2aac:	27 97       	sbiw	r28, 0x07	; 7
    2aae:	0f b6       	in	r0, 0x3f	; 63
    2ab0:	f8 94       	cli
    2ab2:	de bf       	out	0x3e, r29	; 62
    2ab4:	0f be       	out	0x3f, r0	; 63
    2ab6:	cd bf       	out	0x3d, r28	; 61
    2ab8:	8a 83       	std	Y+2, r24	; 0x02
    2aba:	6b 83       	std	Y+3, r22	; 0x03
    2abc:	5d 83       	std	Y+5, r21	; 0x05
    2abe:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2ac0:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<= DIO_u8PIN7))
    2ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ac6:	00 97       	sbiw	r24, 0x00	; 0
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <DIO_u8GetPinValue+0x28>
    2aca:	78 c0       	rjmp	.+240    	; 0x2bbc <DIO_u8GetPinValue+0x118>
    2acc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ace:	88 30       	cpi	r24, 0x08	; 8
    2ad0:	08 f0       	brcs	.+2      	; 0x2ad4 <DIO_u8GetPinValue+0x30>
    2ad2:	74 c0       	rjmp	.+232    	; 0x2bbc <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    2ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad6:	28 2f       	mov	r18, r24
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	3f 83       	std	Y+7, r19	; 0x07
    2adc:	2e 83       	std	Y+6, r18	; 0x06
    2ade:	4e 81       	ldd	r20, Y+6	; 0x06
    2ae0:	5f 81       	ldd	r21, Y+7	; 0x07
    2ae2:	41 30       	cpi	r20, 0x01	; 1
    2ae4:	51 05       	cpc	r21, r1
    2ae6:	59 f1       	breq	.+86     	; 0x2b3e <DIO_u8GetPinValue+0x9a>
    2ae8:	8e 81       	ldd	r24, Y+6	; 0x06
    2aea:	9f 81       	ldd	r25, Y+7	; 0x07
    2aec:	82 30       	cpi	r24, 0x02	; 2
    2aee:	91 05       	cpc	r25, r1
    2af0:	34 f4       	brge	.+12     	; 0x2afe <DIO_u8GetPinValue+0x5a>
    2af2:	2e 81       	ldd	r18, Y+6	; 0x06
    2af4:	3f 81       	ldd	r19, Y+7	; 0x07
    2af6:	21 15       	cp	r18, r1
    2af8:	31 05       	cpc	r19, r1
    2afa:	69 f0       	breq	.+26     	; 0x2b16 <DIO_u8GetPinValue+0x72>
    2afc:	5c c0       	rjmp	.+184    	; 0x2bb6 <DIO_u8GetPinValue+0x112>
    2afe:	4e 81       	ldd	r20, Y+6	; 0x06
    2b00:	5f 81       	ldd	r21, Y+7	; 0x07
    2b02:	42 30       	cpi	r20, 0x02	; 2
    2b04:	51 05       	cpc	r21, r1
    2b06:	79 f1       	breq	.+94     	; 0x2b66 <DIO_u8GetPinValue+0xc2>
    2b08:	8e 81       	ldd	r24, Y+6	; 0x06
    2b0a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b0c:	83 30       	cpi	r24, 0x03	; 3
    2b0e:	91 05       	cpc	r25, r1
    2b10:	09 f4       	brne	.+2      	; 0x2b14 <DIO_u8GetPinValue+0x70>
    2b12:	3d c0       	rjmp	.+122    	; 0x2b8e <DIO_u8GetPinValue+0xea>
    2b14:	50 c0       	rjmp	.+160    	; 0x2bb6 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA : *Copy_pu8Value= GET_BIT(PINA , Copy_u8Pin); break;
    2b16:	e9 e3       	ldi	r30, 0x39	; 57
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	80 81       	ld	r24, Z
    2b1c:	28 2f       	mov	r18, r24
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	8b 81       	ldd	r24, Y+3	; 0x03
    2b22:	88 2f       	mov	r24, r24
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	a9 01       	movw	r20, r18
    2b28:	02 c0       	rjmp	.+4      	; 0x2b2e <DIO_u8GetPinValue+0x8a>
    2b2a:	55 95       	asr	r21
    2b2c:	47 95       	ror	r20
    2b2e:	8a 95       	dec	r24
    2b30:	e2 f7       	brpl	.-8      	; 0x2b2a <DIO_u8GetPinValue+0x86>
    2b32:	ca 01       	movw	r24, r20
    2b34:	81 70       	andi	r24, 0x01	; 1
    2b36:	ec 81       	ldd	r30, Y+4	; 0x04
    2b38:	fd 81       	ldd	r31, Y+5	; 0x05
    2b3a:	80 83       	st	Z, r24
    2b3c:	41 c0       	rjmp	.+130    	; 0x2bc0 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB : *Copy_pu8Value= GET_BIT(PINB , Copy_u8Pin); break;
    2b3e:	e6 e3       	ldi	r30, 0x36	; 54
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	80 81       	ld	r24, Z
    2b44:	28 2f       	mov	r18, r24
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	88 2f       	mov	r24, r24
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	a9 01       	movw	r20, r18
    2b50:	02 c0       	rjmp	.+4      	; 0x2b56 <DIO_u8GetPinValue+0xb2>
    2b52:	55 95       	asr	r21
    2b54:	47 95       	ror	r20
    2b56:	8a 95       	dec	r24
    2b58:	e2 f7       	brpl	.-8      	; 0x2b52 <DIO_u8GetPinValue+0xae>
    2b5a:	ca 01       	movw	r24, r20
    2b5c:	81 70       	andi	r24, 0x01	; 1
    2b5e:	ec 81       	ldd	r30, Y+4	; 0x04
    2b60:	fd 81       	ldd	r31, Y+5	; 0x05
    2b62:	80 83       	st	Z, r24
    2b64:	2d c0       	rjmp	.+90     	; 0x2bc0 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC : *Copy_pu8Value= GET_BIT(PINC , Copy_u8Pin); break;
    2b66:	e3 e3       	ldi	r30, 0x33	; 51
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	80 81       	ld	r24, Z
    2b6c:	28 2f       	mov	r18, r24
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	8b 81       	ldd	r24, Y+3	; 0x03
    2b72:	88 2f       	mov	r24, r24
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	a9 01       	movw	r20, r18
    2b78:	02 c0       	rjmp	.+4      	; 0x2b7e <DIO_u8GetPinValue+0xda>
    2b7a:	55 95       	asr	r21
    2b7c:	47 95       	ror	r20
    2b7e:	8a 95       	dec	r24
    2b80:	e2 f7       	brpl	.-8      	; 0x2b7a <DIO_u8GetPinValue+0xd6>
    2b82:	ca 01       	movw	r24, r20
    2b84:	81 70       	andi	r24, 0x01	; 1
    2b86:	ec 81       	ldd	r30, Y+4	; 0x04
    2b88:	fd 81       	ldd	r31, Y+5	; 0x05
    2b8a:	80 83       	st	Z, r24
    2b8c:	19 c0       	rjmp	.+50     	; 0x2bc0 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD : *Copy_pu8Value= GET_BIT(PIND , Copy_u8Pin); break;
    2b8e:	e0 e3       	ldi	r30, 0x30	; 48
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	28 2f       	mov	r18, r24
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9a:	88 2f       	mov	r24, r24
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	a9 01       	movw	r20, r18
    2ba0:	02 c0       	rjmp	.+4      	; 0x2ba6 <DIO_u8GetPinValue+0x102>
    2ba2:	55 95       	asr	r21
    2ba4:	47 95       	ror	r20
    2ba6:	8a 95       	dec	r24
    2ba8:	e2 f7       	brpl	.-8      	; 0x2ba2 <DIO_u8GetPinValue+0xfe>
    2baa:	ca 01       	movw	r24, r20
    2bac:	81 70       	andi	r24, 0x01	; 1
    2bae:	ec 81       	ldd	r30, Y+4	; 0x04
    2bb0:	fd 81       	ldd	r31, Y+5	; 0x05
    2bb2:	80 83       	st	Z, r24
    2bb4:	05 c0       	rjmp	.+10     	; 0x2bc0 <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=1;
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	89 83       	std	Y+1, r24	; 0x01
    2bba:	02 c0       	rjmp	.+4      	; 0x2bc0 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bc2:	27 96       	adiw	r28, 0x07	; 7
    2bc4:	0f b6       	in	r0, 0x3f	; 63
    2bc6:	f8 94       	cli
    2bc8:	de bf       	out	0x3e, r29	; 62
    2bca:	0f be       	out	0x3f, r0	; 63
    2bcc:	cd bf       	out	0x3d, r28	; 61
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	08 95       	ret

00002bd4 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port , u8* Copy_pu8Value)
{
    2bd4:	df 93       	push	r29
    2bd6:	cf 93       	push	r28
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	27 97       	sbiw	r28, 0x07	; 7
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	de bf       	out	0x3e, r29	; 62
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	cd bf       	out	0x3d, r28	; 61
    2be8:	8b 83       	std	Y+3, r24	; 0x03
    2bea:	7d 83       	std	Y+5, r23	; 0x05
    2bec:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = 0;
    2bee:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter;
	if(Copy_pu8Value != NULL)
    2bf0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf2:	9d 81       	ldd	r25, Y+5	; 0x05
    2bf4:	00 97       	sbiw	r24, 0x00	; 0
    2bf6:	09 f4       	brne	.+2      	; 0x2bfa <DIO_u8GetPortValue+0x26>
    2bf8:	3e c0       	rjmp	.+124    	; 0x2c76 <DIO_u8GetPortValue+0xa2>
	{
		switch(Copy_u8Port)
    2bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfc:	28 2f       	mov	r18, r24
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	3f 83       	std	Y+7, r19	; 0x07
    2c02:	2e 83       	std	Y+6, r18	; 0x06
    2c04:	8e 81       	ldd	r24, Y+6	; 0x06
    2c06:	9f 81       	ldd	r25, Y+7	; 0x07
    2c08:	81 30       	cpi	r24, 0x01	; 1
    2c0a:	91 05       	cpc	r25, r1
    2c0c:	e1 f0       	breq	.+56     	; 0x2c46 <DIO_u8GetPortValue+0x72>
    2c0e:	2e 81       	ldd	r18, Y+6	; 0x06
    2c10:	3f 81       	ldd	r19, Y+7	; 0x07
    2c12:	22 30       	cpi	r18, 0x02	; 2
    2c14:	31 05       	cpc	r19, r1
    2c16:	2c f4       	brge	.+10     	; 0x2c22 <DIO_u8GetPortValue+0x4e>
    2c18:	8e 81       	ldd	r24, Y+6	; 0x06
    2c1a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c1c:	00 97       	sbiw	r24, 0x00	; 0
    2c1e:	61 f0       	breq	.+24     	; 0x2c38 <DIO_u8GetPortValue+0x64>
    2c20:	27 c0       	rjmp	.+78     	; 0x2c70 <DIO_u8GetPortValue+0x9c>
    2c22:	2e 81       	ldd	r18, Y+6	; 0x06
    2c24:	3f 81       	ldd	r19, Y+7	; 0x07
    2c26:	22 30       	cpi	r18, 0x02	; 2
    2c28:	31 05       	cpc	r19, r1
    2c2a:	a1 f0       	breq	.+40     	; 0x2c54 <DIO_u8GetPortValue+0x80>
    2c2c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c2e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c30:	83 30       	cpi	r24, 0x03	; 3
    2c32:	91 05       	cpc	r25, r1
    2c34:	b1 f0       	breq	.+44     	; 0x2c62 <DIO_u8GetPortValue+0x8e>
    2c36:	1c c0       	rjmp	.+56     	; 0x2c70 <DIO_u8GetPortValue+0x9c>
		{
		case DIO_u8PORTA: *Copy_pu8Value = PINA; break;
    2c38:	e9 e3       	ldi	r30, 0x39	; 57
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	ec 81       	ldd	r30, Y+4	; 0x04
    2c40:	fd 81       	ldd	r31, Y+5	; 0x05
    2c42:	80 83       	st	Z, r24
    2c44:	1a c0       	rjmp	.+52     	; 0x2c7a <DIO_u8GetPortValue+0xa6>
		case DIO_u8PORTB: *Copy_pu8Value = PINB; break;
    2c46:	e6 e3       	ldi	r30, 0x36	; 54
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	ec 81       	ldd	r30, Y+4	; 0x04
    2c4e:	fd 81       	ldd	r31, Y+5	; 0x05
    2c50:	80 83       	st	Z, r24
    2c52:	13 c0       	rjmp	.+38     	; 0x2c7a <DIO_u8GetPortValue+0xa6>
		case DIO_u8PORTC: *Copy_pu8Value = PINC; break;
    2c54:	e3 e3       	ldi	r30, 0x33	; 51
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	ec 81       	ldd	r30, Y+4	; 0x04
    2c5c:	fd 81       	ldd	r31, Y+5	; 0x05
    2c5e:	80 83       	st	Z, r24
    2c60:	0c c0       	rjmp	.+24     	; 0x2c7a <DIO_u8GetPortValue+0xa6>
		case DIO_u8PORTD: *Copy_pu8Value = PIND; break;
    2c62:	e0 e3       	ldi	r30, 0x30	; 48
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 81       	ld	r24, Z
    2c68:	ec 81       	ldd	r30, Y+4	; 0x04
    2c6a:	fd 81       	ldd	r31, Y+5	; 0x05
    2c6c:	80 83       	st	Z, r24
    2c6e:	05 c0       	rjmp	.+10     	; 0x2c7a <DIO_u8GetPortValue+0xa6>
		default: Local_u8ErrorState = 1; break;
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	8a 83       	std	Y+2, r24	; 0x02
    2c74:	02 c0       	rjmp	.+4      	; 0x2c7a <DIO_u8GetPortValue+0xa6>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    2c7a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2c7c:	27 96       	adiw	r28, 0x07	; 7
    2c7e:	0f b6       	in	r0, 0x3f	; 63
    2c80:	f8 94       	cli
    2c82:	de bf       	out	0x3e, r29	; 62
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	cd bf       	out	0x3d, r28	; 61
    2c88:	cf 91       	pop	r28
    2c8a:	df 91       	pop	r29
    2c8c:	08 95       	ret

00002c8e <EEPROM_enuWriteData>:
#include "EEPROM_config.h"
#include "EEPROM_private.h"
#include "EEPROM_interface.h"

EEPROM_tenuErrorStatus EEPROM_enuWriteData(u16 Copy_u16Address , u8 Copy_u8Data)
{
    2c8e:	df 93       	push	r29
    2c90:	cf 93       	push	r28
    2c92:	00 d0       	rcall	.+0      	; 0x2c94 <EEPROM_enuWriteData+0x6>
    2c94:	00 d0       	rcall	.+0      	; 0x2c96 <EEPROM_enuWriteData+0x8>
    2c96:	cd b7       	in	r28, 0x3d	; 61
    2c98:	de b7       	in	r29, 0x3e	; 62
    2c9a:	9b 83       	std	Y+3, r25	; 0x03
    2c9c:	8a 83       	std	Y+2, r24	; 0x02
    2c9e:	6c 83       	std	Y+4, r22	; 0x04
	EEPROM_tenuErrorStatus Local_enuErrorStatus = EEPROM_OK;
    2ca0:	19 82       	std	Y+1, r1	; 0x01
	}
	else
	{

		// Set up Address Register
		EEARL = Copy_u16Address;
    2ca2:	ee e3       	ldi	r30, 0x3E	; 62
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca8:	9b 81       	ldd	r25, Y+3	; 0x03
    2caa:	91 83       	std	Z+1, r25	; 0x01
    2cac:	80 83       	st	Z, r24

		// Set Up Data Register
		EEDR = Copy_u8Data ;
    2cae:	ed e3       	ldi	r30, 0x3D	; 61
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb4:	80 83       	st	Z, r24

		// Write one to the EEMWE
		EECR |= (1<<2);
    2cb6:	ac e3       	ldi	r26, 0x3C	; 60
    2cb8:	b0 e0       	ldi	r27, 0x00	; 0
    2cba:	ec e3       	ldi	r30, 0x3C	; 60
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	80 81       	ld	r24, Z
    2cc0:	84 60       	ori	r24, 0x04	; 4
    2cc2:	8c 93       	st	X, r24

		// Start EEPROM Write by Setting EEWE to 1
		EECR |= (1<<1);
    2cc4:	ac e3       	ldi	r26, 0x3C	; 60
    2cc6:	b0 e0       	ldi	r27, 0x00	; 0
    2cc8:	ec e3       	ldi	r30, 0x3C	; 60
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	80 81       	ld	r24, Z
    2cce:	82 60       	ori	r24, 0x02	; 2
    2cd0:	8c 93       	st	X, r24

		// Polling on the flag (wait for the write operation to be completed )
		while((EECR >> 1 & 1) == 1);
    2cd2:	ec e3       	ldi	r30, 0x3C	; 60
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	80 81       	ld	r24, Z
    2cd8:	86 95       	lsr	r24
    2cda:	88 2f       	mov	r24, r24
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	81 70       	andi	r24, 0x01	; 1
    2ce0:	90 70       	andi	r25, 0x00	; 0
    2ce2:	88 23       	and	r24, r24
    2ce4:	b1 f7       	brne	.-20     	; 0x2cd2 <EEPROM_enuWriteData+0x44>
	}
	return Local_enuErrorStatus;
    2ce6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ce8:	0f 90       	pop	r0
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	cf 91       	pop	r28
    2cf2:	df 91       	pop	r29
    2cf4:	08 95       	ret

00002cf6 <EEPROM_u8ReadeData>:

u8 EEPROM_u8ReadeData(u16 Copy_u16Address)
{
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	00 d0       	rcall	.+0      	; 0x2cfc <EEPROM_u8ReadeData+0x6>
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
    2d00:	9a 83       	std	Y+2, r25	; 0x02
    2d02:	89 83       	std	Y+1, r24	; 0x01

	// Set up Address Register
	EEARL = Copy_u16Address;
    2d04:	ee e3       	ldi	r30, 0x3E	; 62
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0c:	91 83       	std	Z+1, r25	; 0x01
    2d0e:	80 83       	st	Z, r24

	// Start EEPROM Read by Setting EERE to 1
	EECR |= (1<<0);
    2d10:	ac e3       	ldi	r26, 0x3C	; 60
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	ec e3       	ldi	r30, 0x3C	; 60
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	81 60       	ori	r24, 0x01	; 1
    2d1c:	8c 93       	st	X, r24

	// Reading Operation takes only one cycle so it's not neccessry to polling on the flag
	return EEDR;
    2d1e:	ed e3       	ldi	r30, 0x3D	; 61
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z

}
    2d24:	0f 90       	pop	r0
    2d26:	0f 90       	pop	r0
    2d28:	cf 91       	pop	r28
    2d2a:	df 91       	pop	r29
    2d2c:	08 95       	ret

00002d2e <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    2d2e:	df 93       	push	r29
    2d30:	cf 93       	push	r28
    2d32:	cd b7       	in	r28, 0x3d	; 61
    2d34:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    2d36:	af e5       	ldi	r26, 0x5F	; 95
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	ef e5       	ldi	r30, 0x5F	; 95
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	80 81       	ld	r24, Z
    2d40:	80 68       	ori	r24, 0x80	; 128
    2d42:	8c 93       	st	X, r24
}
    2d44:	cf 91       	pop	r28
    2d46:	df 91       	pop	r29
    2d48:	08 95       	ret

00002d4a <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    2d4a:	df 93       	push	r29
    2d4c:	cf 93       	push	r28
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    2d52:	af e5       	ldi	r26, 0x5F	; 95
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	ef e5       	ldi	r30, 0x5F	; 95
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	8f 77       	andi	r24, 0x7F	; 127
    2d5e:	8c 93       	st	X, r24
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	08 95       	ret

00002d66 <KPD_voidInit>:
static u8 Keypad_4x4_adjustKeyNumber (u8 button_number);

#endif

void KPD_voidInit(void)
{
    2d66:	df 93       	push	r29
    2d68:	cf 93       	push	r28
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
	// Setting Column pins to output
	DIO_u8SetPinDirection(KPD_PORT,KPD_COLUMN0_PIN,DIO_u8PIN_OUTPUT);
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	60 e0       	ldi	r22, 0x00	; 0
    2d72:	41 e0       	ldi	r20, 0x01	; 1
    2d74:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COLUMN1_PIN,DIO_u8PIN_OUTPUT);
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	61 e0       	ldi	r22, 0x01	; 1
    2d7c:	41 e0       	ldi	r20, 0x01	; 1
    2d7e:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COLUMN2_PIN,DIO_u8PIN_OUTPUT);
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	62 e0       	ldi	r22, 0x02	; 2
    2d86:	41 e0       	ldi	r20, 0x01	; 1
    2d88:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COLUMN3_PIN,DIO_u8PIN_OUTPUT);
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	63 e0       	ldi	r22, 0x03	; 3
    2d90:	41 e0       	ldi	r20, 0x01	; 1
    2d92:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KPD_PORT,KPD_COLUMN0_PIN,DIO_u8PIN_HIGH);
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	60 e0       	ldi	r22, 0x00	; 0
    2d9a:	41 e0       	ldi	r20, 0x01	; 1
    2d9c:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COLUMN1_PIN,DIO_u8PIN_HIGH);
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	61 e0       	ldi	r22, 0x01	; 1
    2da4:	41 e0       	ldi	r20, 0x01	; 1
    2da6:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COLUMN2_PIN,DIO_u8PIN_HIGH);
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	62 e0       	ldi	r22, 0x02	; 2
    2dae:	41 e0       	ldi	r20, 0x01	; 1
    2db0:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COLUMN3_PIN,DIO_u8PIN_HIGH);
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	63 e0       	ldi	r22, 0x03	; 3
    2db8:	41 e0       	ldi	r20, 0x01	; 1
    2dba:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>

	// Setting Row pins to input or input with pullup enabled
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW0_PIN,DIO_u8PIN_INPULLUP);
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	64 e0       	ldi	r22, 0x04	; 4
    2dc2:	42 e0       	ldi	r20, 0x02	; 2
    2dc4:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW1_PIN,DIO_u8PIN_INPULLUP);
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	65 e0       	ldi	r22, 0x05	; 5
    2dcc:	42 e0       	ldi	r20, 0x02	; 2
    2dce:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW2_PIN,DIO_u8PIN_INPULLUP);
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	66 e0       	ldi	r22, 0x06	; 6
    2dd6:	42 e0       	ldi	r20, 0x02	; 2
    2dd8:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW3_PIN,DIO_u8PIN_INPULLUP);
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	67 e0       	ldi	r22, 0x07	; 7
    2de0:	42 e0       	ldi	r20, 0x02	; 2
    2de2:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
}
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <KPD_u8GetPressedKey>:



u8 KPD_u8GetPressedKey(void)
{
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	00 d0       	rcall	.+0      	; 0x2df2 <KPD_u8GetPressedKey+0x6>
    2df2:	cd b7       	in	r28, 0x3d	; 61
    2df4:	de b7       	in	r29, 0x3e	; 62
	u8 row, col;
	while(1)
	{
		for (col = 0; col < N_COL; col++)
    2df6:	19 82       	std	Y+1, r1	; 0x01
    2df8:	4c c0       	rjmp	.+152    	; 0x2e92 <KPD_u8GetPressedKey+0xa6>
		{
			KEYPAD_PORT_DIR = (0b00010000<< col);
    2dfa:	ea e3       	ldi	r30, 0x3A	; 58
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
    2e00:	28 2f       	mov	r18, r24
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	80 e1       	ldi	r24, 0x10	; 16
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	02 c0       	rjmp	.+4      	; 0x2e0e <KPD_u8GetPressedKey+0x22>
    2e0a:	88 0f       	add	r24, r24
    2e0c:	99 1f       	adc	r25, r25
    2e0e:	2a 95       	dec	r18
    2e10:	e2 f7       	brpl	.-8      	; 0x2e0a <KPD_u8GetPressedKey+0x1e>
    2e12:	80 83       	st	Z, r24

			KEYPAD_PORT_OUT = (~(0b00010000<< col));
    2e14:	eb e3       	ldi	r30, 0x3B	; 59
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	89 81       	ldd	r24, Y+1	; 0x01
    2e1a:	28 2f       	mov	r18, r24
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	80 e1       	ldi	r24, 0x10	; 16
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	02 2e       	mov	r0, r18
    2e24:	02 c0       	rjmp	.+4      	; 0x2e2a <KPD_u8GetPressedKey+0x3e>
    2e26:	88 0f       	add	r24, r24
    2e28:	99 1f       	adc	r25, r25
    2e2a:	0a 94       	dec	r0
    2e2c:	e2 f7       	brpl	.-8      	; 0x2e26 <KPD_u8GetPressedKey+0x3a>
    2e2e:	80 95       	com	r24
    2e30:	80 83       	st	Z, r24
			for (row = 0; row < N_ROW; row++)
    2e32:	1a 82       	std	Y+2, r1	; 0x02
    2e34:	28 c0       	rjmp	.+80     	; 0x2e86 <KPD_u8GetPressedKey+0x9a>
			{
				if (BIT_IS_CLEAR(KEYPAD_PORT_IN,row))
    2e36:	e9 e3       	ldi	r30, 0x39	; 57
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	80 81       	ld	r24, Z
    2e3c:	28 2f       	mov	r18, r24
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	8a 81       	ldd	r24, Y+2	; 0x02
    2e42:	88 2f       	mov	r24, r24
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	a9 01       	movw	r20, r18
    2e48:	02 c0       	rjmp	.+4      	; 0x2e4e <KPD_u8GetPressedKey+0x62>
    2e4a:	55 95       	asr	r21
    2e4c:	47 95       	ror	r20
    2e4e:	8a 95       	dec	r24
    2e50:	e2 f7       	brpl	.-8      	; 0x2e4a <KPD_u8GetPressedKey+0x5e>
    2e52:	ca 01       	movw	r24, r20
    2e54:	81 70       	andi	r24, 0x01	; 1
    2e56:	90 70       	andi	r25, 0x00	; 0
    2e58:	00 97       	sbiw	r24, 0x00	; 0
    2e5a:	91 f4       	brne	.+36     	; 0x2e80 <KPD_u8GetPressedKey+0x94>
#if (N_COL == 3)

					return Keypad_4x3_adjustKeyNumber (((row*N_COL)+col+1));
#elif (N_COL == 4)

					return Keypad_4x4_adjustKeyNumber (((row*N_COL)+col+1));
    2e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5e:	88 2f       	mov	r24, r24
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	88 0f       	add	r24, r24
    2e64:	99 1f       	adc	r25, r25
    2e66:	88 0f       	add	r24, r24
    2e68:	99 1f       	adc	r25, r25
    2e6a:	98 2f       	mov	r25, r24
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	89 0f       	add	r24, r25
    2e70:	8f 5f       	subi	r24, 0xFF	; 255
    2e72:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <Keypad_4x4_adjustKeyNumber>
#endif
				}
			}
		}
	}
}
    2e76:	0f 90       	pop	r0
    2e78:	0f 90       	pop	r0
    2e7a:	cf 91       	pop	r28
    2e7c:	df 91       	pop	r29
    2e7e:	08 95       	ret
		for (col = 0; col < N_COL; col++)
		{
			KEYPAD_PORT_DIR = (0b00010000<< col);

			KEYPAD_PORT_OUT = (~(0b00010000<< col));
			for (row = 0; row < N_ROW; row++)
    2e80:	8a 81       	ldd	r24, Y+2	; 0x02
    2e82:	8f 5f       	subi	r24, 0xFF	; 255
    2e84:	8a 83       	std	Y+2, r24	; 0x02
    2e86:	8a 81       	ldd	r24, Y+2	; 0x02
    2e88:	84 30       	cpi	r24, 0x04	; 4
    2e8a:	a8 f2       	brcs	.-86     	; 0x2e36 <KPD_u8GetPressedKey+0x4a>
u8 KPD_u8GetPressedKey(void)
{
	u8 row, col;
	while(1)
	{
		for (col = 0; col < N_COL; col++)
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	8f 5f       	subi	r24, 0xFF	; 255
    2e90:	89 83       	std	Y+1, r24	; 0x01
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	84 30       	cpi	r24, 0x04	; 4
    2e96:	08 f4       	brcc	.+2      	; 0x2e9a <KPD_u8GetPressedKey+0xae>
    2e98:	b0 cf       	rjmp	.-160    	; 0x2dfa <KPD_u8GetPressedKey+0xe>
    2e9a:	ad cf       	rjmp	.-166    	; 0x2df6 <KPD_u8GetPressedKey+0xa>

00002e9c <Keypad_4x4_adjustKeyNumber>:


#elif (N_COL == 4)

 static u8 Keypad_4x4_adjustKeyNumber (u8 button_number)
{
    2e9c:	df 93       	push	r29
    2e9e:	cf 93       	push	r28
    2ea0:	00 d0       	rcall	.+0      	; 0x2ea2 <Keypad_4x4_adjustKeyNumber+0x6>
    2ea2:	00 d0       	rcall	.+0      	; 0x2ea4 <Keypad_4x4_adjustKeyNumber+0x8>
    2ea4:	0f 92       	push	r0
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
    2eaa:	89 83       	std	Y+1, r24	; 0x01
	switch (button_number)
    2eac:	89 81       	ldd	r24, Y+1	; 0x01
    2eae:	28 2f       	mov	r18, r24
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	3c 83       	std	Y+4, r19	; 0x04
    2eb4:	2b 83       	std	Y+3, r18	; 0x03
    2eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eba:	88 30       	cpi	r24, 0x08	; 8
    2ebc:	91 05       	cpc	r25, r1
    2ebe:	09 f4       	brne	.+2      	; 0x2ec2 <Keypad_4x4_adjustKeyNumber+0x26>
    2ec0:	70 c0       	rjmp	.+224    	; 0x2fa2 <Keypad_4x4_adjustKeyNumber+0x106>
    2ec2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ec4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ec6:	29 30       	cpi	r18, 0x09	; 9
    2ec8:	31 05       	cpc	r19, r1
    2eca:	5c f5       	brge	.+86     	; 0x2f22 <Keypad_4x4_adjustKeyNumber+0x86>
    2ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ece:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed0:	84 30       	cpi	r24, 0x04	; 4
    2ed2:	91 05       	cpc	r25, r1
    2ed4:	09 f4       	brne	.+2      	; 0x2ed8 <Keypad_4x4_adjustKeyNumber+0x3c>
    2ed6:	59 c0       	rjmp	.+178    	; 0x2f8a <Keypad_4x4_adjustKeyNumber+0xee>
    2ed8:	2b 81       	ldd	r18, Y+3	; 0x03
    2eda:	3c 81       	ldd	r19, Y+4	; 0x04
    2edc:	25 30       	cpi	r18, 0x05	; 5
    2ede:	31 05       	cpc	r19, r1
    2ee0:	9c f4       	brge	.+38     	; 0x2f08 <Keypad_4x4_adjustKeyNumber+0x6c>
    2ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee6:	82 30       	cpi	r24, 0x02	; 2
    2ee8:	91 05       	cpc	r25, r1
    2eea:	09 f4       	brne	.+2      	; 0x2eee <Keypad_4x4_adjustKeyNumber+0x52>
    2eec:	48 c0       	rjmp	.+144    	; 0x2f7e <Keypad_4x4_adjustKeyNumber+0xe2>
    2eee:	2b 81       	ldd	r18, Y+3	; 0x03
    2ef0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ef2:	23 30       	cpi	r18, 0x03	; 3
    2ef4:	31 05       	cpc	r19, r1
    2ef6:	0c f0       	brlt	.+2      	; 0x2efa <Keypad_4x4_adjustKeyNumber+0x5e>
    2ef8:	45 c0       	rjmp	.+138    	; 0x2f84 <Keypad_4x4_adjustKeyNumber+0xe8>
    2efa:	8b 81       	ldd	r24, Y+3	; 0x03
    2efc:	9c 81       	ldd	r25, Y+4	; 0x04
    2efe:	81 30       	cpi	r24, 0x01	; 1
    2f00:	91 05       	cpc	r25, r1
    2f02:	09 f4       	brne	.+2      	; 0x2f06 <Keypad_4x4_adjustKeyNumber+0x6a>
    2f04:	39 c0       	rjmp	.+114    	; 0x2f78 <Keypad_4x4_adjustKeyNumber+0xdc>
    2f06:	68 c0       	rjmp	.+208    	; 0x2fd8 <Keypad_4x4_adjustKeyNumber+0x13c>
    2f08:	2b 81       	ldd	r18, Y+3	; 0x03
    2f0a:	3c 81       	ldd	r19, Y+4	; 0x04
    2f0c:	26 30       	cpi	r18, 0x06	; 6
    2f0e:	31 05       	cpc	r19, r1
    2f10:	09 f4       	brne	.+2      	; 0x2f14 <Keypad_4x4_adjustKeyNumber+0x78>
    2f12:	41 c0       	rjmp	.+130    	; 0x2f96 <Keypad_4x4_adjustKeyNumber+0xfa>
    2f14:	8b 81       	ldd	r24, Y+3	; 0x03
    2f16:	9c 81       	ldd	r25, Y+4	; 0x04
    2f18:	87 30       	cpi	r24, 0x07	; 7
    2f1a:	91 05       	cpc	r25, r1
    2f1c:	0c f0       	brlt	.+2      	; 0x2f20 <Keypad_4x4_adjustKeyNumber+0x84>
    2f1e:	3e c0       	rjmp	.+124    	; 0x2f9c <Keypad_4x4_adjustKeyNumber+0x100>
    2f20:	37 c0       	rjmp	.+110    	; 0x2f90 <Keypad_4x4_adjustKeyNumber+0xf4>
    2f22:	2b 81       	ldd	r18, Y+3	; 0x03
    2f24:	3c 81       	ldd	r19, Y+4	; 0x04
    2f26:	2c 30       	cpi	r18, 0x0C	; 12
    2f28:	31 05       	cpc	r19, r1
    2f2a:	09 f4       	brne	.+2      	; 0x2f2e <Keypad_4x4_adjustKeyNumber+0x92>
    2f2c:	46 c0       	rjmp	.+140    	; 0x2fba <Keypad_4x4_adjustKeyNumber+0x11e>
    2f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f30:	9c 81       	ldd	r25, Y+4	; 0x04
    2f32:	8d 30       	cpi	r24, 0x0D	; 13
    2f34:	91 05       	cpc	r25, r1
    2f36:	5c f4       	brge	.+22     	; 0x2f4e <Keypad_4x4_adjustKeyNumber+0xb2>
    2f38:	2b 81       	ldd	r18, Y+3	; 0x03
    2f3a:	3c 81       	ldd	r19, Y+4	; 0x04
    2f3c:	2a 30       	cpi	r18, 0x0A	; 10
    2f3e:	31 05       	cpc	r19, r1
    2f40:	b1 f1       	breq	.+108    	; 0x2fae <Keypad_4x4_adjustKeyNumber+0x112>
    2f42:	8b 81       	ldd	r24, Y+3	; 0x03
    2f44:	9c 81       	ldd	r25, Y+4	; 0x04
    2f46:	8b 30       	cpi	r24, 0x0B	; 11
    2f48:	91 05       	cpc	r25, r1
    2f4a:	a4 f5       	brge	.+104    	; 0x2fb4 <Keypad_4x4_adjustKeyNumber+0x118>
    2f4c:	2d c0       	rjmp	.+90     	; 0x2fa8 <Keypad_4x4_adjustKeyNumber+0x10c>
    2f4e:	2b 81       	ldd	r18, Y+3	; 0x03
    2f50:	3c 81       	ldd	r19, Y+4	; 0x04
    2f52:	2e 30       	cpi	r18, 0x0E	; 14
    2f54:	31 05       	cpc	r19, r1
    2f56:	b9 f1       	breq	.+110    	; 0x2fc6 <Keypad_4x4_adjustKeyNumber+0x12a>
    2f58:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5c:	8e 30       	cpi	r24, 0x0E	; 14
    2f5e:	91 05       	cpc	r25, r1
    2f60:	7c f1       	brlt	.+94     	; 0x2fc0 <Keypad_4x4_adjustKeyNumber+0x124>
    2f62:	2b 81       	ldd	r18, Y+3	; 0x03
    2f64:	3c 81       	ldd	r19, Y+4	; 0x04
    2f66:	2f 30       	cpi	r18, 0x0F	; 15
    2f68:	31 05       	cpc	r19, r1
    2f6a:	81 f1       	breq	.+96     	; 0x2fcc <Keypad_4x4_adjustKeyNumber+0x130>
    2f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f70:	80 31       	cpi	r24, 0x10	; 16
    2f72:	91 05       	cpc	r25, r1
    2f74:	71 f1       	breq	.+92     	; 0x2fd2 <Keypad_4x4_adjustKeyNumber+0x136>
    2f76:	30 c0       	rjmp	.+96     	; 0x2fd8 <Keypad_4x4_adjustKeyNumber+0x13c>
	{
		case 1:		return '!';
    2f78:	91 e2       	ldi	r25, 0x21	; 33
    2f7a:	9a 83       	std	Y+2, r25	; 0x02
    2f7c:	2e c0       	rjmp	.+92     	; 0x2fda <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 2:		return '@';
    2f7e:	20 e4       	ldi	r18, 0x40	; 64
    2f80:	2a 83       	std	Y+2, r18	; 0x02
    2f82:	2b c0       	rjmp	.+86     	; 0x2fda <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 3:		return '#';
    2f84:	33 e2       	ldi	r19, 0x23	; 35
    2f86:	3a 83       	std	Y+2, r19	; 0x02
    2f88:	28 c0       	rjmp	.+80     	; 0x2fda <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 4:		return '$';
    2f8a:	84 e2       	ldi	r24, 0x24	; 36
    2f8c:	8a 83       	std	Y+2, r24	; 0x02
    2f8e:	25 c0       	rjmp	.+74     	; 0x2fda <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 5:		return '*';
    2f90:	9a e2       	ldi	r25, 0x2A	; 42
    2f92:	9a 83       	std	Y+2, r25	; 0x02
    2f94:	22 c0       	rjmp	.+68     	; 0x2fda <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 6:		return '4';
    2f96:	24 e3       	ldi	r18, 0x34	; 52
    2f98:	2a 83       	std	Y+2, r18	; 0x02
    2f9a:	1f c0       	rjmp	.+62     	; 0x2fda <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 7:		return '7';
    2f9c:	37 e3       	ldi	r19, 0x37	; 55
    2f9e:	3a 83       	std	Y+2, r19	; 0x02
    2fa0:	1c c0       	rjmp	.+56     	; 0x2fda <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 8:		return '1';
    2fa2:	81 e3       	ldi	r24, 0x31	; 49
    2fa4:	8a 83       	std	Y+2, r24	; 0x02
    2fa6:	19 c0       	rjmp	.+50     	; 0x2fda <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 9:		return '0';
    2fa8:	90 e3       	ldi	r25, 0x30	; 48
    2faa:	9a 83       	std	Y+2, r25	; 0x02
    2fac:	16 c0       	rjmp	.+44     	; 0x2fda <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 10:	return '5';
    2fae:	25 e3       	ldi	r18, 0x35	; 53
    2fb0:	2a 83       	std	Y+2, r18	; 0x02
    2fb2:	13 c0       	rjmp	.+38     	; 0x2fda <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 11:	return '8';
    2fb4:	38 e3       	ldi	r19, 0x38	; 56
    2fb6:	3a 83       	std	Y+2, r19	; 0x02
    2fb8:	10 c0       	rjmp	.+32     	; 0x2fda <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 12:	return '2';
    2fba:	82 e3       	ldi	r24, 0x32	; 50
    2fbc:	8a 83       	std	Y+2, r24	; 0x02
    2fbe:	0d c0       	rjmp	.+26     	; 0x2fda <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 13:	return '#';
    2fc0:	93 e2       	ldi	r25, 0x23	; 35
    2fc2:	9a 83       	std	Y+2, r25	; 0x02
    2fc4:	0a c0       	rjmp	.+20     	; 0x2fda <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 14:	return '6';
    2fc6:	26 e3       	ldi	r18, 0x36	; 54
    2fc8:	2a 83       	std	Y+2, r18	; 0x02
    2fca:	07 c0       	rjmp	.+14     	; 0x2fda <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 15:	return '9';
    2fcc:	39 e3       	ldi	r19, 0x39	; 57
    2fce:	3a 83       	std	Y+2, r19	; 0x02
    2fd0:	04 c0       	rjmp	.+8      	; 0x2fda <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 16:	return '3';
    2fd2:	83 e3       	ldi	r24, 0x33	; 51
    2fd4:	8a 83       	std	Y+2, r24	; 0x02
    2fd6:	01 c0       	rjmp	.+2      	; 0x2fda <Keypad_4x4_adjustKeyNumber+0x13e>
    2fd8:	02 c0       	rjmp	.+4      	; 0x2fde <Keypad_4x4_adjustKeyNumber+0x142>
		break;
	}
}
    2fda:	9a 81       	ldd	r25, Y+2	; 0x02
    2fdc:	9d 83       	std	Y+5, r25	; 0x05
    2fde:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe0:	0f 90       	pop	r0
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	cf 91       	pop	r28
    2fec:	df 91       	pop	r29
    2fee:	08 95       	ret

00002ff0 <Map>:
#include "MAP_config.h"
#include "MAP_private.h"
#include "MAP_interface.h"

s32 Map(s32 Copy_s32InputMin , s32 Copy_s32InputMax , s32 Copy_s32OutputMin , s32 Copy_s32OutputMax , s32 Copy_s32InputVal)
{
    2ff0:	af 92       	push	r10
    2ff2:	bf 92       	push	r11
    2ff4:	cf 92       	push	r12
    2ff6:	df 92       	push	r13
    2ff8:	ef 92       	push	r14
    2ffa:	ff 92       	push	r15
    2ffc:	0f 93       	push	r16
    2ffe:	1f 93       	push	r17
    3000:	df 93       	push	r29
    3002:	cf 93       	push	r28
    3004:	cd b7       	in	r28, 0x3d	; 61
    3006:	de b7       	in	r29, 0x3e	; 62
    3008:	64 97       	sbiw	r28, 0x14	; 20
    300a:	0f b6       	in	r0, 0x3f	; 63
    300c:	f8 94       	cli
    300e:	de bf       	out	0x3e, r29	; 62
    3010:	0f be       	out	0x3f, r0	; 63
    3012:	cd bf       	out	0x3d, r28	; 61
    3014:	6d 83       	std	Y+5, r22	; 0x05
    3016:	7e 83       	std	Y+6, r23	; 0x06
    3018:	8f 83       	std	Y+7, r24	; 0x07
    301a:	98 87       	std	Y+8, r25	; 0x08
    301c:	29 87       	std	Y+9, r18	; 0x09
    301e:	3a 87       	std	Y+10, r19	; 0x0a
    3020:	4b 87       	std	Y+11, r20	; 0x0b
    3022:	5c 87       	std	Y+12, r21	; 0x0c
    3024:	ed 86       	std	Y+13, r14	; 0x0d
    3026:	fe 86       	std	Y+14, r15	; 0x0e
    3028:	0f 87       	std	Y+15, r16	; 0x0f
    302a:	18 8b       	std	Y+16, r17	; 0x10
    302c:	a9 8a       	std	Y+17, r10	; 0x11
    302e:	ba 8a       	std	Y+18, r11	; 0x12
    3030:	cb 8a       	std	Y+19, r12	; 0x13
    3032:	dc 8a       	std	Y+20, r13	; 0x14
	s32 Loacl_s32Value = Copy_s32InputVal - Copy_s32InputMin;
    3034:	29 a1       	ldd	r18, Y+33	; 0x21
    3036:	3a a1       	ldd	r19, Y+34	; 0x22
    3038:	4b a1       	ldd	r20, Y+35	; 0x23
    303a:	5c a1       	ldd	r21, Y+36	; 0x24
    303c:	8d 81       	ldd	r24, Y+5	; 0x05
    303e:	9e 81       	ldd	r25, Y+6	; 0x06
    3040:	af 81       	ldd	r26, Y+7	; 0x07
    3042:	b8 85       	ldd	r27, Y+8	; 0x08
    3044:	79 01       	movw	r14, r18
    3046:	8a 01       	movw	r16, r20
    3048:	e8 1a       	sub	r14, r24
    304a:	f9 0a       	sbc	r15, r25
    304c:	0a 0b       	sbc	r16, r26
    304e:	1b 0b       	sbc	r17, r27
    3050:	d8 01       	movw	r26, r16
    3052:	c7 01       	movw	r24, r14
    3054:	89 83       	std	Y+1, r24	; 0x01
    3056:	9a 83       	std	Y+2, r25	; 0x02
    3058:	ab 83       	std	Y+3, r26	; 0x03
    305a:	bc 83       	std	Y+4, r27	; 0x04
	Loacl_s32Value = Loacl_s32Value * (Copy_s32OutputMax - Copy_s32OutputMin);
    305c:	29 89       	ldd	r18, Y+17	; 0x11
    305e:	3a 89       	ldd	r19, Y+18	; 0x12
    3060:	4b 89       	ldd	r20, Y+19	; 0x13
    3062:	5c 89       	ldd	r21, Y+20	; 0x14
    3064:	8d 85       	ldd	r24, Y+13	; 0x0d
    3066:	9e 85       	ldd	r25, Y+14	; 0x0e
    3068:	af 85       	ldd	r26, Y+15	; 0x0f
    306a:	b8 89       	ldd	r27, Y+16	; 0x10
    306c:	28 1b       	sub	r18, r24
    306e:	39 0b       	sbc	r19, r25
    3070:	4a 0b       	sbc	r20, r26
    3072:	5b 0b       	sbc	r21, r27
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	9a 81       	ldd	r25, Y+2	; 0x02
    3078:	ab 81       	ldd	r26, Y+3	; 0x03
    307a:	bc 81       	ldd	r27, Y+4	; 0x04
    307c:	bc 01       	movw	r22, r24
    307e:	cd 01       	movw	r24, r26
    3080:	0e 94 6e 31 	call	0x62dc	; 0x62dc <__mulsi3>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	89 83       	std	Y+1, r24	; 0x01
    308a:	9a 83       	std	Y+2, r25	; 0x02
    308c:	ab 83       	std	Y+3, r26	; 0x03
    308e:	bc 83       	std	Y+4, r27	; 0x04
	Loacl_s32Value = Loacl_s32Value / (Copy_s32InputMax - Copy_s32InputMin);
    3090:	29 85       	ldd	r18, Y+9	; 0x09
    3092:	3a 85       	ldd	r19, Y+10	; 0x0a
    3094:	4b 85       	ldd	r20, Y+11	; 0x0b
    3096:	5c 85       	ldd	r21, Y+12	; 0x0c
    3098:	8d 81       	ldd	r24, Y+5	; 0x05
    309a:	9e 81       	ldd	r25, Y+6	; 0x06
    309c:	af 81       	ldd	r26, Y+7	; 0x07
    309e:	b8 85       	ldd	r27, Y+8	; 0x08
    30a0:	28 1b       	sub	r18, r24
    30a2:	39 0b       	sbc	r19, r25
    30a4:	4a 0b       	sbc	r20, r26
    30a6:	5b 0b       	sbc	r21, r27
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	9a 81       	ldd	r25, Y+2	; 0x02
    30ac:	ab 81       	ldd	r26, Y+3	; 0x03
    30ae:	bc 81       	ldd	r27, Y+4	; 0x04
    30b0:	bc 01       	movw	r22, r24
    30b2:	cd 01       	movw	r24, r26
    30b4:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divmodsi4>
    30b8:	da 01       	movw	r26, r20
    30ba:	c9 01       	movw	r24, r18
    30bc:	89 83       	std	Y+1, r24	; 0x01
    30be:	9a 83       	std	Y+2, r25	; 0x02
    30c0:	ab 83       	std	Y+3, r26	; 0x03
    30c2:	bc 83       	std	Y+4, r27	; 0x04
	Loacl_s32Value = Loacl_s32Value + Copy_s32OutputMin;
    30c4:	29 81       	ldd	r18, Y+1	; 0x01
    30c6:	3a 81       	ldd	r19, Y+2	; 0x02
    30c8:	4b 81       	ldd	r20, Y+3	; 0x03
    30ca:	5c 81       	ldd	r21, Y+4	; 0x04
    30cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    30d0:	af 85       	ldd	r26, Y+15	; 0x0f
    30d2:	b8 89       	ldd	r27, Y+16	; 0x10
    30d4:	82 0f       	add	r24, r18
    30d6:	93 1f       	adc	r25, r19
    30d8:	a4 1f       	adc	r26, r20
    30da:	b5 1f       	adc	r27, r21
    30dc:	89 83       	std	Y+1, r24	; 0x01
    30de:	9a 83       	std	Y+2, r25	; 0x02
    30e0:	ab 83       	std	Y+3, r26	; 0x03
    30e2:	bc 83       	std	Y+4, r27	; 0x04
	return Loacl_s32Value;
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	9a 81       	ldd	r25, Y+2	; 0x02
    30e8:	ab 81       	ldd	r26, Y+3	; 0x03
    30ea:	bc 81       	ldd	r27, Y+4	; 0x04
}
    30ec:	bc 01       	movw	r22, r24
    30ee:	cd 01       	movw	r24, r26
    30f0:	64 96       	adiw	r28, 0x14	; 20
    30f2:	0f b6       	in	r0, 0x3f	; 63
    30f4:	f8 94       	cli
    30f6:	de bf       	out	0x3e, r29	; 62
    30f8:	0f be       	out	0x3f, r0	; 63
    30fa:	cd bf       	out	0x3d, r28	; 61
    30fc:	cf 91       	pop	r28
    30fe:	df 91       	pop	r29
    3100:	1f 91       	pop	r17
    3102:	0f 91       	pop	r16
    3104:	ff 90       	pop	r15
    3106:	ef 90       	pop	r14
    3108:	df 90       	pop	r13
    310a:	cf 90       	pop	r12
    310c:	bf 90       	pop	r11
    310e:	af 90       	pop	r10
    3110:	08 95       	ret

00003112 <SPI_voidInitMaster>:
#include "SPI_register.h"

static void (*SPI_ISR) (void)= NULL;

void SPI_voidInitMaster(void)
{
    3112:	df 93       	push	r29
    3114:	cf 93       	push	r28
    3116:	cd b7       	in	r28, 0x3d	; 61
    3118:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(DIO_u8PORTB , DIO_u8PIN5 ,DIO_u8PIN_OUTPUT);
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	65 e0       	ldi	r22, 0x05	; 5
    311e:	41 e0       	ldi	r20, 0x01	; 1
    3120:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB , DIO_u8PIN6 ,DIO_u8PIN_INPUT);
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	66 e0       	ldi	r22, 0x06	; 6
    3128:	40 e0       	ldi	r20, 0x00	; 0
    312a:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB , DIO_u8PIN7 ,DIO_u8PIN_OUTPUT);
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	67 e0       	ldi	r22, 0x07	; 7
    3132:	41 e0       	ldi	r20, 0x01	; 1
    3134:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB , DIO_u8PIN4 ,DIO_u8PIN_OUTPUT);
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	64 e0       	ldi	r22, 0x04	; 4
    313c:	41 e0       	ldi	r20, 0x01	; 1
    313e:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	/*Data Order By Default*/

	/*Master Initialization*/
	SET_BIT(SPCR,SPCR_MASTR);
    3142:	ad e2       	ldi	r26, 0x2D	; 45
    3144:	b0 e0       	ldi	r27, 0x00	; 0
    3146:	ed e2       	ldi	r30, 0x2D	; 45
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	80 81       	ld	r24, Z
    314c:	80 61       	ori	r24, 0x10	; 16
    314e:	8c 93       	st	X, r24
	/*Clock Polarity By Default*/

	/*Clock Phase By Default*/

	/*Clock Prescaler: Divide by 16 */
	SET_BIT(SPCR,SPCR_SPR0);
    3150:	ad e2       	ldi	r26, 0x2D	; 45
    3152:	b0 e0       	ldi	r27, 0x00	; 0
    3154:	ed e2       	ldi	r30, 0x2D	; 45
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	80 81       	ld	r24, Z
    315a:	81 60       	ori	r24, 0x01	; 1
    315c:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_SPR1);
    315e:	ad e2       	ldi	r26, 0x2D	; 45
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	ed e2       	ldi	r30, 0x2D	; 45
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
    3168:	8d 7f       	andi	r24, 0xFD	; 253
    316a:	8c 93       	st	X, r24
	CLR_BIT(SPSR,SPSR_SPI2X);
    316c:	ae e2       	ldi	r26, 0x2E	; 46
    316e:	b0 e0       	ldi	r27, 0x00	; 0
    3170:	ee e2       	ldi	r30, 0x2E	; 46
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	80 81       	ld	r24, Z
    3176:	8e 7f       	andi	r24, 0xFE	; 254
    3178:	8c 93       	st	X, r24

	/*SPI Enable*/
	SET_BIT(SPCR,SPCR_SPE);
    317a:	ad e2       	ldi	r26, 0x2D	; 45
    317c:	b0 e0       	ldi	r27, 0x00	; 0
    317e:	ed e2       	ldi	r30, 0x2D	; 45
    3180:	f0 e0       	ldi	r31, 0x00	; 0
    3182:	80 81       	ld	r24, Z
    3184:	80 64       	ori	r24, 0x40	; 64
    3186:	8c 93       	st	X, r24
}
    3188:	cf 91       	pop	r28
    318a:	df 91       	pop	r29
    318c:	08 95       	ret

0000318e <SPI_voidInitSlave>:

void SPI_voidInitSlave(void)
{
    318e:	df 93       	push	r29
    3190:	cf 93       	push	r28
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(DIO_u8PORTB , DIO_u8PIN4 ,DIO_u8PIN_INPUT);
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	64 e0       	ldi	r22, 0x04	; 4
    319a:	40 e0       	ldi	r20, 0x00	; 0
    319c:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB , DIO_u8PIN5 ,DIO_u8PIN_INPUT);
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	65 e0       	ldi	r22, 0x05	; 5
    31a4:	40 e0       	ldi	r20, 0x00	; 0
    31a6:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB , DIO_u8PIN6 ,DIO_u8PIN_OUTPUT);
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	66 e0       	ldi	r22, 0x06	; 6
    31ae:	41 e0       	ldi	r20, 0x01	; 1
    31b0:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB , DIO_u8PIN7 ,DIO_u8PIN_INPUT);
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	67 e0       	ldi	r22, 0x07	; 7
    31b8:	40 e0       	ldi	r20, 0x00	; 0
    31ba:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	/*Data Order By Default*/

	/*Slave Initialization*/
	CLR_BIT(SPCR,SPCR_MASTR);
    31be:	ad e2       	ldi	r26, 0x2D	; 45
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	ed e2       	ldi	r30, 0x2D	; 45
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	80 81       	ld	r24, Z
    31c8:	8f 7e       	andi	r24, 0xEF	; 239
    31ca:	8c 93       	st	X, r24
	/*Clock Polarity By Default*/

	/*Clock Phase By Default*/

	/*SPI Enable*/
	SET_BIT(SPCR,SPCR_SPE);
    31cc:	ad e2       	ldi	r26, 0x2D	; 45
    31ce:	b0 e0       	ldi	r27, 0x00	; 0
    31d0:	ed e2       	ldi	r30, 0x2D	; 45
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	80 64       	ori	r24, 0x40	; 64
    31d8:	8c 93       	st	X, r24
}
    31da:	cf 91       	pop	r28
    31dc:	df 91       	pop	r29
    31de:	08 95       	ret

000031e0 <SPI_voidTransferByte>:

void SPI_voidTransferByte(u8 Copy_u8Data)
{
    31e0:	df 93       	push	r29
    31e2:	cf 93       	push	r28
    31e4:	0f 92       	push	r0
    31e6:	cd b7       	in	r28, 0x3d	; 61
    31e8:	de b7       	in	r29, 0x3e	; 62
    31ea:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_u8Data;
    31ec:	ef e2       	ldi	r30, 0x2F	; 47
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	80 83       	st	Z, r24
	while(GET_BIT(SPSR,SPSR_SPIF) == 0);		/* wait here while SPIF flag set */
    31f4:	ee e2       	ldi	r30, 0x2E	; 46
    31f6:	f0 e0       	ldi	r31, 0x00	; 0
    31f8:	80 81       	ld	r24, Z
    31fa:	88 23       	and	r24, r24
    31fc:	dc f7       	brge	.-10     	; 0x31f4 <SPI_voidTransferByte+0x14>
}
    31fe:	0f 90       	pop	r0
    3200:	cf 91       	pop	r28
    3202:	df 91       	pop	r29
    3204:	08 95       	ret

00003206 <SPI_u8ReceiveByte>:


u8 SPI_u8ReceiveByte(void) {
    3206:	df 93       	push	r29
    3208:	cf 93       	push	r28
    320a:	cd b7       	in	r28, 0x3d	; 61
    320c:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(SPSR,SPSR_SPIF) == 0);
    320e:	ee e2       	ldi	r30, 0x2E	; 46
    3210:	f0 e0       	ldi	r31, 0x00	; 0
    3212:	80 81       	ld	r24, Z
    3214:	88 23       	and	r24, r24
    3216:	dc f7       	brge	.-10     	; 0x320e <SPI_u8ReceiveByte+0x8>
	return SPDR;
    3218:	ef e2       	ldi	r30, 0x2F	; 47
    321a:	f0 e0       	ldi	r31, 0x00	; 0
    321c:	80 81       	ld	r24, Z
}
    321e:	cf 91       	pop	r28
    3220:	df 91       	pop	r29
    3222:	08 95       	ret

00003224 <SPI_u8Transceive>:

u8 SPI_u8Transceive(u8 Copy_u8Data)
{
    3224:	df 93       	push	r29
    3226:	cf 93       	push	r28
    3228:	0f 92       	push	r0
    322a:	cd b7       	in	r28, 0x3d	; 61
    322c:	de b7       	in	r29, 0x3e	; 62
    322e:	89 83       	std	Y+1, r24	; 0x01
	/*Send the data*/
	SPDR = Copy_u8Data;
    3230:	ef e2       	ldi	r30, 0x2F	; 47
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	89 81       	ldd	r24, Y+1	; 0x01
    3236:	80 83       	st	Z, r24

	/*Wait (busy waiting) until transfer complete*/
	while(GET_BIT(SPSR,SPSR_SPIF) == 0); /*Time Out*/ /*1*/
    3238:	ee e2       	ldi	r30, 0x2E	; 46
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	80 81       	ld	r24, Z
    323e:	88 23       	and	r24, r24
    3240:	dc f7       	brge	.-10     	; 0x3238 <SPI_u8Transceive+0x14>

	/*Get the exchanged data*/
	return SPDR; /*2*/
    3242:	ef e2       	ldi	r30, 0x2F	; 47
    3244:	f0 e0       	ldi	r31, 0x00	; 0
    3246:	80 81       	ld	r24, Z
	/*1 , 2 Clear Flag*/

}
    3248:	0f 90       	pop	r0
    324a:	cf 91       	pop	r28
    324c:	df 91       	pop	r29
    324e:	08 95       	ret

00003250 <SPI_voidEnableInterrupt>:

void SPI_voidEnableInterrupt(void)
{
    3250:	df 93       	push	r29
    3252:	cf 93       	push	r28
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR ,SPCR_SPIE);
    3258:	ad e2       	ldi	r26, 0x2D	; 45
    325a:	b0 e0       	ldi	r27, 0x00	; 0
    325c:	ed e2       	ldi	r30, 0x2D	; 45
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	80 81       	ld	r24, Z
    3262:	80 68       	ori	r24, 0x80	; 128
    3264:	8c 93       	st	X, r24
}
    3266:	cf 91       	pop	r28
    3268:	df 91       	pop	r29
    326a:	08 95       	ret

0000326c <SPI_voidDisableInterrupt>:
void SPI_voidDisableInterrupt(void)
{
    326c:	df 93       	push	r29
    326e:	cf 93       	push	r28
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR , SPCR_SPIE);
    3274:	ad e2       	ldi	r26, 0x2D	; 45
    3276:	b0 e0       	ldi	r27, 0x00	; 0
    3278:	ed e2       	ldi	r30, 0x2D	; 45
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	80 81       	ld	r24, Z
    327e:	8f 77       	andi	r24, 0x7F	; 127
    3280:	8c 93       	st	X, r24
}
    3282:	cf 91       	pop	r28
    3284:	df 91       	pop	r29
    3286:	08 95       	ret

00003288 <SPI_voidSetCallBack>:
void SPI_voidSetCallBack(void (*PtrToSPI_ISR)(void))
{
    3288:	df 93       	push	r29
    328a:	cf 93       	push	r28
    328c:	00 d0       	rcall	.+0      	; 0x328e <SPI_voidSetCallBack+0x6>
    328e:	cd b7       	in	r28, 0x3d	; 61
    3290:	de b7       	in	r29, 0x3e	; 62
    3292:	9a 83       	std	Y+2, r25	; 0x02
    3294:	89 83       	std	Y+1, r24	; 0x01
	SPI_ISR = PtrToSPI_ISR;
    3296:	89 81       	ldd	r24, Y+1	; 0x01
    3298:	9a 81       	ldd	r25, Y+2	; 0x02
    329a:	90 93 38 01 	sts	0x0138, r25
    329e:	80 93 37 01 	sts	0x0137, r24
}
    32a2:	0f 90       	pop	r0
    32a4:	0f 90       	pop	r0
    32a6:	cf 91       	pop	r28
    32a8:	df 91       	pop	r29
    32aa:	08 95       	ret

000032ac <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    32ac:	1f 92       	push	r1
    32ae:	0f 92       	push	r0
    32b0:	0f b6       	in	r0, 0x3f	; 63
    32b2:	0f 92       	push	r0
    32b4:	11 24       	eor	r1, r1
    32b6:	2f 93       	push	r18
    32b8:	3f 93       	push	r19
    32ba:	4f 93       	push	r20
    32bc:	5f 93       	push	r21
    32be:	6f 93       	push	r22
    32c0:	7f 93       	push	r23
    32c2:	8f 93       	push	r24
    32c4:	9f 93       	push	r25
    32c6:	af 93       	push	r26
    32c8:	bf 93       	push	r27
    32ca:	ef 93       	push	r30
    32cc:	ff 93       	push	r31
    32ce:	df 93       	push	r29
    32d0:	cf 93       	push	r28
    32d2:	cd b7       	in	r28, 0x3d	; 61
    32d4:	de b7       	in	r29, 0x3e	; 62
	SPI_ISR();
    32d6:	e0 91 37 01 	lds	r30, 0x0137
    32da:	f0 91 38 01 	lds	r31, 0x0138
    32de:	09 95       	icall
}
    32e0:	cf 91       	pop	r28
    32e2:	df 91       	pop	r29
    32e4:	ff 91       	pop	r31
    32e6:	ef 91       	pop	r30
    32e8:	bf 91       	pop	r27
    32ea:	af 91       	pop	r26
    32ec:	9f 91       	pop	r25
    32ee:	8f 91       	pop	r24
    32f0:	7f 91       	pop	r23
    32f2:	6f 91       	pop	r22
    32f4:	5f 91       	pop	r21
    32f6:	4f 91       	pop	r20
    32f8:	3f 91       	pop	r19
    32fa:	2f 91       	pop	r18
    32fc:	0f 90       	pop	r0
    32fe:	0f be       	out	0x3f, r0	; 63
    3300:	0f 90       	pop	r0
    3302:	1f 90       	pop	r1
    3304:	18 95       	reti

00003306 <SERVO_voidTimer1InitOCR1AB>:

#include "SvM_interface.h"
#include "SvM_private.h"
#include "SvM_config.h"
void SERVO_voidTimer1InitOCR1AB(void)
{
    3306:	df 93       	push	r29
    3308:	cf 93       	push	r28
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN5,DIO_u8PIN_OUTPUT);
    330e:	83 e0       	ldi	r24, 0x03	; 3
    3310:	65 e0       	ldi	r22, 0x05	; 5
    3312:	41 e0       	ldi	r20, 0x01	; 1
    3314:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN4,DIO_u8PIN_OUTPUT);
    3318:	83 e0       	ldi	r24, 0x03	; 3
    331a:	64 e0       	ldi	r22, 0x04	; 4
    331c:	41 e0       	ldi	r20, 0x01	; 1
    331e:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	TIMER_voidTimer1Enable(TIMER1_MODE_FAST_PWM_ICR1,TIMER1_MODE_CHANNEL_A_CLEAR_OC1A,TIMER1_MODE_CHANNEL_B_CLEAR_OC1B);
    3322:	8e e0       	ldi	r24, 0x0E	; 14
    3324:	62 e0       	ldi	r22, 0x02	; 2
    3326:	42 e0       	ldi	r20, 0x02	; 2
    3328:	0e 94 45 1c 	call	0x388a	; 0x388a <TIMER_voidTimer1Enable>
	TIMER_voidTimer1SetICR1 (20000);
    332c:	80 e2       	ldi	r24, 0x20	; 32
    332e:	9e e4       	ldi	r25, 0x4E	; 78
    3330:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <TIMER_voidTimer1SetICR1>
}
    3334:	cf 91       	pop	r28
    3336:	df 91       	pop	r29
    3338:	08 95       	ret

0000333a <SERVO_voidTimer1InitOCR1B>:
void SERVO_voidTimer1InitOCR1B(void)
{
    333a:	df 93       	push	r29
    333c:	cf 93       	push	r28
    333e:	cd b7       	in	r28, 0x3d	; 61
    3340:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN4,DIO_u8PIN_OUTPUT);
    3342:	83 e0       	ldi	r24, 0x03	; 3
    3344:	64 e0       	ldi	r22, 0x04	; 4
    3346:	41 e0       	ldi	r20, 0x01	; 1
    3348:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_u8SetPinDirection>
	TIMER_voidTimer1Enable(TIMER1_MODE_FAST_PWM_ICR1,TIMER1_MODE_CHANNEL_A_CLEAR_OC1A,TIMER1_MODE_CHANNEL_B_CLEAR_OC1B);
    334c:	8e e0       	ldi	r24, 0x0E	; 14
    334e:	62 e0       	ldi	r22, 0x02	; 2
    3350:	42 e0       	ldi	r20, 0x02	; 2
    3352:	0e 94 45 1c 	call	0x388a	; 0x388a <TIMER_voidTimer1Enable>
	TIMER_voidTimer1SetICR1 (19999);
    3356:	8f e1       	ldi	r24, 0x1F	; 31
    3358:	9e e4       	ldi	r25, 0x4E	; 78
    335a:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <TIMER_voidTimer1SetICR1>
}
    335e:	cf 91       	pop	r28
    3360:	df 91       	pop	r29
    3362:	08 95       	ret

00003364 <SERVO_voidTimer1ServoSetAngleOCR1A>:
void SERVO_voidTimer1ServoSetAngleOCR1A(u32 Copy_u32Angle)
{
    3364:	af 92       	push	r10
    3366:	bf 92       	push	r11
    3368:	cf 92       	push	r12
    336a:	df 92       	push	r13
    336c:	ef 92       	push	r14
    336e:	ff 92       	push	r15
    3370:	0f 93       	push	r16
    3372:	1f 93       	push	r17
    3374:	df 93       	push	r29
    3376:	cf 93       	push	r28
    3378:	00 d0       	rcall	.+0      	; 0x337a <SERVO_voidTimer1ServoSetAngleOCR1A+0x16>
    337a:	00 d0       	rcall	.+0      	; 0x337c <SERVO_voidTimer1ServoSetAngleOCR1A+0x18>
    337c:	00 d0       	rcall	.+0      	; 0x337e <SERVO_voidTimer1ServoSetAngleOCR1A+0x1a>
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
    3382:	6b 83       	std	Y+3, r22	; 0x03
    3384:	7c 83       	std	Y+4, r23	; 0x04
    3386:	8d 83       	std	Y+5, r24	; 0x05
    3388:	9e 83       	std	Y+6, r25	; 0x06
	//TIMER_voidTimer1SetICR1 (19999);
	u16 Local_u32AnglePulse = Map(0,180,750,2500,Copy_u32Angle);
    338a:	8b 81       	ldd	r24, Y+3	; 0x03
    338c:	9c 81       	ldd	r25, Y+4	; 0x04
    338e:	ad 81       	ldd	r26, Y+5	; 0x05
    3390:	be 81       	ldd	r27, Y+6	; 0x06
    3392:	00 d0       	rcall	.+0      	; 0x3394 <SERVO_voidTimer1ServoSetAngleOCR1A+0x30>
    3394:	00 d0       	rcall	.+0      	; 0x3396 <SERVO_voidTimer1ServoSetAngleOCR1A+0x32>
    3396:	ed b7       	in	r30, 0x3d	; 61
    3398:	fe b7       	in	r31, 0x3e	; 62
    339a:	31 96       	adiw	r30, 0x01	; 1
    339c:	80 83       	st	Z, r24
    339e:	91 83       	std	Z+1, r25	; 0x01
    33a0:	a2 83       	std	Z+2, r26	; 0x02
    33a2:	b3 83       	std	Z+3, r27	; 0x03
    33a4:	60 e0       	ldi	r22, 0x00	; 0
    33a6:	70 e0       	ldi	r23, 0x00	; 0
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	24 eb       	ldi	r18, 0xB4	; 180
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	40 e0       	ldi	r20, 0x00	; 0
    33b2:	50 e0       	ldi	r21, 0x00	; 0
    33b4:	0f 2e       	mov	r0, r31
    33b6:	fe ee       	ldi	r31, 0xEE	; 238
    33b8:	ef 2e       	mov	r14, r31
    33ba:	f2 e0       	ldi	r31, 0x02	; 2
    33bc:	ff 2e       	mov	r15, r31
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	0f 2f       	mov	r16, r31
    33c2:	f0 e0       	ldi	r31, 0x00	; 0
    33c4:	1f 2f       	mov	r17, r31
    33c6:	f0 2d       	mov	r31, r0
    33c8:	0f 2e       	mov	r0, r31
    33ca:	f4 ec       	ldi	r31, 0xC4	; 196
    33cc:	af 2e       	mov	r10, r31
    33ce:	f9 e0       	ldi	r31, 0x09	; 9
    33d0:	bf 2e       	mov	r11, r31
    33d2:	f0 e0       	ldi	r31, 0x00	; 0
    33d4:	cf 2e       	mov	r12, r31
    33d6:	f0 e0       	ldi	r31, 0x00	; 0
    33d8:	df 2e       	mov	r13, r31
    33da:	f0 2d       	mov	r31, r0
    33dc:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <Map>
    33e0:	0f 90       	pop	r0
    33e2:	0f 90       	pop	r0
    33e4:	0f 90       	pop	r0
    33e6:	0f 90       	pop	r0
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	9a 83       	std	Y+2, r25	; 0x02
    33ee:	89 83       	std	Y+1, r24	; 0x01

	TIMER_voidTimer1SetOCR1A(Local_u32AnglePulse);
    33f0:	89 81       	ldd	r24, Y+1	; 0x01
    33f2:	9a 81       	ldd	r25, Y+2	; 0x02
    33f4:	0e 94 4e 21 	call	0x429c	; 0x429c <TIMER_voidTimer1SetOCR1A>
}
    33f8:	26 96       	adiw	r28, 0x06	; 6
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	f8 94       	cli
    33fe:	de bf       	out	0x3e, r29	; 62
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	cd bf       	out	0x3d, r28	; 61
    3404:	cf 91       	pop	r28
    3406:	df 91       	pop	r29
    3408:	1f 91       	pop	r17
    340a:	0f 91       	pop	r16
    340c:	ff 90       	pop	r15
    340e:	ef 90       	pop	r14
    3410:	df 90       	pop	r13
    3412:	cf 90       	pop	r12
    3414:	bf 90       	pop	r11
    3416:	af 90       	pop	r10
    3418:	08 95       	ret

0000341a <SERVO_voidTimer1ServoSetAngleOCR1B>:
void SERVO_voidTimer1ServoSetAngleOCR1B(u32 Copy_u32Angle)
{
    341a:	af 92       	push	r10
    341c:	bf 92       	push	r11
    341e:	cf 92       	push	r12
    3420:	df 92       	push	r13
    3422:	ef 92       	push	r14
    3424:	ff 92       	push	r15
    3426:	0f 93       	push	r16
    3428:	1f 93       	push	r17
    342a:	df 93       	push	r29
    342c:	cf 93       	push	r28
    342e:	00 d0       	rcall	.+0      	; 0x3430 <SERVO_voidTimer1ServoSetAngleOCR1B+0x16>
    3430:	00 d0       	rcall	.+0      	; 0x3432 <SERVO_voidTimer1ServoSetAngleOCR1B+0x18>
    3432:	00 d0       	rcall	.+0      	; 0x3434 <SERVO_voidTimer1ServoSetAngleOCR1B+0x1a>
    3434:	cd b7       	in	r28, 0x3d	; 61
    3436:	de b7       	in	r29, 0x3e	; 62
    3438:	6b 83       	std	Y+3, r22	; 0x03
    343a:	7c 83       	std	Y+4, r23	; 0x04
    343c:	8d 83       	std	Y+5, r24	; 0x05
    343e:	9e 83       	std	Y+6, r25	; 0x06
	//TIMER_voidTimer1SetOCR1A (19999);
	u16 Local_u32AnglePulse = Map(0,180,750,2500,Copy_u32Angle);
    3440:	8b 81       	ldd	r24, Y+3	; 0x03
    3442:	9c 81       	ldd	r25, Y+4	; 0x04
    3444:	ad 81       	ldd	r26, Y+5	; 0x05
    3446:	be 81       	ldd	r27, Y+6	; 0x06
    3448:	00 d0       	rcall	.+0      	; 0x344a <SERVO_voidTimer1ServoSetAngleOCR1B+0x30>
    344a:	00 d0       	rcall	.+0      	; 0x344c <SERVO_voidTimer1ServoSetAngleOCR1B+0x32>
    344c:	ed b7       	in	r30, 0x3d	; 61
    344e:	fe b7       	in	r31, 0x3e	; 62
    3450:	31 96       	adiw	r30, 0x01	; 1
    3452:	80 83       	st	Z, r24
    3454:	91 83       	std	Z+1, r25	; 0x01
    3456:	a2 83       	std	Z+2, r26	; 0x02
    3458:	b3 83       	std	Z+3, r27	; 0x03
    345a:	60 e0       	ldi	r22, 0x00	; 0
    345c:	70 e0       	ldi	r23, 0x00	; 0
    345e:	80 e0       	ldi	r24, 0x00	; 0
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	24 eb       	ldi	r18, 0xB4	; 180
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	40 e0       	ldi	r20, 0x00	; 0
    3468:	50 e0       	ldi	r21, 0x00	; 0
    346a:	0f 2e       	mov	r0, r31
    346c:	fe ee       	ldi	r31, 0xEE	; 238
    346e:	ef 2e       	mov	r14, r31
    3470:	f2 e0       	ldi	r31, 0x02	; 2
    3472:	ff 2e       	mov	r15, r31
    3474:	f0 e0       	ldi	r31, 0x00	; 0
    3476:	0f 2f       	mov	r16, r31
    3478:	f0 e0       	ldi	r31, 0x00	; 0
    347a:	1f 2f       	mov	r17, r31
    347c:	f0 2d       	mov	r31, r0
    347e:	0f 2e       	mov	r0, r31
    3480:	f4 ec       	ldi	r31, 0xC4	; 196
    3482:	af 2e       	mov	r10, r31
    3484:	f9 e0       	ldi	r31, 0x09	; 9
    3486:	bf 2e       	mov	r11, r31
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	cf 2e       	mov	r12, r31
    348c:	f0 e0       	ldi	r31, 0x00	; 0
    348e:	df 2e       	mov	r13, r31
    3490:	f0 2d       	mov	r31, r0
    3492:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <Map>
    3496:	0f 90       	pop	r0
    3498:	0f 90       	pop	r0
    349a:	0f 90       	pop	r0
    349c:	0f 90       	pop	r0
    349e:	dc 01       	movw	r26, r24
    34a0:	cb 01       	movw	r24, r22
    34a2:	9a 83       	std	Y+2, r25	; 0x02
    34a4:	89 83       	std	Y+1, r24	; 0x01
	TIMER_voidTimer1SetOCR1B(Local_u32AnglePulse);
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	9a 81       	ldd	r25, Y+2	; 0x02
    34aa:	0e 94 65 21 	call	0x42ca	; 0x42ca <TIMER_voidTimer1SetOCR1B>
}
    34ae:	26 96       	adiw	r28, 0x06	; 6
    34b0:	0f b6       	in	r0, 0x3f	; 63
    34b2:	f8 94       	cli
    34b4:	de bf       	out	0x3e, r29	; 62
    34b6:	0f be       	out	0x3f, r0	; 63
    34b8:	cd bf       	out	0x3d, r28	; 61
    34ba:	cf 91       	pop	r28
    34bc:	df 91       	pop	r29
    34be:	1f 91       	pop	r17
    34c0:	0f 91       	pop	r16
    34c2:	ff 90       	pop	r15
    34c4:	ef 90       	pop	r14
    34c6:	df 90       	pop	r13
    34c8:	cf 90       	pop	r12
    34ca:	bf 90       	pop	r11
    34cc:	af 90       	pop	r10
    34ce:	08 95       	ret

000034d0 <TIMER_voidTimer0Init>:
u32 TIMER0_f32OVCounterTmp;
f32 TIMER0_u16Prescaller;
u32 TIMER0_f32CounterCTC;
/**********************************************************************************/
void TIMER_voidTimer0Init(void)
{
    34d0:	df 93       	push	r29
    34d2:	cf 93       	push	r28
    34d4:	cd b7       	in	r28, 0x3d	; 61
    34d6:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TIMSK,TIMSK_TOIE0);
		CLR_BIT(TIMSK,TIMSK_OCIE0);

		TCNT0=TIMER0_f32PreloodValue;
	#elif TIMER0_MODE  == TIMER0_MODE_PWM_PHASE_CORRECT
		SET_BIT(TCCR0,TCCR0_WGM00);
    34d8:	a3 e5       	ldi	r26, 0x53	; 83
    34da:	b0 e0       	ldi	r27, 0x00	; 0
    34dc:	e3 e5       	ldi	r30, 0x53	; 83
    34de:	f0 e0       	ldi	r31, 0x00	; 0
    34e0:	80 81       	ld	r24, Z
    34e2:	80 64       	ori	r24, 0x40	; 64
    34e4:	8c 93       	st	X, r24
	    CLR_BIT(TCCR0,TCCR0_WGM01);
    34e6:	a3 e5       	ldi	r26, 0x53	; 83
    34e8:	b0 e0       	ldi	r27, 0x00	; 0
    34ea:	e3 e5       	ldi	r30, 0x53	; 83
    34ec:	f0 e0       	ldi	r31, 0x00	; 0
    34ee:	80 81       	ld	r24, Z
    34f0:	87 7f       	andi	r24, 0xF7	; 247
    34f2:	8c 93       	st	X, r24
         CLR_BIT(TCCR0,TCCR0_COM01);
    #elif  TIMER0_COMPARE_OUTPUT_MODE==TIMER0_MODE_TOGGLE
         SET_BIT(TCCR0,TCCR0_COM00);
         CLR_BIT(TCCR0,TCCR0_COM01);
    #elif  TIMER0_COMPARE_OUTPUT_MODE==TIMER0_MODE_CLEAR_OC0
         CLR_BIT(TCCR0,TCCR0_COM00);
    34f4:	a3 e5       	ldi	r26, 0x53	; 83
    34f6:	b0 e0       	ldi	r27, 0x00	; 0
    34f8:	e3 e5       	ldi	r30, 0x53	; 83
    34fa:	f0 e0       	ldi	r31, 0x00	; 0
    34fc:	80 81       	ld	r24, Z
    34fe:	8f 7e       	andi	r24, 0xEF	; 239
    3500:	8c 93       	st	X, r24
         SET_BIT(TCCR0,TCCR0_COM01);
    3502:	a3 e5       	ldi	r26, 0x53	; 83
    3504:	b0 e0       	ldi	r27, 0x00	; 0
    3506:	e3 e5       	ldi	r30, 0x53	; 83
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	80 81       	ld	r24, Z
    350c:	80 62       	ori	r24, 0x20	; 32
    350e:	8c 93       	st	X, r24
        CLR_BIT(TCCR0,TCCR0_CS00);
	    CLR_BIT(TCCR0,TCCR0_CS01);
	    SET_BIT(TCCR0,TCCR0_CS02);
	    TIMER0_u16Prescaller=256;
    #elif  TIMER0_CLOCK_SELECT == TIMER0_SELECT_CLK_DIV_1024
        SET_BIT(TCCR0,TCCR0_CS00);
    3510:	a3 e5       	ldi	r26, 0x53	; 83
    3512:	b0 e0       	ldi	r27, 0x00	; 0
    3514:	e3 e5       	ldi	r30, 0x53	; 83
    3516:	f0 e0       	ldi	r31, 0x00	; 0
    3518:	80 81       	ld	r24, Z
    351a:	81 60       	ori	r24, 0x01	; 1
    351c:	8c 93       	st	X, r24
	    CLR_BIT(TCCR0,TCCR0_CS01);
    351e:	a3 e5       	ldi	r26, 0x53	; 83
    3520:	b0 e0       	ldi	r27, 0x00	; 0
    3522:	e3 e5       	ldi	r30, 0x53	; 83
    3524:	f0 e0       	ldi	r31, 0x00	; 0
    3526:	80 81       	ld	r24, Z
    3528:	8d 7f       	andi	r24, 0xFD	; 253
    352a:	8c 93       	st	X, r24
	    SET_BIT(TCCR0,TCCR0_CS02);
    352c:	a3 e5       	ldi	r26, 0x53	; 83
    352e:	b0 e0       	ldi	r27, 0x00	; 0
    3530:	e3 e5       	ldi	r30, 0x53	; 83
    3532:	f0 e0       	ldi	r31, 0x00	; 0
    3534:	80 81       	ld	r24, Z
    3536:	84 60       	ori	r24, 0x04	; 4
    3538:	8c 93       	st	X, r24
	    TIMER0_u16Prescaller=1024;
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	a0 e8       	ldi	r26, 0x80	; 128
    3540:	b4 e4       	ldi	r27, 0x44	; 68
    3542:	80 93 4c 01 	sts	0x014C, r24
    3546:	90 93 4d 01 	sts	0x014D, r25
    354a:	a0 93 4e 01 	sts	0x014E, r26
    354e:	b0 93 4f 01 	sts	0x014F, r27
        SET_BIT(TCCR0,TCCR0_CS00);
	    SET_BIT(TCCR0,TCCR0_CS01);
	    SET_BIT(TCCR0,TCCR0_CS02);
	    TIMER0_u16Prescaller=0;
	#endif
}
    3552:	cf 91       	pop	r28
    3554:	df 91       	pop	r29
    3556:	08 95       	ret

00003558 <TIMER_voidTimer0Delay>:
/**********************************************************************************/
void TIMER_voidTimer0Delay(u32 Copy_u32DTime,void(*Copy_pFun)(void))
{
    3558:	df 93       	push	r29
    355a:	cf 93       	push	r28
    355c:	00 d0       	rcall	.+0      	; 0x355e <TIMER_voidTimer0Delay+0x6>
    355e:	00 d0       	rcall	.+0      	; 0x3560 <TIMER_voidTimer0Delay+0x8>
    3560:	00 d0       	rcall	.+0      	; 0x3562 <TIMER_voidTimer0Delay+0xa>
    3562:	cd b7       	in	r28, 0x3d	; 61
    3564:	de b7       	in	r29, 0x3e	; 62
    3566:	69 83       	std	Y+1, r22	; 0x01
    3568:	7a 83       	std	Y+2, r23	; 0x02
    356a:	8b 83       	std	Y+3, r24	; 0x03
    356c:	9c 83       	std	Y+4, r25	; 0x04
    356e:	5e 83       	std	Y+6, r21	; 0x06
    3570:	4d 83       	std	Y+5, r20	; 0x05
    #elif TIMER0_MODE  == TIMER0_MODE_CTC
	   f32 Local_f32TCTC=((TIMER0_CTC_OCR0_VALUE)*(TIMER0_u16Prescaller/8000UL));
	   TIMER0_f32CounterCTC=((f32)Copy_u32DTime/Local_f32TCTC);
	   TIMER0_pSetCallBack=Copy_pFun;
    #endif
}
    3572:	26 96       	adiw	r28, 0x06	; 6
    3574:	0f b6       	in	r0, 0x3f	; 63
    3576:	f8 94       	cli
    3578:	de bf       	out	0x3e, r29	; 62
    357a:	0f be       	out	0x3f, r0	; 63
    357c:	cd bf       	out	0x3d, r28	; 61
    357e:	cf 91       	pop	r28
    3580:	df 91       	pop	r29
    3582:	08 95       	ret

00003584 <TIMER_voidTimer0GeneratePWM>:
/**********************************************************************************/
void TIMER_voidTimer0GeneratePWM(f32 Copy_u8Intensity)
{
    3584:	0f 93       	push	r16
    3586:	1f 93       	push	r17
    3588:	df 93       	push	r29
    358a:	cf 93       	push	r28
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62
    3590:	28 97       	sbiw	r28, 0x08	; 8
    3592:	0f b6       	in	r0, 0x3f	; 63
    3594:	f8 94       	cli
    3596:	de bf       	out	0x3e, r29	; 62
    3598:	0f be       	out	0x3f, r0	; 63
    359a:	cd bf       	out	0x3d, r28	; 61
    359c:	6d 83       	std	Y+5, r22	; 0x05
    359e:	7e 83       	std	Y+6, r23	; 0x06
    35a0:	8f 83       	std	Y+7, r24	; 0x07
    35a2:	98 87       	std	Y+8, r25	; 0x08
   #if TIMER0_MODE  == TIMER0_MODE_PWM_PHASE_CORRECT
	   f32 Copy_u8OCRValue;
	   Copy_u8OCRValue=(511*Copy_u8Intensity/100);
    35a4:	6d 81       	ldd	r22, Y+5	; 0x05
    35a6:	7e 81       	ldd	r23, Y+6	; 0x06
    35a8:	8f 81       	ldd	r24, Y+7	; 0x07
    35aa:	98 85       	ldd	r25, Y+8	; 0x08
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	30 e8       	ldi	r19, 0x80	; 128
    35b0:	4f ef       	ldi	r20, 0xFF	; 255
    35b2:	53 e4       	ldi	r21, 0x43	; 67
    35b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	bc 01       	movw	r22, r24
    35be:	cd 01       	movw	r24, r26
    35c0:	20 e0       	ldi	r18, 0x00	; 0
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	48 ec       	ldi	r20, 0xC8	; 200
    35c6:	52 e4       	ldi	r21, 0x42	; 66
    35c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35cc:	dc 01       	movw	r26, r24
    35ce:	cb 01       	movw	r24, r22
    35d0:	89 83       	std	Y+1, r24	; 0x01
    35d2:	9a 83       	std	Y+2, r25	; 0x02
    35d4:	ab 83       	std	Y+3, r26	; 0x03
    35d6:	bc 83       	std	Y+4, r27	; 0x04
	   OCR0=Copy_u8OCRValue;
    35d8:	0c e5       	ldi	r16, 0x5C	; 92
    35da:	10 e0       	ldi	r17, 0x00	; 0
    35dc:	69 81       	ldd	r22, Y+1	; 0x01
    35de:	7a 81       	ldd	r23, Y+2	; 0x02
    35e0:	8b 81       	ldd	r24, Y+3	; 0x03
    35e2:	9c 81       	ldd	r25, Y+4	; 0x04
    35e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	f8 01       	movw	r30, r16
    35ee:	80 83       	st	Z, r24
   #elif TIMER0_MODE  == TIMER0_MODE_FAST_PWM
	   f32 Copy_u8OCRValue;
	   Copy_u8OCRValue=(256*Copy_u8Intensity/100);
	   OCR0=Copy_u8OCRValue;
   #endif
}
    35f0:	28 96       	adiw	r28, 0x08	; 8
    35f2:	0f b6       	in	r0, 0x3f	; 63
    35f4:	f8 94       	cli
    35f6:	de bf       	out	0x3e, r29	; 62
    35f8:	0f be       	out	0x3f, r0	; 63
    35fa:	cd bf       	out	0x3d, r28	; 61
    35fc:	cf 91       	pop	r28
    35fe:	df 91       	pop	r29
    3600:	1f 91       	pop	r17
    3602:	0f 91       	pop	r16
    3604:	08 95       	ret

00003606 <TIMER_voidTimer2Init>:
f32 TIMER2_u16Prescaller;
u32 TIMER2_f32CounterCTC;
/**********************************************************************************/

void TIMER_voidTimer2Init(void)
{
    3606:	df 93       	push	r29
    3608:	cf 93       	push	r28
    360a:	cd b7       	in	r28, 0x3d	; 61
    360c:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TIMSK,TIMSK_TOIE2);
		CLR_BIT(TIMSK,TIMSK_OCIE2);

		TCNT2=TIMER2_f32PreloodValue;
	#elif TIMER2_MODE  == TIMER2_MODE_PWM_PHASE_CORRECT
		SET_BIT(TCCR2,TCCR2_WGM20);
    360e:	a5 e4       	ldi	r26, 0x45	; 69
    3610:	b0 e0       	ldi	r27, 0x00	; 0
    3612:	e5 e4       	ldi	r30, 0x45	; 69
    3614:	f0 e0       	ldi	r31, 0x00	; 0
    3616:	80 81       	ld	r24, Z
    3618:	80 64       	ori	r24, 0x40	; 64
    361a:	8c 93       	st	X, r24
	    CLR_BIT(TCCR2,TCCR2_WGM21);
    361c:	a5 e4       	ldi	r26, 0x45	; 69
    361e:	b0 e0       	ldi	r27, 0x00	; 0
    3620:	e5 e4       	ldi	r30, 0x45	; 69
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	80 81       	ld	r24, Z
    3626:	87 7f       	andi	r24, 0xF7	; 247
    3628:	8c 93       	st	X, r24
         CLR_BIT(TCCR2,TCCR2_COM21);
    #elif  TIMER2_COMPARE_OUTPUT_MODE==TIMER2_MODE_TOGGLE
         SET_BIT(TCCR2,TCCR2_COM20);
         CLR_BIT(TCCR2,TCCR2_COM21);
    #elif  TIMER2_COMPARE_OUTPUT_MODE==TIMER2_MODE_CLEAR_OC2
         CLR_BIT(TCCR2,TCCR2_COM20);
    362a:	a5 e4       	ldi	r26, 0x45	; 69
    362c:	b0 e0       	ldi	r27, 0x00	; 0
    362e:	e5 e4       	ldi	r30, 0x45	; 69
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	80 81       	ld	r24, Z
    3634:	8f 7e       	andi	r24, 0xEF	; 239
    3636:	8c 93       	st	X, r24
         SET_BIT(TCCR2,TCCR2_COM21);
    3638:	a5 e4       	ldi	r26, 0x45	; 69
    363a:	b0 e0       	ldi	r27, 0x00	; 0
    363c:	e5 e4       	ldi	r30, 0x45	; 69
    363e:	f0 e0       	ldi	r31, 0x00	; 0
    3640:	80 81       	ld	r24, Z
    3642:	80 62       	ori	r24, 0x20	; 32
    3644:	8c 93       	st	X, r24
        CLR_BIT(TCCR2,TCCR2_CS20);
	    CLR_BIT(TCCR2,TCCR2_CS21);
	    SET_BIT(TCCR2,TCCR2_CS22);
	    TIMER2_u16Prescaller=256;
    #elif  TIMER2_CLOCK_SELECT == TIMER2_SELECT_CLK_DIV_1024
        SET_BIT(TCCR2,TCCR2_CS20);
    3646:	a5 e4       	ldi	r26, 0x45	; 69
    3648:	b0 e0       	ldi	r27, 0x00	; 0
    364a:	e5 e4       	ldi	r30, 0x45	; 69
    364c:	f0 e0       	ldi	r31, 0x00	; 0
    364e:	80 81       	ld	r24, Z
    3650:	81 60       	ori	r24, 0x01	; 1
    3652:	8c 93       	st	X, r24
	    CLR_BIT(TCCR2,TCCR2_CS21);
    3654:	a5 e4       	ldi	r26, 0x45	; 69
    3656:	b0 e0       	ldi	r27, 0x00	; 0
    3658:	e5 e4       	ldi	r30, 0x45	; 69
    365a:	f0 e0       	ldi	r31, 0x00	; 0
    365c:	80 81       	ld	r24, Z
    365e:	8d 7f       	andi	r24, 0xFD	; 253
    3660:	8c 93       	st	X, r24
	    SET_BIT(TCCR2,TCCR2_CS22);
    3662:	a5 e4       	ldi	r26, 0x45	; 69
    3664:	b0 e0       	ldi	r27, 0x00	; 0
    3666:	e5 e4       	ldi	r30, 0x45	; 69
    3668:	f0 e0       	ldi	r31, 0x00	; 0
    366a:	80 81       	ld	r24, Z
    366c:	84 60       	ori	r24, 0x04	; 4
    366e:	8c 93       	st	X, r24
	    TIMER2_u16Prescaller=1024;
    3670:	80 e0       	ldi	r24, 0x00	; 0
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	a0 e8       	ldi	r26, 0x80	; 128
    3676:	b4 e4       	ldi	r27, 0x44	; 68
    3678:	80 93 54 01 	sts	0x0154, r24
    367c:	90 93 55 01 	sts	0x0155, r25
    3680:	a0 93 56 01 	sts	0x0156, r26
    3684:	b0 93 57 01 	sts	0x0157, r27
        SET_BIT(TCCR2,TCCR2_CS20);
	    SET_BIT(TCCR2,TCCR2_CS21);
	    SET_BIT(TCCR2,TCCR2_CS22);
	    TIMER2_u16Prescaller=0;
	#endif
}
    3688:	cf 91       	pop	r28
    368a:	df 91       	pop	r29
    368c:	08 95       	ret

0000368e <TIMER_voidTimer2Delay>:
/**********************************************************************************/
void TIMER_voidTimer2Delay(u32 Copy_u32DTime,void(*Copy_pFun)(void))
{
    368e:	df 93       	push	r29
    3690:	cf 93       	push	r28
    3692:	00 d0       	rcall	.+0      	; 0x3694 <TIMER_voidTimer2Delay+0x6>
    3694:	00 d0       	rcall	.+0      	; 0x3696 <TIMER_voidTimer2Delay+0x8>
    3696:	00 d0       	rcall	.+0      	; 0x3698 <TIMER_voidTimer2Delay+0xa>
    3698:	cd b7       	in	r28, 0x3d	; 61
    369a:	de b7       	in	r29, 0x3e	; 62
    369c:	69 83       	std	Y+1, r22	; 0x01
    369e:	7a 83       	std	Y+2, r23	; 0x02
    36a0:	8b 83       	std	Y+3, r24	; 0x03
    36a2:	9c 83       	std	Y+4, r25	; 0x04
    36a4:	5e 83       	std	Y+6, r21	; 0x06
    36a6:	4d 83       	std	Y+5, r20	; 0x05
    #elif TIMER2_MODE  == TIMER2_MODE_CTC
	   f32 Local_f32TCTC=((TIMER2_CTC_OCR2_VALUE)*(TIMER2_u16Prescaller/8000UL));
	   TIMER2_f32CounterCTC=((f32)Copy_u32DTime/Local_f32TCTC);
	   TIMER2_pSetCallBack=Copy_pFun;
    #endif
}
    36a8:	26 96       	adiw	r28, 0x06	; 6
    36aa:	0f b6       	in	r0, 0x3f	; 63
    36ac:	f8 94       	cli
    36ae:	de bf       	out	0x3e, r29	; 62
    36b0:	0f be       	out	0x3f, r0	; 63
    36b2:	cd bf       	out	0x3d, r28	; 61
    36b4:	cf 91       	pop	r28
    36b6:	df 91       	pop	r29
    36b8:	08 95       	ret

000036ba <TIMER_voidTimer2GeneratePWM>:
/**********************************************************************************/
void TIMER_voidTimer2GeneratePWM(f32 Copy_u8Intensity)
{
    36ba:	0f 93       	push	r16
    36bc:	1f 93       	push	r17
    36be:	df 93       	push	r29
    36c0:	cf 93       	push	r28
    36c2:	cd b7       	in	r28, 0x3d	; 61
    36c4:	de b7       	in	r29, 0x3e	; 62
    36c6:	28 97       	sbiw	r28, 0x08	; 8
    36c8:	0f b6       	in	r0, 0x3f	; 63
    36ca:	f8 94       	cli
    36cc:	de bf       	out	0x3e, r29	; 62
    36ce:	0f be       	out	0x3f, r0	; 63
    36d0:	cd bf       	out	0x3d, r28	; 61
    36d2:	6d 83       	std	Y+5, r22	; 0x05
    36d4:	7e 83       	std	Y+6, r23	; 0x06
    36d6:	8f 83       	std	Y+7, r24	; 0x07
    36d8:	98 87       	std	Y+8, r25	; 0x08
   #if TIMER2_MODE  == TIMER2_MODE_PWM_PHASE_CORRECT
	   f32 Copy_u8OCRValue;
	   Copy_u8OCRValue=(511*Copy_u8Intensity/100);
    36da:	6d 81       	ldd	r22, Y+5	; 0x05
    36dc:	7e 81       	ldd	r23, Y+6	; 0x06
    36de:	8f 81       	ldd	r24, Y+7	; 0x07
    36e0:	98 85       	ldd	r25, Y+8	; 0x08
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	30 e8       	ldi	r19, 0x80	; 128
    36e6:	4f ef       	ldi	r20, 0xFF	; 255
    36e8:	53 e4       	ldi	r21, 0x43	; 67
    36ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	bc 01       	movw	r22, r24
    36f4:	cd 01       	movw	r24, r26
    36f6:	20 e0       	ldi	r18, 0x00	; 0
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	48 ec       	ldi	r20, 0xC8	; 200
    36fc:	52 e4       	ldi	r21, 0x42	; 66
    36fe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3702:	dc 01       	movw	r26, r24
    3704:	cb 01       	movw	r24, r22
    3706:	89 83       	std	Y+1, r24	; 0x01
    3708:	9a 83       	std	Y+2, r25	; 0x02
    370a:	ab 83       	std	Y+3, r26	; 0x03
    370c:	bc 83       	std	Y+4, r27	; 0x04
	   OCR2=Copy_u8OCRValue;
    370e:	03 e4       	ldi	r16, 0x43	; 67
    3710:	10 e0       	ldi	r17, 0x00	; 0
    3712:	69 81       	ldd	r22, Y+1	; 0x01
    3714:	7a 81       	ldd	r23, Y+2	; 0x02
    3716:	8b 81       	ldd	r24, Y+3	; 0x03
    3718:	9c 81       	ldd	r25, Y+4	; 0x04
    371a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	f8 01       	movw	r30, r16
    3724:	80 83       	st	Z, r24
   #elif TIMER2_MODE  == TIMER2_MODE_FAST_PWM
	   f32 Copy_u8OCRValue;
	   Copy_u8OCRValue=(256*Copy_u8Intensity/100);
	   OCR2=Copy_u8OCRValue;
   #endif
}
    3726:	28 96       	adiw	r28, 0x08	; 8
    3728:	0f b6       	in	r0, 0x3f	; 63
    372a:	f8 94       	cli
    372c:	de bf       	out	0x3e, r29	; 62
    372e:	0f be       	out	0x3f, r0	; 63
    3730:	cd bf       	out	0x3d, r28	; 61
    3732:	cf 91       	pop	r28
    3734:	df 91       	pop	r29
    3736:	1f 91       	pop	r17
    3738:	0f 91       	pop	r16
    373a:	08 95       	ret

0000373c <__vector_5>:
/**********************************************************************************/
void __vector_5 (void)
{
    373c:	1f 92       	push	r1
    373e:	0f 92       	push	r0
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	0f 92       	push	r0
    3744:	11 24       	eor	r1, r1
    3746:	2f 93       	push	r18
    3748:	3f 93       	push	r19
    374a:	4f 93       	push	r20
    374c:	5f 93       	push	r21
    374e:	6f 93       	push	r22
    3750:	7f 93       	push	r23
    3752:	8f 93       	push	r24
    3754:	9f 93       	push	r25
    3756:	af 93       	push	r26
    3758:	bf 93       	push	r27
    375a:	ef 93       	push	r30
    375c:	ff 93       	push	r31
    375e:	df 93       	push	r29
    3760:	cf 93       	push	r28
    3762:	cd b7       	in	r28, 0x3d	; 61
    3764:	de b7       	in	r29, 0x3e	; 62
	   static u16 Local_u16Counter=0;
	   Local_u16Counter++;
    3766:	80 91 39 01 	lds	r24, 0x0139
    376a:	90 91 3a 01 	lds	r25, 0x013A
    376e:	01 96       	adiw	r24, 0x01	; 1
    3770:	90 93 3a 01 	sts	0x013A, r25
    3774:	80 93 39 01 	sts	0x0139, r24
	   if(TIMER2_f32OVCounter==Local_u16Counter)
    3778:	80 91 39 01 	lds	r24, 0x0139
    377c:	90 91 3a 01 	lds	r25, 0x013A
    3780:	9c 01       	movw	r18, r24
    3782:	40 e0       	ldi	r20, 0x00	; 0
    3784:	50 e0       	ldi	r21, 0x00	; 0
    3786:	80 91 50 01 	lds	r24, 0x0150
    378a:	90 91 51 01 	lds	r25, 0x0151
    378e:	a0 91 52 01 	lds	r26, 0x0152
    3792:	b0 91 53 01 	lds	r27, 0x0153
    3796:	28 17       	cp	r18, r24
    3798:	39 07       	cpc	r19, r25
    379a:	4a 07       	cpc	r20, r26
    379c:	5b 07       	cpc	r21, r27
    379e:	a1 f4       	brne	.+40     	; 0x37c8 <__vector_5+0x8c>
	   {
		   TCNT2=TIMER2_f32PreloodValue;
    37a0:	e4 e4       	ldi	r30, 0x44	; 68
    37a2:	f0 e0       	ldi	r31, 0x00	; 0
    37a4:	80 91 60 01 	lds	r24, 0x0160
    37a8:	90 91 61 01 	lds	r25, 0x0161
    37ac:	a0 91 62 01 	lds	r26, 0x0162
    37b0:	b0 91 63 01 	lds	r27, 0x0163
    37b4:	80 83       	st	Z, r24
		   TIMER2_pSetCallBack();
    37b6:	e0 91 3f 01 	lds	r30, 0x013F
    37ba:	f0 91 40 01 	lds	r31, 0x0140
    37be:	09 95       	icall
		   Local_u16Counter=0;
    37c0:	10 92 3a 01 	sts	0x013A, r1
    37c4:	10 92 39 01 	sts	0x0139, r1
	   }
}
    37c8:	cf 91       	pop	r28
    37ca:	df 91       	pop	r29
    37cc:	ff 91       	pop	r31
    37ce:	ef 91       	pop	r30
    37d0:	bf 91       	pop	r27
    37d2:	af 91       	pop	r26
    37d4:	9f 91       	pop	r25
    37d6:	8f 91       	pop	r24
    37d8:	7f 91       	pop	r23
    37da:	6f 91       	pop	r22
    37dc:	5f 91       	pop	r21
    37de:	4f 91       	pop	r20
    37e0:	3f 91       	pop	r19
    37e2:	2f 91       	pop	r18
    37e4:	0f 90       	pop	r0
    37e6:	0f be       	out	0x3f, r0	; 63
    37e8:	0f 90       	pop	r0
    37ea:	1f 90       	pop	r1
    37ec:	18 95       	reti

000037ee <__vector_4>:
void __vector_4 (void)
{
    37ee:	1f 92       	push	r1
    37f0:	0f 92       	push	r0
    37f2:	0f b6       	in	r0, 0x3f	; 63
    37f4:	0f 92       	push	r0
    37f6:	11 24       	eor	r1, r1
    37f8:	2f 93       	push	r18
    37fa:	3f 93       	push	r19
    37fc:	4f 93       	push	r20
    37fe:	5f 93       	push	r21
    3800:	6f 93       	push	r22
    3802:	7f 93       	push	r23
    3804:	8f 93       	push	r24
    3806:	9f 93       	push	r25
    3808:	af 93       	push	r26
    380a:	bf 93       	push	r27
    380c:	ef 93       	push	r30
    380e:	ff 93       	push	r31
    3810:	df 93       	push	r29
    3812:	cf 93       	push	r28
    3814:	cd b7       	in	r28, 0x3d	; 61
    3816:	de b7       	in	r29, 0x3e	; 62
	   static u16 Local_u8Counter=0;
	   Local_u8Counter++;
    3818:	80 91 3b 01 	lds	r24, 0x013B
    381c:	90 91 3c 01 	lds	r25, 0x013C
    3820:	01 96       	adiw	r24, 0x01	; 1
    3822:	90 93 3c 01 	sts	0x013C, r25
    3826:	80 93 3b 01 	sts	0x013B, r24
	   if(TIMER2_f32CounterCTC==Local_u8Counter)
    382a:	80 91 3b 01 	lds	r24, 0x013B
    382e:	90 91 3c 01 	lds	r25, 0x013C
    3832:	9c 01       	movw	r18, r24
    3834:	40 e0       	ldi	r20, 0x00	; 0
    3836:	50 e0       	ldi	r21, 0x00	; 0
    3838:	80 91 5c 01 	lds	r24, 0x015C
    383c:	90 91 5d 01 	lds	r25, 0x015D
    3840:	a0 91 5e 01 	lds	r26, 0x015E
    3844:	b0 91 5f 01 	lds	r27, 0x015F
    3848:	28 17       	cp	r18, r24
    384a:	39 07       	cpc	r19, r25
    384c:	4a 07       	cpc	r20, r26
    384e:	5b 07       	cpc	r21, r27
    3850:	49 f4       	brne	.+18     	; 0x3864 <__vector_4+0x76>
	   {
		   TIMER2_pSetCallBack();
    3852:	e0 91 3f 01 	lds	r30, 0x013F
    3856:	f0 91 40 01 	lds	r31, 0x0140
    385a:	09 95       	icall
		   Local_u8Counter=0;
    385c:	10 92 3c 01 	sts	0x013C, r1
    3860:	10 92 3b 01 	sts	0x013B, r1
	   }
}
    3864:	cf 91       	pop	r28
    3866:	df 91       	pop	r29
    3868:	ff 91       	pop	r31
    386a:	ef 91       	pop	r30
    386c:	bf 91       	pop	r27
    386e:	af 91       	pop	r26
    3870:	9f 91       	pop	r25
    3872:	8f 91       	pop	r24
    3874:	7f 91       	pop	r23
    3876:	6f 91       	pop	r22
    3878:	5f 91       	pop	r21
    387a:	4f 91       	pop	r20
    387c:	3f 91       	pop	r19
    387e:	2f 91       	pop	r18
    3880:	0f 90       	pop	r0
    3882:	0f be       	out	0x3f, r0	; 63
    3884:	0f 90       	pop	r0
    3886:	1f 90       	pop	r1
    3888:	18 95       	reti

0000388a <TIMER_voidTimer1Enable>:
*                                                               Timer 1                                                              *
**************************************************************************************************************************************/
u8 TIMER1_u8MODEPWM;
/************************************************************************************************************************************/
void TIMER_voidTimer1Enable(u8 Copy_u8Timer1Mode,u8 Copy_u8Timer1ModeChannelA,u8 Copy_u8Timer1ModeChannelB)
{
    388a:	df 93       	push	r29
    388c:	cf 93       	push	r28
    388e:	cd b7       	in	r28, 0x3d	; 61
    3890:	de b7       	in	r29, 0x3e	; 62
    3892:	29 97       	sbiw	r28, 0x09	; 9
    3894:	0f b6       	in	r0, 0x3f	; 63
    3896:	f8 94       	cli
    3898:	de bf       	out	0x3e, r29	; 62
    389a:	0f be       	out	0x3f, r0	; 63
    389c:	cd bf       	out	0x3d, r28	; 61
    389e:	89 83       	std	Y+1, r24	; 0x01
    38a0:	6a 83       	std	Y+2, r22	; 0x02
    38a2:	4b 83       	std	Y+3, r20	; 0x03
switch(Copy_u8Timer1Mode)
    38a4:	89 81       	ldd	r24, Y+1	; 0x01
    38a6:	28 2f       	mov	r18, r24
    38a8:	30 e0       	ldi	r19, 0x00	; 0
    38aa:	39 87       	std	Y+9, r19	; 0x09
    38ac:	28 87       	std	Y+8, r18	; 0x08
    38ae:	88 85       	ldd	r24, Y+8	; 0x08
    38b0:	99 85       	ldd	r25, Y+9	; 0x09
    38b2:	87 30       	cpi	r24, 0x07	; 7
    38b4:	91 05       	cpc	r25, r1
    38b6:	09 f4       	brne	.+2      	; 0x38ba <TIMER_voidTimer1Enable+0x30>
    38b8:	6b c1       	rjmp	.+726    	; 0x3b90 <TIMER_voidTimer1Enable+0x306>
    38ba:	28 85       	ldd	r18, Y+8	; 0x08
    38bc:	39 85       	ldd	r19, Y+9	; 0x09
    38be:	28 30       	cpi	r18, 0x08	; 8
    38c0:	31 05       	cpc	r19, r1
    38c2:	4c f5       	brge	.+82     	; 0x3916 <TIMER_voidTimer1Enable+0x8c>
    38c4:	88 85       	ldd	r24, Y+8	; 0x08
    38c6:	99 85       	ldd	r25, Y+9	; 0x09
    38c8:	83 30       	cpi	r24, 0x03	; 3
    38ca:	91 05       	cpc	r25, r1
    38cc:	09 f4       	brne	.+2      	; 0x38d0 <TIMER_voidTimer1Enable+0x46>
    38ce:	c7 c0       	rjmp	.+398    	; 0x3a5e <TIMER_voidTimer1Enable+0x1d4>
    38d0:	28 85       	ldd	r18, Y+8	; 0x08
    38d2:	39 85       	ldd	r19, Y+9	; 0x09
    38d4:	24 30       	cpi	r18, 0x04	; 4
    38d6:	31 05       	cpc	r19, r1
    38d8:	8c f4       	brge	.+34     	; 0x38fc <TIMER_voidTimer1Enable+0x72>
    38da:	88 85       	ldd	r24, Y+8	; 0x08
    38dc:	99 85       	ldd	r25, Y+9	; 0x09
    38de:	81 30       	cpi	r24, 0x01	; 1
    38e0:	91 05       	cpc	r25, r1
    38e2:	09 f4       	brne	.+2      	; 0x38e6 <TIMER_voidTimer1Enable+0x5c>
    38e4:	7c c0       	rjmp	.+248    	; 0x39de <TIMER_voidTimer1Enable+0x154>
    38e6:	28 85       	ldd	r18, Y+8	; 0x08
    38e8:	39 85       	ldd	r19, Y+9	; 0x09
    38ea:	22 30       	cpi	r18, 0x02	; 2
    38ec:	31 05       	cpc	r19, r1
    38ee:	0c f0       	brlt	.+2      	; 0x38f2 <TIMER_voidTimer1Enable+0x68>
    38f0:	96 c0       	rjmp	.+300    	; 0x3a1e <TIMER_voidTimer1Enable+0x194>
    38f2:	88 85       	ldd	r24, Y+8	; 0x08
    38f4:	99 85       	ldd	r25, Y+9	; 0x09
    38f6:	00 97       	sbiw	r24, 0x00	; 0
    38f8:	c9 f1       	breq	.+114    	; 0x396c <TIMER_voidTimer1Enable+0xe2>
    38fa:	50 c2       	rjmp	.+1184   	; 0x3d9c <TIMER_voidTimer1Enable+0x512>
    38fc:	28 85       	ldd	r18, Y+8	; 0x08
    38fe:	39 85       	ldd	r19, Y+9	; 0x09
    3900:	25 30       	cpi	r18, 0x05	; 5
    3902:	31 05       	cpc	r19, r1
    3904:	09 f4       	brne	.+2      	; 0x3908 <TIMER_voidTimer1Enable+0x7e>
    3906:	04 c1       	rjmp	.+520    	; 0x3b10 <TIMER_voidTimer1Enable+0x286>
    3908:	88 85       	ldd	r24, Y+8	; 0x08
    390a:	99 85       	ldd	r25, Y+9	; 0x09
    390c:	86 30       	cpi	r24, 0x06	; 6
    390e:	91 05       	cpc	r25, r1
    3910:	0c f0       	brlt	.+2      	; 0x3914 <TIMER_voidTimer1Enable+0x8a>
    3912:	1e c1       	rjmp	.+572    	; 0x3b50 <TIMER_voidTimer1Enable+0x2c6>
    3914:	c4 c0       	rjmp	.+392    	; 0x3a9e <TIMER_voidTimer1Enable+0x214>
    3916:	28 85       	ldd	r18, Y+8	; 0x08
    3918:	39 85       	ldd	r19, Y+9	; 0x09
    391a:	2b 30       	cpi	r18, 0x0B	; 11
    391c:	31 05       	cpc	r19, r1
    391e:	09 f4       	brne	.+2      	; 0x3922 <TIMER_voidTimer1Enable+0x98>
    3920:	ae c1       	rjmp	.+860    	; 0x3c7e <TIMER_voidTimer1Enable+0x3f4>
    3922:	88 85       	ldd	r24, Y+8	; 0x08
    3924:	99 85       	ldd	r25, Y+9	; 0x09
    3926:	8c 30       	cpi	r24, 0x0C	; 12
    3928:	91 05       	cpc	r25, r1
    392a:	6c f4       	brge	.+26     	; 0x3946 <TIMER_voidTimer1Enable+0xbc>
    392c:	28 85       	ldd	r18, Y+8	; 0x08
    392e:	39 85       	ldd	r19, Y+9	; 0x09
    3930:	29 30       	cpi	r18, 0x09	; 9
    3932:	31 05       	cpc	r19, r1
    3934:	09 f4       	brne	.+2      	; 0x3938 <TIMER_voidTimer1Enable+0xae>
    3936:	69 c1       	rjmp	.+722    	; 0x3c0a <TIMER_voidTimer1Enable+0x380>
    3938:	88 85       	ldd	r24, Y+8	; 0x08
    393a:	99 85       	ldd	r25, Y+9	; 0x09
    393c:	8a 30       	cpi	r24, 0x0A	; 10
    393e:	91 05       	cpc	r25, r1
    3940:	0c f0       	brlt	.+2      	; 0x3944 <TIMER_voidTimer1Enable+0xba>
    3942:	80 c1       	rjmp	.+768    	; 0x3c44 <TIMER_voidTimer1Enable+0x3ba>
    3944:	45 c1       	rjmp	.+650    	; 0x3bd0 <TIMER_voidTimer1Enable+0x346>
    3946:	28 85       	ldd	r18, Y+8	; 0x08
    3948:	39 85       	ldd	r19, Y+9	; 0x09
    394a:	2e 30       	cpi	r18, 0x0E	; 14
    394c:	31 05       	cpc	r19, r1
    394e:	09 f4       	brne	.+2      	; 0x3952 <TIMER_voidTimer1Enable+0xc8>
    3950:	ec c1       	rjmp	.+984    	; 0x3d2a <TIMER_voidTimer1Enable+0x4a0>
    3952:	88 85       	ldd	r24, Y+8	; 0x08
    3954:	99 85       	ldd	r25, Y+9	; 0x09
    3956:	8f 30       	cpi	r24, 0x0F	; 15
    3958:	91 05       	cpc	r25, r1
    395a:	09 f4       	brne	.+2      	; 0x395e <TIMER_voidTimer1Enable+0xd4>
    395c:	03 c2       	rjmp	.+1030   	; 0x3d64 <TIMER_voidTimer1Enable+0x4da>
    395e:	28 85       	ldd	r18, Y+8	; 0x08
    3960:	39 85       	ldd	r19, Y+9	; 0x09
    3962:	2c 30       	cpi	r18, 0x0C	; 12
    3964:	31 05       	cpc	r19, r1
    3966:	09 f4       	brne	.+2      	; 0x396a <TIMER_voidTimer1Enable+0xe0>
    3968:	a7 c1       	rjmp	.+846    	; 0x3cb8 <TIMER_voidTimer1Enable+0x42e>
    396a:	18 c2       	rjmp	.+1072   	; 0x3d9c <TIMER_voidTimer1Enable+0x512>
{
   case  TIMER1_MODE_NORMAL :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    396c:	af e4       	ldi	r26, 0x4F	; 79
    396e:	b0 e0       	ldi	r27, 0x00	; 0
    3970:	ef e4       	ldi	r30, 0x4F	; 79
    3972:	f0 e0       	ldi	r31, 0x00	; 0
    3974:	80 81       	ld	r24, Z
    3976:	8e 7f       	andi	r24, 0xFE	; 254
    3978:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    397a:	af e4       	ldi	r26, 0x4F	; 79
    397c:	b0 e0       	ldi	r27, 0x00	; 0
    397e:	ef e4       	ldi	r30, 0x4F	; 79
    3980:	f0 e0       	ldi	r31, 0x00	; 0
    3982:	80 81       	ld	r24, Z
    3984:	8d 7f       	andi	r24, 0xFD	; 253
    3986:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3988:	ae e4       	ldi	r26, 0x4E	; 78
    398a:	b0 e0       	ldi	r27, 0x00	; 0
    398c:	ee e4       	ldi	r30, 0x4E	; 78
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	80 81       	ld	r24, Z
    3992:	87 7f       	andi	r24, 0xF7	; 247
    3994:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3996:	ae e4       	ldi	r26, 0x4E	; 78
    3998:	b0 e0       	ldi	r27, 0x00	; 0
    399a:	ee e4       	ldi	r30, 0x4E	; 78
    399c:	f0 e0       	ldi	r31, 0x00	; 0
    399e:	80 81       	ld	r24, Z
    39a0:	8f 7e       	andi	r24, 0xEF	; 239
    39a2:	8c 93       	st	X, r24

		SET_BIT(TIMSK,TIMSK_TOIE1);
    39a4:	a9 e5       	ldi	r26, 0x59	; 89
    39a6:	b0 e0       	ldi	r27, 0x00	; 0
    39a8:	e9 e5       	ldi	r30, 0x59	; 89
    39aa:	f0 e0       	ldi	r31, 0x00	; 0
    39ac:	80 81       	ld	r24, Z
    39ae:	84 60       	ori	r24, 0x04	; 4
    39b0:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_OCIE1B);
    39b2:	a9 e5       	ldi	r26, 0x59	; 89
    39b4:	b0 e0       	ldi	r27, 0x00	; 0
    39b6:	e9 e5       	ldi	r30, 0x59	; 89
    39b8:	f0 e0       	ldi	r31, 0x00	; 0
    39ba:	80 81       	ld	r24, Z
    39bc:	87 7f       	andi	r24, 0xF7	; 247
    39be:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_OCIE1A);
    39c0:	a9 e5       	ldi	r26, 0x59	; 89
    39c2:	b0 e0       	ldi	r27, 0x00	; 0
    39c4:	e9 e5       	ldi	r30, 0x59	; 89
    39c6:	f0 e0       	ldi	r31, 0x00	; 0
    39c8:	80 81       	ld	r24, Z
    39ca:	8f 7e       	andi	r24, 0xEF	; 239
    39cc:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    39ce:	a9 e5       	ldi	r26, 0x59	; 89
    39d0:	b0 e0       	ldi	r27, 0x00	; 0
    39d2:	e9 e5       	ldi	r30, 0x59	; 89
    39d4:	f0 e0       	ldi	r31, 0x00	; 0
    39d6:	80 81       	ld	r24, Z
    39d8:	8f 7d       	andi	r24, 0xDF	; 223
    39da:	8c 93       	st	X, r24
    39dc:	df c1       	rjmp	.+958    	; 0x3d9c <TIMER_voidTimer1Enable+0x512>

		//TIMER_u16_TCNT1=TIMER_f32Timer1PreloodValue;
   break;
   case TIMER1_MODE_PWM_PHASE_CORRECT_8 :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    39de:	af e4       	ldi	r26, 0x4F	; 79
    39e0:	b0 e0       	ldi	r27, 0x00	; 0
    39e2:	ef e4       	ldi	r30, 0x4F	; 79
    39e4:	f0 e0       	ldi	r31, 0x00	; 0
    39e6:	80 81       	ld	r24, Z
    39e8:	81 60       	ori	r24, 0x01	; 1
    39ea:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    39ec:	af e4       	ldi	r26, 0x4F	; 79
    39ee:	b0 e0       	ldi	r27, 0x00	; 0
    39f0:	ef e4       	ldi	r30, 0x4F	; 79
    39f2:	f0 e0       	ldi	r31, 0x00	; 0
    39f4:	80 81       	ld	r24, Z
    39f6:	8d 7f       	andi	r24, 0xFD	; 253
    39f8:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    39fa:	ae e4       	ldi	r26, 0x4E	; 78
    39fc:	b0 e0       	ldi	r27, 0x00	; 0
    39fe:	ee e4       	ldi	r30, 0x4E	; 78
    3a00:	f0 e0       	ldi	r31, 0x00	; 0
    3a02:	80 81       	ld	r24, Z
    3a04:	87 7f       	andi	r24, 0xF7	; 247
    3a06:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3a08:	ae e4       	ldi	r26, 0x4E	; 78
    3a0a:	b0 e0       	ldi	r27, 0x00	; 0
    3a0c:	ee e4       	ldi	r30, 0x4E	; 78
    3a0e:	f0 e0       	ldi	r31, 0x00	; 0
    3a10:	80 81       	ld	r24, Z
    3a12:	8f 7e       	andi	r24, 0xEF	; 239
    3a14:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_8;
    3a16:	81 e0       	ldi	r24, 0x01	; 1
    3a18:	80 93 43 01 	sts	0x0143, r24
    3a1c:	bf c1       	rjmp	.+894    	; 0x3d9c <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_PWM_PHASE_CORRECT_9 :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3a1e:	af e4       	ldi	r26, 0x4F	; 79
    3a20:	b0 e0       	ldi	r27, 0x00	; 0
    3a22:	ef e4       	ldi	r30, 0x4F	; 79
    3a24:	f0 e0       	ldi	r31, 0x00	; 0
    3a26:	80 81       	ld	r24, Z
    3a28:	8e 7f       	andi	r24, 0xFE	; 254
    3a2a:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    3a2c:	af e4       	ldi	r26, 0x4F	; 79
    3a2e:	b0 e0       	ldi	r27, 0x00	; 0
    3a30:	ef e4       	ldi	r30, 0x4F	; 79
    3a32:	f0 e0       	ldi	r31, 0x00	; 0
    3a34:	80 81       	ld	r24, Z
    3a36:	82 60       	ori	r24, 0x02	; 2
    3a38:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3a3a:	ae e4       	ldi	r26, 0x4E	; 78
    3a3c:	b0 e0       	ldi	r27, 0x00	; 0
    3a3e:	ee e4       	ldi	r30, 0x4E	; 78
    3a40:	f0 e0       	ldi	r31, 0x00	; 0
    3a42:	80 81       	ld	r24, Z
    3a44:	87 7f       	andi	r24, 0xF7	; 247
    3a46:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3a48:	ae e4       	ldi	r26, 0x4E	; 78
    3a4a:	b0 e0       	ldi	r27, 0x00	; 0
    3a4c:	ee e4       	ldi	r30, 0x4E	; 78
    3a4e:	f0 e0       	ldi	r31, 0x00	; 0
    3a50:	80 81       	ld	r24, Z
    3a52:	8f 7e       	andi	r24, 0xEF	; 239
    3a54:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_9;
    3a56:	82 e0       	ldi	r24, 0x02	; 2
    3a58:	80 93 43 01 	sts	0x0143, r24
    3a5c:	9f c1       	rjmp	.+830    	; 0x3d9c <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_PWM_PHASE_CORRECT_10 :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    3a5e:	af e4       	ldi	r26, 0x4F	; 79
    3a60:	b0 e0       	ldi	r27, 0x00	; 0
    3a62:	ef e4       	ldi	r30, 0x4F	; 79
    3a64:	f0 e0       	ldi	r31, 0x00	; 0
    3a66:	80 81       	ld	r24, Z
    3a68:	81 60       	ori	r24, 0x01	; 1
    3a6a:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    3a6c:	af e4       	ldi	r26, 0x4F	; 79
    3a6e:	b0 e0       	ldi	r27, 0x00	; 0
    3a70:	ef e4       	ldi	r30, 0x4F	; 79
    3a72:	f0 e0       	ldi	r31, 0x00	; 0
    3a74:	80 81       	ld	r24, Z
    3a76:	82 60       	ori	r24, 0x02	; 2
    3a78:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3a7a:	ae e4       	ldi	r26, 0x4E	; 78
    3a7c:	b0 e0       	ldi	r27, 0x00	; 0
    3a7e:	ee e4       	ldi	r30, 0x4E	; 78
    3a80:	f0 e0       	ldi	r31, 0x00	; 0
    3a82:	80 81       	ld	r24, Z
    3a84:	87 7f       	andi	r24, 0xF7	; 247
    3a86:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3a88:	ae e4       	ldi	r26, 0x4E	; 78
    3a8a:	b0 e0       	ldi	r27, 0x00	; 0
    3a8c:	ee e4       	ldi	r30, 0x4E	; 78
    3a8e:	f0 e0       	ldi	r31, 0x00	; 0
    3a90:	80 81       	ld	r24, Z
    3a92:	8f 7e       	andi	r24, 0xEF	; 239
    3a94:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_10;
    3a96:	83 e0       	ldi	r24, 0x03	; 3
    3a98:	80 93 43 01 	sts	0x0143, r24
    3a9c:	7f c1       	rjmp	.+766    	; 0x3d9c <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_CTC_OCR1A :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3a9e:	af e4       	ldi	r26, 0x4F	; 79
    3aa0:	b0 e0       	ldi	r27, 0x00	; 0
    3aa2:	ef e4       	ldi	r30, 0x4F	; 79
    3aa4:	f0 e0       	ldi	r31, 0x00	; 0
    3aa6:	80 81       	ld	r24, Z
    3aa8:	8e 7f       	andi	r24, 0xFE	; 254
    3aaa:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3aac:	af e4       	ldi	r26, 0x4F	; 79
    3aae:	b0 e0       	ldi	r27, 0x00	; 0
    3ab0:	ef e4       	ldi	r30, 0x4F	; 79
    3ab2:	f0 e0       	ldi	r31, 0x00	; 0
    3ab4:	80 81       	ld	r24, Z
    3ab6:	8d 7f       	andi	r24, 0xFD	; 253
    3ab8:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    3aba:	ae e4       	ldi	r26, 0x4E	; 78
    3abc:	b0 e0       	ldi	r27, 0x00	; 0
    3abe:	ee e4       	ldi	r30, 0x4E	; 78
    3ac0:	f0 e0       	ldi	r31, 0x00	; 0
    3ac2:	80 81       	ld	r24, Z
    3ac4:	88 60       	ori	r24, 0x08	; 8
    3ac6:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3ac8:	ae e4       	ldi	r26, 0x4E	; 78
    3aca:	b0 e0       	ldi	r27, 0x00	; 0
    3acc:	ee e4       	ldi	r30, 0x4E	; 78
    3ace:	f0 e0       	ldi	r31, 0x00	; 0
    3ad0:	80 81       	ld	r24, Z
    3ad2:	8f 7e       	andi	r24, 0xEF	; 239
    3ad4:	8c 93       	st	X, r24

	   CLR_BIT(TIMSK,TIMSK_TOIE1);
    3ad6:	a9 e5       	ldi	r26, 0x59	; 89
    3ad8:	b0 e0       	ldi	r27, 0x00	; 0
    3ada:	e9 e5       	ldi	r30, 0x59	; 89
    3adc:	f0 e0       	ldi	r31, 0x00	; 0
    3ade:	80 81       	ld	r24, Z
    3ae0:	8b 7f       	andi	r24, 0xFB	; 251
    3ae2:	8c 93       	st	X, r24
	   CLR_BIT(TIMSK,TIMSK_OCIE1B);
    3ae4:	a9 e5       	ldi	r26, 0x59	; 89
    3ae6:	b0 e0       	ldi	r27, 0x00	; 0
    3ae8:	e9 e5       	ldi	r30, 0x59	; 89
    3aea:	f0 e0       	ldi	r31, 0x00	; 0
    3aec:	80 81       	ld	r24, Z
    3aee:	87 7f       	andi	r24, 0xF7	; 247
    3af0:	8c 93       	st	X, r24
	   SET_BIT(TIMSK,TIMSK_OCIE1A);
    3af2:	a9 e5       	ldi	r26, 0x59	; 89
    3af4:	b0 e0       	ldi	r27, 0x00	; 0
    3af6:	e9 e5       	ldi	r30, 0x59	; 89
    3af8:	f0 e0       	ldi	r31, 0x00	; 0
    3afa:	80 81       	ld	r24, Z
    3afc:	80 61       	ori	r24, 0x10	; 16
    3afe:	8c 93       	st	X, r24
	   CLR_BIT(TIMSK,TIMSK_TICIE1);
    3b00:	a9 e5       	ldi	r26, 0x59	; 89
    3b02:	b0 e0       	ldi	r27, 0x00	; 0
    3b04:	e9 e5       	ldi	r30, 0x59	; 89
    3b06:	f0 e0       	ldi	r31, 0x00	; 0
    3b08:	80 81       	ld	r24, Z
    3b0a:	8f 7d       	andi	r24, 0xDF	; 223
    3b0c:	8c 93       	st	X, r24
    3b0e:	46 c1       	rjmp	.+652    	; 0x3d9c <TIMER_voidTimer1Enable+0x512>

   break;
   case TIMER1_MODE_FAST_PWM_8 :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    3b10:	af e4       	ldi	r26, 0x4F	; 79
    3b12:	b0 e0       	ldi	r27, 0x00	; 0
    3b14:	ef e4       	ldi	r30, 0x4F	; 79
    3b16:	f0 e0       	ldi	r31, 0x00	; 0
    3b18:	80 81       	ld	r24, Z
    3b1a:	81 60       	ori	r24, 0x01	; 1
    3b1c:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3b1e:	af e4       	ldi	r26, 0x4F	; 79
    3b20:	b0 e0       	ldi	r27, 0x00	; 0
    3b22:	ef e4       	ldi	r30, 0x4F	; 79
    3b24:	f0 e0       	ldi	r31, 0x00	; 0
    3b26:	80 81       	ld	r24, Z
    3b28:	8d 7f       	andi	r24, 0xFD	; 253
    3b2a:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    3b2c:	ae e4       	ldi	r26, 0x4E	; 78
    3b2e:	b0 e0       	ldi	r27, 0x00	; 0
    3b30:	ee e4       	ldi	r30, 0x4E	; 78
    3b32:	f0 e0       	ldi	r31, 0x00	; 0
    3b34:	80 81       	ld	r24, Z
    3b36:	88 60       	ori	r24, 0x08	; 8
    3b38:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3b3a:	ae e4       	ldi	r26, 0x4E	; 78
    3b3c:	b0 e0       	ldi	r27, 0x00	; 0
    3b3e:	ee e4       	ldi	r30, 0x4E	; 78
    3b40:	f0 e0       	ldi	r31, 0x00	; 0
    3b42:	80 81       	ld	r24, Z
    3b44:	8f 7e       	andi	r24, 0xEF	; 239
    3b46:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_8;
    3b48:	85 e0       	ldi	r24, 0x05	; 5
    3b4a:	80 93 43 01 	sts	0x0143, r24
    3b4e:	26 c1       	rjmp	.+588    	; 0x3d9c <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_FAST_PWM_9 :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3b50:	af e4       	ldi	r26, 0x4F	; 79
    3b52:	b0 e0       	ldi	r27, 0x00	; 0
    3b54:	ef e4       	ldi	r30, 0x4F	; 79
    3b56:	f0 e0       	ldi	r31, 0x00	; 0
    3b58:	80 81       	ld	r24, Z
    3b5a:	8e 7f       	andi	r24, 0xFE	; 254
    3b5c:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    3b5e:	af e4       	ldi	r26, 0x4F	; 79
    3b60:	b0 e0       	ldi	r27, 0x00	; 0
    3b62:	ef e4       	ldi	r30, 0x4F	; 79
    3b64:	f0 e0       	ldi	r31, 0x00	; 0
    3b66:	80 81       	ld	r24, Z
    3b68:	82 60       	ori	r24, 0x02	; 2
    3b6a:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    3b6c:	ae e4       	ldi	r26, 0x4E	; 78
    3b6e:	b0 e0       	ldi	r27, 0x00	; 0
    3b70:	ee e4       	ldi	r30, 0x4E	; 78
    3b72:	f0 e0       	ldi	r31, 0x00	; 0
    3b74:	80 81       	ld	r24, Z
    3b76:	88 60       	ori	r24, 0x08	; 8
    3b78:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3b7a:	ae e4       	ldi	r26, 0x4E	; 78
    3b7c:	b0 e0       	ldi	r27, 0x00	; 0
    3b7e:	ee e4       	ldi	r30, 0x4E	; 78
    3b80:	f0 e0       	ldi	r31, 0x00	; 0
    3b82:	80 81       	ld	r24, Z
    3b84:	8f 7e       	andi	r24, 0xEF	; 239
    3b86:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_9;
    3b88:	86 e0       	ldi	r24, 0x06	; 6
    3b8a:	80 93 43 01 	sts	0x0143, r24
    3b8e:	06 c1       	rjmp	.+524    	; 0x3d9c <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_FAST_PWM_10 :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    3b90:	af e4       	ldi	r26, 0x4F	; 79
    3b92:	b0 e0       	ldi	r27, 0x00	; 0
    3b94:	ef e4       	ldi	r30, 0x4F	; 79
    3b96:	f0 e0       	ldi	r31, 0x00	; 0
    3b98:	80 81       	ld	r24, Z
    3b9a:	81 60       	ori	r24, 0x01	; 1
    3b9c:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    3b9e:	af e4       	ldi	r26, 0x4F	; 79
    3ba0:	b0 e0       	ldi	r27, 0x00	; 0
    3ba2:	ef e4       	ldi	r30, 0x4F	; 79
    3ba4:	f0 e0       	ldi	r31, 0x00	; 0
    3ba6:	80 81       	ld	r24, Z
    3ba8:	82 60       	ori	r24, 0x02	; 2
    3baa:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    3bac:	ae e4       	ldi	r26, 0x4E	; 78
    3bae:	b0 e0       	ldi	r27, 0x00	; 0
    3bb0:	ee e4       	ldi	r30, 0x4E	; 78
    3bb2:	f0 e0       	ldi	r31, 0x00	; 0
    3bb4:	80 81       	ld	r24, Z
    3bb6:	88 60       	ori	r24, 0x08	; 8
    3bb8:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3bba:	ae e4       	ldi	r26, 0x4E	; 78
    3bbc:	b0 e0       	ldi	r27, 0x00	; 0
    3bbe:	ee e4       	ldi	r30, 0x4E	; 78
    3bc0:	f0 e0       	ldi	r31, 0x00	; 0
    3bc2:	80 81       	ld	r24, Z
    3bc4:	8f 7e       	andi	r24, 0xEF	; 239
    3bc6:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_10;
    3bc8:	87 e0       	ldi	r24, 0x07	; 7
    3bca:	80 93 43 01 	sts	0x0143, r24
    3bce:	e6 c0       	rjmp	.+460    	; 0x3d9c <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_PWM_PHASE_AND_FRQUENCY_CORRECT_ICR1 :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3bd0:	af e4       	ldi	r26, 0x4F	; 79
    3bd2:	b0 e0       	ldi	r27, 0x00	; 0
    3bd4:	ef e4       	ldi	r30, 0x4F	; 79
    3bd6:	f0 e0       	ldi	r31, 0x00	; 0
    3bd8:	80 81       	ld	r24, Z
    3bda:	8e 7f       	andi	r24, 0xFE	; 254
    3bdc:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3bde:	af e4       	ldi	r26, 0x4F	; 79
    3be0:	b0 e0       	ldi	r27, 0x00	; 0
    3be2:	ef e4       	ldi	r30, 0x4F	; 79
    3be4:	f0 e0       	ldi	r31, 0x00	; 0
    3be6:	80 81       	ld	r24, Z
    3be8:	8d 7f       	andi	r24, 0xFD	; 253
    3bea:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3bec:	ae e4       	ldi	r26, 0x4E	; 78
    3bee:	b0 e0       	ldi	r27, 0x00	; 0
    3bf0:	ee e4       	ldi	r30, 0x4E	; 78
    3bf2:	f0 e0       	ldi	r31, 0x00	; 0
    3bf4:	80 81       	ld	r24, Z
    3bf6:	87 7f       	andi	r24, 0xF7	; 247
    3bf8:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    3bfa:	ae e4       	ldi	r26, 0x4E	; 78
    3bfc:	b0 e0       	ldi	r27, 0x00	; 0
    3bfe:	ee e4       	ldi	r30, 0x4E	; 78
    3c00:	f0 e0       	ldi	r31, 0x00	; 0
    3c02:	80 81       	ld	r24, Z
    3c04:	80 61       	ori	r24, 0x10	; 16
    3c06:	8c 93       	st	X, r24
    3c08:	c9 c0       	rjmp	.+402    	; 0x3d9c <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_PWM_PHASE_AND_FRQUENCY_CORRECT_OCR1A :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    3c0a:	af e4       	ldi	r26, 0x4F	; 79
    3c0c:	b0 e0       	ldi	r27, 0x00	; 0
    3c0e:	ef e4       	ldi	r30, 0x4F	; 79
    3c10:	f0 e0       	ldi	r31, 0x00	; 0
    3c12:	80 81       	ld	r24, Z
    3c14:	81 60       	ori	r24, 0x01	; 1
    3c16:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3c18:	af e4       	ldi	r26, 0x4F	; 79
    3c1a:	b0 e0       	ldi	r27, 0x00	; 0
    3c1c:	ef e4       	ldi	r30, 0x4F	; 79
    3c1e:	f0 e0       	ldi	r31, 0x00	; 0
    3c20:	80 81       	ld	r24, Z
    3c22:	8d 7f       	andi	r24, 0xFD	; 253
    3c24:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3c26:	ae e4       	ldi	r26, 0x4E	; 78
    3c28:	b0 e0       	ldi	r27, 0x00	; 0
    3c2a:	ee e4       	ldi	r30, 0x4E	; 78
    3c2c:	f0 e0       	ldi	r31, 0x00	; 0
    3c2e:	80 81       	ld	r24, Z
    3c30:	87 7f       	andi	r24, 0xF7	; 247
    3c32:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    3c34:	ae e4       	ldi	r26, 0x4E	; 78
    3c36:	b0 e0       	ldi	r27, 0x00	; 0
    3c38:	ee e4       	ldi	r30, 0x4E	; 78
    3c3a:	f0 e0       	ldi	r31, 0x00	; 0
    3c3c:	80 81       	ld	r24, Z
    3c3e:	80 61       	ori	r24, 0x10	; 16
    3c40:	8c 93       	st	X, r24
    3c42:	ac c0       	rjmp	.+344    	; 0x3d9c <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_PWM_PHASE_CORRECT_ICR1 :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3c44:	af e4       	ldi	r26, 0x4F	; 79
    3c46:	b0 e0       	ldi	r27, 0x00	; 0
    3c48:	ef e4       	ldi	r30, 0x4F	; 79
    3c4a:	f0 e0       	ldi	r31, 0x00	; 0
    3c4c:	80 81       	ld	r24, Z
    3c4e:	8e 7f       	andi	r24, 0xFE	; 254
    3c50:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    3c52:	af e4       	ldi	r26, 0x4F	; 79
    3c54:	b0 e0       	ldi	r27, 0x00	; 0
    3c56:	ef e4       	ldi	r30, 0x4F	; 79
    3c58:	f0 e0       	ldi	r31, 0x00	; 0
    3c5a:	80 81       	ld	r24, Z
    3c5c:	82 60       	ori	r24, 0x02	; 2
    3c5e:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3c60:	ae e4       	ldi	r26, 0x4E	; 78
    3c62:	b0 e0       	ldi	r27, 0x00	; 0
    3c64:	ee e4       	ldi	r30, 0x4E	; 78
    3c66:	f0 e0       	ldi	r31, 0x00	; 0
    3c68:	80 81       	ld	r24, Z
    3c6a:	87 7f       	andi	r24, 0xF7	; 247
    3c6c:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    3c6e:	ae e4       	ldi	r26, 0x4E	; 78
    3c70:	b0 e0       	ldi	r27, 0x00	; 0
    3c72:	ee e4       	ldi	r30, 0x4E	; 78
    3c74:	f0 e0       	ldi	r31, 0x00	; 0
    3c76:	80 81       	ld	r24, Z
    3c78:	80 61       	ori	r24, 0x10	; 16
    3c7a:	8c 93       	st	X, r24
    3c7c:	8f c0       	rjmp	.+286    	; 0x3d9c <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_PWM_PHASE_CORRECT_OCR1A :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    3c7e:	af e4       	ldi	r26, 0x4F	; 79
    3c80:	b0 e0       	ldi	r27, 0x00	; 0
    3c82:	ef e4       	ldi	r30, 0x4F	; 79
    3c84:	f0 e0       	ldi	r31, 0x00	; 0
    3c86:	80 81       	ld	r24, Z
    3c88:	81 60       	ori	r24, 0x01	; 1
    3c8a:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    3c8c:	af e4       	ldi	r26, 0x4F	; 79
    3c8e:	b0 e0       	ldi	r27, 0x00	; 0
    3c90:	ef e4       	ldi	r30, 0x4F	; 79
    3c92:	f0 e0       	ldi	r31, 0x00	; 0
    3c94:	80 81       	ld	r24, Z
    3c96:	82 60       	ori	r24, 0x02	; 2
    3c98:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3c9a:	ae e4       	ldi	r26, 0x4E	; 78
    3c9c:	b0 e0       	ldi	r27, 0x00	; 0
    3c9e:	ee e4       	ldi	r30, 0x4E	; 78
    3ca0:	f0 e0       	ldi	r31, 0x00	; 0
    3ca2:	80 81       	ld	r24, Z
    3ca4:	87 7f       	andi	r24, 0xF7	; 247
    3ca6:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    3ca8:	ae e4       	ldi	r26, 0x4E	; 78
    3caa:	b0 e0       	ldi	r27, 0x00	; 0
    3cac:	ee e4       	ldi	r30, 0x4E	; 78
    3cae:	f0 e0       	ldi	r31, 0x00	; 0
    3cb0:	80 81       	ld	r24, Z
    3cb2:	80 61       	ori	r24, 0x10	; 16
    3cb4:	8c 93       	st	X, r24
    3cb6:	72 c0       	rjmp	.+228    	; 0x3d9c <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_CTC_ICR1 :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3cb8:	af e4       	ldi	r26, 0x4F	; 79
    3cba:	b0 e0       	ldi	r27, 0x00	; 0
    3cbc:	ef e4       	ldi	r30, 0x4F	; 79
    3cbe:	f0 e0       	ldi	r31, 0x00	; 0
    3cc0:	80 81       	ld	r24, Z
    3cc2:	8e 7f       	andi	r24, 0xFE	; 254
    3cc4:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    3cc6:	af e4       	ldi	r26, 0x4F	; 79
    3cc8:	b0 e0       	ldi	r27, 0x00	; 0
    3cca:	ef e4       	ldi	r30, 0x4F	; 79
    3ccc:	f0 e0       	ldi	r31, 0x00	; 0
    3cce:	80 81       	ld	r24, Z
    3cd0:	82 60       	ori	r24, 0x02	; 2
    3cd2:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    3cd4:	ae e4       	ldi	r26, 0x4E	; 78
    3cd6:	b0 e0       	ldi	r27, 0x00	; 0
    3cd8:	ee e4       	ldi	r30, 0x4E	; 78
    3cda:	f0 e0       	ldi	r31, 0x00	; 0
    3cdc:	80 81       	ld	r24, Z
    3cde:	88 60       	ori	r24, 0x08	; 8
    3ce0:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3ce2:	ae e4       	ldi	r26, 0x4E	; 78
    3ce4:	b0 e0       	ldi	r27, 0x00	; 0
    3ce6:	ee e4       	ldi	r30, 0x4E	; 78
    3ce8:	f0 e0       	ldi	r31, 0x00	; 0
    3cea:	80 81       	ld	r24, Z
    3cec:	8f 7e       	andi	r24, 0xEF	; 239
    3cee:	8c 93       	st	X, r24

	   CLR_BIT(TIMSK,TIMSK_TOIE1);
    3cf0:	a9 e5       	ldi	r26, 0x59	; 89
    3cf2:	b0 e0       	ldi	r27, 0x00	; 0
    3cf4:	e9 e5       	ldi	r30, 0x59	; 89
    3cf6:	f0 e0       	ldi	r31, 0x00	; 0
    3cf8:	80 81       	ld	r24, Z
    3cfa:	8b 7f       	andi	r24, 0xFB	; 251
    3cfc:	8c 93       	st	X, r24
	   SET_BIT(TIMSK,TIMSK_OCIE1B);
    3cfe:	a9 e5       	ldi	r26, 0x59	; 89
    3d00:	b0 e0       	ldi	r27, 0x00	; 0
    3d02:	e9 e5       	ldi	r30, 0x59	; 89
    3d04:	f0 e0       	ldi	r31, 0x00	; 0
    3d06:	80 81       	ld	r24, Z
    3d08:	88 60       	ori	r24, 0x08	; 8
    3d0a:	8c 93       	st	X, r24
	   SET_BIT(TIMSK,TIMSK_OCIE1A);
    3d0c:	a9 e5       	ldi	r26, 0x59	; 89
    3d0e:	b0 e0       	ldi	r27, 0x00	; 0
    3d10:	e9 e5       	ldi	r30, 0x59	; 89
    3d12:	f0 e0       	ldi	r31, 0x00	; 0
    3d14:	80 81       	ld	r24, Z
    3d16:	80 61       	ori	r24, 0x10	; 16
    3d18:	8c 93       	st	X, r24
	   CLR_BIT(TIMSK,TIMSK_TICIE1);
    3d1a:	a9 e5       	ldi	r26, 0x59	; 89
    3d1c:	b0 e0       	ldi	r27, 0x00	; 0
    3d1e:	e9 e5       	ldi	r30, 0x59	; 89
    3d20:	f0 e0       	ldi	r31, 0x00	; 0
    3d22:	80 81       	ld	r24, Z
    3d24:	8f 7d       	andi	r24, 0xDF	; 223
    3d26:	8c 93       	st	X, r24
    3d28:	39 c0       	rjmp	.+114    	; 0x3d9c <TIMER_voidTimer1Enable+0x512>

   break;
   case  TIMER1_MODE_FAST_PWM_ICR1 :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3d2a:	af e4       	ldi	r26, 0x4F	; 79
    3d2c:	b0 e0       	ldi	r27, 0x00	; 0
    3d2e:	ef e4       	ldi	r30, 0x4F	; 79
    3d30:	f0 e0       	ldi	r31, 0x00	; 0
    3d32:	80 81       	ld	r24, Z
    3d34:	8e 7f       	andi	r24, 0xFE	; 254
    3d36:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    3d38:	af e4       	ldi	r26, 0x4F	; 79
    3d3a:	b0 e0       	ldi	r27, 0x00	; 0
    3d3c:	ef e4       	ldi	r30, 0x4F	; 79
    3d3e:	f0 e0       	ldi	r31, 0x00	; 0
    3d40:	80 81       	ld	r24, Z
    3d42:	82 60       	ori	r24, 0x02	; 2
    3d44:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    3d46:	ae e4       	ldi	r26, 0x4E	; 78
    3d48:	b0 e0       	ldi	r27, 0x00	; 0
    3d4a:	ee e4       	ldi	r30, 0x4E	; 78
    3d4c:	f0 e0       	ldi	r31, 0x00	; 0
    3d4e:	80 81       	ld	r24, Z
    3d50:	88 60       	ori	r24, 0x08	; 8
    3d52:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    3d54:	ae e4       	ldi	r26, 0x4E	; 78
    3d56:	b0 e0       	ldi	r27, 0x00	; 0
    3d58:	ee e4       	ldi	r30, 0x4E	; 78
    3d5a:	f0 e0       	ldi	r31, 0x00	; 0
    3d5c:	80 81       	ld	r24, Z
    3d5e:	80 61       	ori	r24, 0x10	; 16
    3d60:	8c 93       	st	X, r24
    3d62:	1c c0       	rjmp	.+56     	; 0x3d9c <TIMER_voidTimer1Enable+0x512>
   break;
   case  TIMER1_MODE_FAST_PWM_OCR1A :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    3d64:	af e4       	ldi	r26, 0x4F	; 79
    3d66:	b0 e0       	ldi	r27, 0x00	; 0
    3d68:	ef e4       	ldi	r30, 0x4F	; 79
    3d6a:	f0 e0       	ldi	r31, 0x00	; 0
    3d6c:	80 81       	ld	r24, Z
    3d6e:	81 60       	ori	r24, 0x01	; 1
    3d70:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    3d72:	af e4       	ldi	r26, 0x4F	; 79
    3d74:	b0 e0       	ldi	r27, 0x00	; 0
    3d76:	ef e4       	ldi	r30, 0x4F	; 79
    3d78:	f0 e0       	ldi	r31, 0x00	; 0
    3d7a:	80 81       	ld	r24, Z
    3d7c:	82 60       	ori	r24, 0x02	; 2
    3d7e:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    3d80:	ae e4       	ldi	r26, 0x4E	; 78
    3d82:	b0 e0       	ldi	r27, 0x00	; 0
    3d84:	ee e4       	ldi	r30, 0x4E	; 78
    3d86:	f0 e0       	ldi	r31, 0x00	; 0
    3d88:	80 81       	ld	r24, Z
    3d8a:	88 60       	ori	r24, 0x08	; 8
    3d8c:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    3d8e:	ae e4       	ldi	r26, 0x4E	; 78
    3d90:	b0 e0       	ldi	r27, 0x00	; 0
    3d92:	ee e4       	ldi	r30, 0x4E	; 78
    3d94:	f0 e0       	ldi	r31, 0x00	; 0
    3d96:	80 81       	ld	r24, Z
    3d98:	80 61       	ori	r24, 0x10	; 16
    3d9a:	8c 93       	st	X, r24
   break;
}
/***********************************************************************************************************/
switch(Copy_u8Timer1ModeChannelA)
    3d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d9e:	28 2f       	mov	r18, r24
    3da0:	30 e0       	ldi	r19, 0x00	; 0
    3da2:	3f 83       	std	Y+7, r19	; 0x07
    3da4:	2e 83       	std	Y+6, r18	; 0x06
    3da6:	8e 81       	ldd	r24, Y+6	; 0x06
    3da8:	9f 81       	ldd	r25, Y+7	; 0x07
    3daa:	81 30       	cpi	r24, 0x01	; 1
    3dac:	91 05       	cpc	r25, r1
    3dae:	21 f1       	breq	.+72     	; 0x3df8 <TIMER_voidTimer1Enable+0x56e>
    3db0:	2e 81       	ldd	r18, Y+6	; 0x06
    3db2:	3f 81       	ldd	r19, Y+7	; 0x07
    3db4:	22 30       	cpi	r18, 0x02	; 2
    3db6:	31 05       	cpc	r19, r1
    3db8:	2c f4       	brge	.+10     	; 0x3dc4 <TIMER_voidTimer1Enable+0x53a>
    3dba:	8e 81       	ldd	r24, Y+6	; 0x06
    3dbc:	9f 81       	ldd	r25, Y+7	; 0x07
    3dbe:	00 97       	sbiw	r24, 0x00	; 0
    3dc0:	61 f0       	breq	.+24     	; 0x3dda <TIMER_voidTimer1Enable+0x550>
    3dc2:	46 c0       	rjmp	.+140    	; 0x3e50 <TIMER_voidTimer1Enable+0x5c6>
    3dc4:	2e 81       	ldd	r18, Y+6	; 0x06
    3dc6:	3f 81       	ldd	r19, Y+7	; 0x07
    3dc8:	22 30       	cpi	r18, 0x02	; 2
    3dca:	31 05       	cpc	r19, r1
    3dcc:	21 f1       	breq	.+72     	; 0x3e16 <TIMER_voidTimer1Enable+0x58c>
    3dce:	8e 81       	ldd	r24, Y+6	; 0x06
    3dd0:	9f 81       	ldd	r25, Y+7	; 0x07
    3dd2:	83 30       	cpi	r24, 0x03	; 3
    3dd4:	91 05       	cpc	r25, r1
    3dd6:	71 f1       	breq	.+92     	; 0x3e34 <TIMER_voidTimer1Enable+0x5aa>
    3dd8:	3b c0       	rjmp	.+118    	; 0x3e50 <TIMER_voidTimer1Enable+0x5c6>
{
    case   TIMER1_MODE_CHANNEL_A_NORMAL :
       CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    3dda:	af e4       	ldi	r26, 0x4F	; 79
    3ddc:	b0 e0       	ldi	r27, 0x00	; 0
    3dde:	ef e4       	ldi	r30, 0x4F	; 79
    3de0:	f0 e0       	ldi	r31, 0x00	; 0
    3de2:	80 81       	ld	r24, Z
    3de4:	8f 7b       	andi	r24, 0xBF	; 191
    3de6:	8c 93       	st	X, r24
       CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    3de8:	af e4       	ldi	r26, 0x4F	; 79
    3dea:	b0 e0       	ldi	r27, 0x00	; 0
    3dec:	ef e4       	ldi	r30, 0x4F	; 79
    3dee:	f0 e0       	ldi	r31, 0x00	; 0
    3df0:	80 81       	ld	r24, Z
    3df2:	8f 77       	andi	r24, 0x7F	; 127
    3df4:	8c 93       	st	X, r24
    3df6:	2c c0       	rjmp	.+88     	; 0x3e50 <TIMER_voidTimer1Enable+0x5c6>
    break;
    case   TIMER1_MODE_CHANNEL_A_TOGGLE :
       SET_BIT(TCCR1A,TCCR1A_COM1A0);
    3df8:	af e4       	ldi	r26, 0x4F	; 79
    3dfa:	b0 e0       	ldi	r27, 0x00	; 0
    3dfc:	ef e4       	ldi	r30, 0x4F	; 79
    3dfe:	f0 e0       	ldi	r31, 0x00	; 0
    3e00:	80 81       	ld	r24, Z
    3e02:	80 64       	ori	r24, 0x40	; 64
    3e04:	8c 93       	st	X, r24
       CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    3e06:	af e4       	ldi	r26, 0x4F	; 79
    3e08:	b0 e0       	ldi	r27, 0x00	; 0
    3e0a:	ef e4       	ldi	r30, 0x4F	; 79
    3e0c:	f0 e0       	ldi	r31, 0x00	; 0
    3e0e:	80 81       	ld	r24, Z
    3e10:	8f 77       	andi	r24, 0x7F	; 127
    3e12:	8c 93       	st	X, r24
    3e14:	1d c0       	rjmp	.+58     	; 0x3e50 <TIMER_voidTimer1Enable+0x5c6>
    break;
    case   TIMER1_MODE_CHANNEL_A_CLEAR_OC1A :
       CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    3e16:	af e4       	ldi	r26, 0x4F	; 79
    3e18:	b0 e0       	ldi	r27, 0x00	; 0
    3e1a:	ef e4       	ldi	r30, 0x4F	; 79
    3e1c:	f0 e0       	ldi	r31, 0x00	; 0
    3e1e:	80 81       	ld	r24, Z
    3e20:	8f 7b       	andi	r24, 0xBF	; 191
    3e22:	8c 93       	st	X, r24
       SET_BIT(TCCR1A,TCCR1A_COM1A1);
    3e24:	af e4       	ldi	r26, 0x4F	; 79
    3e26:	b0 e0       	ldi	r27, 0x00	; 0
    3e28:	ef e4       	ldi	r30, 0x4F	; 79
    3e2a:	f0 e0       	ldi	r31, 0x00	; 0
    3e2c:	80 81       	ld	r24, Z
    3e2e:	80 68       	ori	r24, 0x80	; 128
    3e30:	8c 93       	st	X, r24
    3e32:	0e c0       	rjmp	.+28     	; 0x3e50 <TIMER_voidTimer1Enable+0x5c6>
    break;
    case   TIMER1_MODE_CHANNEL_A_SET_OC1A :
       SET_BIT(TCCR1A,TCCR1A_COM1A0);
    3e34:	af e4       	ldi	r26, 0x4F	; 79
    3e36:	b0 e0       	ldi	r27, 0x00	; 0
    3e38:	ef e4       	ldi	r30, 0x4F	; 79
    3e3a:	f0 e0       	ldi	r31, 0x00	; 0
    3e3c:	80 81       	ld	r24, Z
    3e3e:	80 64       	ori	r24, 0x40	; 64
    3e40:	8c 93       	st	X, r24
       SET_BIT(TCCR1A,TCCR1A_COM1A1);
    3e42:	af e4       	ldi	r26, 0x4F	; 79
    3e44:	b0 e0       	ldi	r27, 0x00	; 0
    3e46:	ef e4       	ldi	r30, 0x4F	; 79
    3e48:	f0 e0       	ldi	r31, 0x00	; 0
    3e4a:	80 81       	ld	r24, Z
    3e4c:	80 68       	ori	r24, 0x80	; 128
    3e4e:	8c 93       	st	X, r24
    break;
}
/***********************************************************************************************************/
switch(Copy_u8Timer1ModeChannelB)
    3e50:	8b 81       	ldd	r24, Y+3	; 0x03
    3e52:	28 2f       	mov	r18, r24
    3e54:	30 e0       	ldi	r19, 0x00	; 0
    3e56:	3d 83       	std	Y+5, r19	; 0x05
    3e58:	2c 83       	std	Y+4, r18	; 0x04
    3e5a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e5c:	9d 81       	ldd	r25, Y+5	; 0x05
    3e5e:	81 30       	cpi	r24, 0x01	; 1
    3e60:	91 05       	cpc	r25, r1
    3e62:	21 f1       	breq	.+72     	; 0x3eac <TIMER_voidTimer1Enable+0x622>
    3e64:	2c 81       	ldd	r18, Y+4	; 0x04
    3e66:	3d 81       	ldd	r19, Y+5	; 0x05
    3e68:	22 30       	cpi	r18, 0x02	; 2
    3e6a:	31 05       	cpc	r19, r1
    3e6c:	2c f4       	brge	.+10     	; 0x3e78 <TIMER_voidTimer1Enable+0x5ee>
    3e6e:	8c 81       	ldd	r24, Y+4	; 0x04
    3e70:	9d 81       	ldd	r25, Y+5	; 0x05
    3e72:	00 97       	sbiw	r24, 0x00	; 0
    3e74:	61 f0       	breq	.+24     	; 0x3e8e <TIMER_voidTimer1Enable+0x604>
    3e76:	46 c0       	rjmp	.+140    	; 0x3f04 <TIMER_voidTimer1Enable+0x67a>
    3e78:	2c 81       	ldd	r18, Y+4	; 0x04
    3e7a:	3d 81       	ldd	r19, Y+5	; 0x05
    3e7c:	22 30       	cpi	r18, 0x02	; 2
    3e7e:	31 05       	cpc	r19, r1
    3e80:	21 f1       	breq	.+72     	; 0x3eca <TIMER_voidTimer1Enable+0x640>
    3e82:	8c 81       	ldd	r24, Y+4	; 0x04
    3e84:	9d 81       	ldd	r25, Y+5	; 0x05
    3e86:	83 30       	cpi	r24, 0x03	; 3
    3e88:	91 05       	cpc	r25, r1
    3e8a:	71 f1       	breq	.+92     	; 0x3ee8 <TIMER_voidTimer1Enable+0x65e>
    3e8c:	3b c0       	rjmp	.+118    	; 0x3f04 <TIMER_voidTimer1Enable+0x67a>
{
    case  TIMER1_MODE_CHANNEL_B_NORMAL :
       CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    3e8e:	af e4       	ldi	r26, 0x4F	; 79
    3e90:	b0 e0       	ldi	r27, 0x00	; 0
    3e92:	ef e4       	ldi	r30, 0x4F	; 79
    3e94:	f0 e0       	ldi	r31, 0x00	; 0
    3e96:	80 81       	ld	r24, Z
    3e98:	8f 7e       	andi	r24, 0xEF	; 239
    3e9a:	8c 93       	st	X, r24
       CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    3e9c:	af e4       	ldi	r26, 0x4F	; 79
    3e9e:	b0 e0       	ldi	r27, 0x00	; 0
    3ea0:	ef e4       	ldi	r30, 0x4F	; 79
    3ea2:	f0 e0       	ldi	r31, 0x00	; 0
    3ea4:	80 81       	ld	r24, Z
    3ea6:	8f 7d       	andi	r24, 0xDF	; 223
    3ea8:	8c 93       	st	X, r24
    3eaa:	2c c0       	rjmp	.+88     	; 0x3f04 <TIMER_voidTimer1Enable+0x67a>
    break;
    case    TIMER1_MODE_CHANNEL_B_TOGGLE :
       SET_BIT(TCCR1A,TCCR1A_COM1B0);
    3eac:	af e4       	ldi	r26, 0x4F	; 79
    3eae:	b0 e0       	ldi	r27, 0x00	; 0
    3eb0:	ef e4       	ldi	r30, 0x4F	; 79
    3eb2:	f0 e0       	ldi	r31, 0x00	; 0
    3eb4:	80 81       	ld	r24, Z
    3eb6:	80 61       	ori	r24, 0x10	; 16
    3eb8:	8c 93       	st	X, r24
       CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    3eba:	af e4       	ldi	r26, 0x4F	; 79
    3ebc:	b0 e0       	ldi	r27, 0x00	; 0
    3ebe:	ef e4       	ldi	r30, 0x4F	; 79
    3ec0:	f0 e0       	ldi	r31, 0x00	; 0
    3ec2:	80 81       	ld	r24, Z
    3ec4:	8f 7d       	andi	r24, 0xDF	; 223
    3ec6:	8c 93       	st	X, r24
    3ec8:	1d c0       	rjmp	.+58     	; 0x3f04 <TIMER_voidTimer1Enable+0x67a>
    break;
    case    TIMER1_MODE_CHANNEL_B_CLEAR_OC1B :
       CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    3eca:	af e4       	ldi	r26, 0x4F	; 79
    3ecc:	b0 e0       	ldi	r27, 0x00	; 0
    3ece:	ef e4       	ldi	r30, 0x4F	; 79
    3ed0:	f0 e0       	ldi	r31, 0x00	; 0
    3ed2:	80 81       	ld	r24, Z
    3ed4:	8f 7e       	andi	r24, 0xEF	; 239
    3ed6:	8c 93       	st	X, r24
       SET_BIT(TCCR1A,TCCR1A_COM1B1);
    3ed8:	af e4       	ldi	r26, 0x4F	; 79
    3eda:	b0 e0       	ldi	r27, 0x00	; 0
    3edc:	ef e4       	ldi	r30, 0x4F	; 79
    3ede:	f0 e0       	ldi	r31, 0x00	; 0
    3ee0:	80 81       	ld	r24, Z
    3ee2:	80 62       	ori	r24, 0x20	; 32
    3ee4:	8c 93       	st	X, r24
    3ee6:	0e c0       	rjmp	.+28     	; 0x3f04 <TIMER_voidTimer1Enable+0x67a>
    break;
    case    TIMER1_MODE_CHANNEL_B_SET_OC1B :
       SET_BIT(TCCR1A,TCCR1A_COM1B0);
    3ee8:	af e4       	ldi	r26, 0x4F	; 79
    3eea:	b0 e0       	ldi	r27, 0x00	; 0
    3eec:	ef e4       	ldi	r30, 0x4F	; 79
    3eee:	f0 e0       	ldi	r31, 0x00	; 0
    3ef0:	80 81       	ld	r24, Z
    3ef2:	80 61       	ori	r24, 0x10	; 16
    3ef4:	8c 93       	st	X, r24
       SET_BIT(TCCR1A,TCCR1A_COM1B1);
    3ef6:	af e4       	ldi	r26, 0x4F	; 79
    3ef8:	b0 e0       	ldi	r27, 0x00	; 0
    3efa:	ef e4       	ldi	r30, 0x4F	; 79
    3efc:	f0 e0       	ldi	r31, 0x00	; 0
    3efe:	80 81       	ld	r24, Z
    3f00:	80 62       	ori	r24, 0x20	; 32
    3f02:	8c 93       	st	X, r24
  #elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_NO_PRESCALING
      SET_BIT(TCCR1B,TCCR1B_CS10);
      CLR_BIT(TCCR1B,TCCR1B_CS11);
      CLR_BIT(TCCR1B,TCCR1B_CS12);
  #elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_CLK_DIV_8
      CLR_BIT(TCCR1B,TCCR1B_CS10);
    3f04:	ae e4       	ldi	r26, 0x4E	; 78
    3f06:	b0 e0       	ldi	r27, 0x00	; 0
    3f08:	ee e4       	ldi	r30, 0x4E	; 78
    3f0a:	f0 e0       	ldi	r31, 0x00	; 0
    3f0c:	80 81       	ld	r24, Z
    3f0e:	8e 7f       	andi	r24, 0xFE	; 254
    3f10:	8c 93       	st	X, r24
      SET_BIT(TCCR1B,TCCR1B_CS11);
    3f12:	ae e4       	ldi	r26, 0x4E	; 78
    3f14:	b0 e0       	ldi	r27, 0x00	; 0
    3f16:	ee e4       	ldi	r30, 0x4E	; 78
    3f18:	f0 e0       	ldi	r31, 0x00	; 0
    3f1a:	80 81       	ld	r24, Z
    3f1c:	82 60       	ori	r24, 0x02	; 2
    3f1e:	8c 93       	st	X, r24
      CLR_BIT(TCCR1B,TCCR1B_CS12);
    3f20:	ae e4       	ldi	r26, 0x4E	; 78
    3f22:	b0 e0       	ldi	r27, 0x00	; 0
    3f24:	ee e4       	ldi	r30, 0x4E	; 78
    3f26:	f0 e0       	ldi	r31, 0x00	; 0
    3f28:	80 81       	ld	r24, Z
    3f2a:	8b 7f       	andi	r24, 0xFB	; 251
    3f2c:	8c 93       	st	X, r24
  #elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_EXIT_CLK_T0_RISING
      SET_BIT(TCCR1B,TCCR1B_CS10);
      SET_BIT(TCCR1B,TCCR1B_CS11);
      SET_BIT(TCCR1B,TCCR1B_CS12);
  #endif
}
    3f2e:	29 96       	adiw	r28, 0x09	; 9
    3f30:	0f b6       	in	r0, 0x3f	; 63
    3f32:	f8 94       	cli
    3f34:	de bf       	out	0x3e, r29	; 62
    3f36:	0f be       	out	0x3f, r0	; 63
    3f38:	cd bf       	out	0x3d, r28	; 61
    3f3a:	cf 91       	pop	r28
    3f3c:	df 91       	pop	r29
    3f3e:	08 95       	ret

00003f40 <TIMER_voidTimer1GeneratePWMOCR1A>:
/*******************************************************************************************************/
void TIMER_voidTimer1GeneratePWMOCR1A(u8 Copy_u8Intensity)
{
    3f40:	df 93       	push	r29
    3f42:	cf 93       	push	r28
    3f44:	00 d0       	rcall	.+0      	; 0x3f46 <TIMER_voidTimer1GeneratePWMOCR1A+0x6>
    3f46:	00 d0       	rcall	.+0      	; 0x3f48 <TIMER_voidTimer1GeneratePWMOCR1A+0x8>
    3f48:	0f 92       	push	r0
    3f4a:	cd b7       	in	r28, 0x3d	; 61
    3f4c:	de b7       	in	r29, 0x3e	; 62
    3f4e:	8b 83       	std	Y+3, r24	; 0x03
	u16 Copy_u16OCR1AValue;
	switch(TIMER1_u8MODEPWM)
    3f50:	80 91 43 01 	lds	r24, 0x0143
    3f54:	28 2f       	mov	r18, r24
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	3d 83       	std	Y+5, r19	; 0x05
    3f5a:	2c 83       	std	Y+4, r18	; 0x04
    3f5c:	4c 81       	ldd	r20, Y+4	; 0x04
    3f5e:	5d 81       	ldd	r21, Y+5	; 0x05
    3f60:	43 30       	cpi	r20, 0x03	; 3
    3f62:	51 05       	cpc	r21, r1
    3f64:	09 f4       	brne	.+2      	; 0x3f68 <TIMER_voidTimer1GeneratePWMOCR1A+0x28>
    3f66:	5b c0       	rjmp	.+182    	; 0x401e <TIMER_voidTimer1GeneratePWMOCR1A+0xde>
    3f68:	8c 81       	ldd	r24, Y+4	; 0x04
    3f6a:	9d 81       	ldd	r25, Y+5	; 0x05
    3f6c:	84 30       	cpi	r24, 0x04	; 4
    3f6e:	91 05       	cpc	r25, r1
    3f70:	5c f4       	brge	.+22     	; 0x3f88 <TIMER_voidTimer1GeneratePWMOCR1A+0x48>
    3f72:	2c 81       	ldd	r18, Y+4	; 0x04
    3f74:	3d 81       	ldd	r19, Y+5	; 0x05
    3f76:	21 30       	cpi	r18, 0x01	; 1
    3f78:	31 05       	cpc	r19, r1
    3f7a:	c9 f0       	breq	.+50     	; 0x3fae <TIMER_voidTimer1GeneratePWMOCR1A+0x6e>
    3f7c:	4c 81       	ldd	r20, Y+4	; 0x04
    3f7e:	5d 81       	ldd	r21, Y+5	; 0x05
    3f80:	42 30       	cpi	r20, 0x02	; 2
    3f82:	51 05       	cpc	r21, r1
    3f84:	81 f1       	breq	.+96     	; 0x3fe6 <TIMER_voidTimer1GeneratePWMOCR1A+0xa6>
    3f86:	ab c0       	rjmp	.+342    	; 0x40de <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
    3f88:	8c 81       	ldd	r24, Y+4	; 0x04
    3f8a:	9d 81       	ldd	r25, Y+5	; 0x05
    3f8c:	86 30       	cpi	r24, 0x06	; 6
    3f8e:	91 05       	cpc	r25, r1
    3f90:	09 f4       	brne	.+2      	; 0x3f94 <TIMER_voidTimer1GeneratePWMOCR1A+0x54>
    3f92:	75 c0       	rjmp	.+234    	; 0x407e <TIMER_voidTimer1GeneratePWMOCR1A+0x13e>
    3f94:	2c 81       	ldd	r18, Y+4	; 0x04
    3f96:	3d 81       	ldd	r19, Y+5	; 0x05
    3f98:	27 30       	cpi	r18, 0x07	; 7
    3f9a:	31 05       	cpc	r19, r1
    3f9c:	09 f4       	brne	.+2      	; 0x3fa0 <TIMER_voidTimer1GeneratePWMOCR1A+0x60>
    3f9e:	84 c0       	rjmp	.+264    	; 0x40a8 <TIMER_voidTimer1GeneratePWMOCR1A+0x168>
    3fa0:	4c 81       	ldd	r20, Y+4	; 0x04
    3fa2:	5d 81       	ldd	r21, Y+5	; 0x05
    3fa4:	45 30       	cpi	r20, 0x05	; 5
    3fa6:	51 05       	cpc	r21, r1
    3fa8:	09 f4       	brne	.+2      	; 0x3fac <TIMER_voidTimer1GeneratePWMOCR1A+0x6c>
    3faa:	55 c0       	rjmp	.+170    	; 0x4056 <TIMER_voidTimer1GeneratePWMOCR1A+0x116>
    3fac:	98 c0       	rjmp	.+304    	; 0x40de <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	{
	   case TIMER1_MODE_PWM_PHASE_CORRECT_8 :
	        Copy_u16OCR1AValue=((u16)510*Copy_u8Intensity/100);
    3fae:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb0:	28 2f       	mov	r18, r24
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	8e ef       	ldi	r24, 0xFE	; 254
    3fb6:	91 e0       	ldi	r25, 0x01	; 1
    3fb8:	ac 01       	movw	r20, r24
    3fba:	24 9f       	mul	r18, r20
    3fbc:	c0 01       	movw	r24, r0
    3fbe:	25 9f       	mul	r18, r21
    3fc0:	90 0d       	add	r25, r0
    3fc2:	34 9f       	mul	r19, r20
    3fc4:	90 0d       	add	r25, r0
    3fc6:	11 24       	eor	r1, r1
    3fc8:	24 e6       	ldi	r18, 0x64	; 100
    3fca:	30 e0       	ldi	r19, 0x00	; 0
    3fcc:	b9 01       	movw	r22, r18
    3fce:	0e 94 8d 31 	call	0x631a	; 0x631a <__udivmodhi4>
    3fd2:	cb 01       	movw	r24, r22
    3fd4:	9a 83       	std	Y+2, r25	; 0x02
    3fd6:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    3fd8:	ea e4       	ldi	r30, 0x4A	; 74
    3fda:	f0 e0       	ldi	r31, 0x00	; 0
    3fdc:	89 81       	ldd	r24, Y+1	; 0x01
    3fde:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe0:	91 83       	std	Z+1, r25	; 0x01
    3fe2:	80 83       	st	Z, r24
    3fe4:	7c c0       	rjmp	.+248    	; 0x40de <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;
	   case TIMER1_MODE_PWM_PHASE_CORRECT_9 :
	        Copy_u16OCR1AValue=((u16)1022*Copy_u8Intensity/100);
    3fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe8:	28 2f       	mov	r18, r24
    3fea:	30 e0       	ldi	r19, 0x00	; 0
    3fec:	8e ef       	ldi	r24, 0xFE	; 254
    3fee:	93 e0       	ldi	r25, 0x03	; 3
    3ff0:	ac 01       	movw	r20, r24
    3ff2:	24 9f       	mul	r18, r20
    3ff4:	c0 01       	movw	r24, r0
    3ff6:	25 9f       	mul	r18, r21
    3ff8:	90 0d       	add	r25, r0
    3ffa:	34 9f       	mul	r19, r20
    3ffc:	90 0d       	add	r25, r0
    3ffe:	11 24       	eor	r1, r1
    4000:	24 e6       	ldi	r18, 0x64	; 100
    4002:	30 e0       	ldi	r19, 0x00	; 0
    4004:	b9 01       	movw	r22, r18
    4006:	0e 94 8d 31 	call	0x631a	; 0x631a <__udivmodhi4>
    400a:	cb 01       	movw	r24, r22
    400c:	9a 83       	std	Y+2, r25	; 0x02
    400e:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    4010:	ea e4       	ldi	r30, 0x4A	; 74
    4012:	f0 e0       	ldi	r31, 0x00	; 0
    4014:	89 81       	ldd	r24, Y+1	; 0x01
    4016:	9a 81       	ldd	r25, Y+2	; 0x02
    4018:	91 83       	std	Z+1, r25	; 0x01
    401a:	80 83       	st	Z, r24
    401c:	60 c0       	rjmp	.+192    	; 0x40de <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;
	   case TIMER1_MODE_PWM_PHASE_CORRECT_10 :
	        Copy_u16OCR1AValue=((u16)2046*Copy_u8Intensity/100);
    401e:	8b 81       	ldd	r24, Y+3	; 0x03
    4020:	28 2f       	mov	r18, r24
    4022:	30 e0       	ldi	r19, 0x00	; 0
    4024:	8e ef       	ldi	r24, 0xFE	; 254
    4026:	97 e0       	ldi	r25, 0x07	; 7
    4028:	ac 01       	movw	r20, r24
    402a:	24 9f       	mul	r18, r20
    402c:	c0 01       	movw	r24, r0
    402e:	25 9f       	mul	r18, r21
    4030:	90 0d       	add	r25, r0
    4032:	34 9f       	mul	r19, r20
    4034:	90 0d       	add	r25, r0
    4036:	11 24       	eor	r1, r1
    4038:	24 e6       	ldi	r18, 0x64	; 100
    403a:	30 e0       	ldi	r19, 0x00	; 0
    403c:	b9 01       	movw	r22, r18
    403e:	0e 94 8d 31 	call	0x631a	; 0x631a <__udivmodhi4>
    4042:	cb 01       	movw	r24, r22
    4044:	9a 83       	std	Y+2, r25	; 0x02
    4046:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    4048:	ea e4       	ldi	r30, 0x4A	; 74
    404a:	f0 e0       	ldi	r31, 0x00	; 0
    404c:	89 81       	ldd	r24, Y+1	; 0x01
    404e:	9a 81       	ldd	r25, Y+2	; 0x02
    4050:	91 83       	std	Z+1, r25	; 0x01
    4052:	80 83       	st	Z, r24
    4054:	44 c0       	rjmp	.+136    	; 0x40de <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;

	   case TIMER1_MODE_FAST_PWM_8 :
	        Copy_u16OCR1AValue=(256*Copy_u8Intensity/100);
    4056:	8b 81       	ldd	r24, Y+3	; 0x03
    4058:	88 2f       	mov	r24, r24
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	98 2f       	mov	r25, r24
    405e:	88 27       	eor	r24, r24
    4060:	24 e6       	ldi	r18, 0x64	; 100
    4062:	30 e0       	ldi	r19, 0x00	; 0
    4064:	b9 01       	movw	r22, r18
    4066:	0e 94 a1 31 	call	0x6342	; 0x6342 <__divmodhi4>
    406a:	cb 01       	movw	r24, r22
    406c:	9a 83       	std	Y+2, r25	; 0x02
    406e:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    4070:	ea e4       	ldi	r30, 0x4A	; 74
    4072:	f0 e0       	ldi	r31, 0x00	; 0
    4074:	89 81       	ldd	r24, Y+1	; 0x01
    4076:	9a 81       	ldd	r25, Y+2	; 0x02
    4078:	91 83       	std	Z+1, r25	; 0x01
    407a:	80 83       	st	Z, r24
    407c:	30 c0       	rjmp	.+96     	; 0x40de <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;
	   case TIMER1_MODE_FAST_PWM_9 :
	        Copy_u16OCR1AValue=(512*Copy_u8Intensity/100);
    407e:	8b 81       	ldd	r24, Y+3	; 0x03
    4080:	88 2f       	mov	r24, r24
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	98 2f       	mov	r25, r24
    4086:	88 27       	eor	r24, r24
    4088:	99 0f       	add	r25, r25
    408a:	24 e6       	ldi	r18, 0x64	; 100
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	b9 01       	movw	r22, r18
    4090:	0e 94 a1 31 	call	0x6342	; 0x6342 <__divmodhi4>
    4094:	cb 01       	movw	r24, r22
    4096:	9a 83       	std	Y+2, r25	; 0x02
    4098:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    409a:	ea e4       	ldi	r30, 0x4A	; 74
    409c:	f0 e0       	ldi	r31, 0x00	; 0
    409e:	89 81       	ldd	r24, Y+1	; 0x01
    40a0:	9a 81       	ldd	r25, Y+2	; 0x02
    40a2:	91 83       	std	Z+1, r25	; 0x01
    40a4:	80 83       	st	Z, r24
    40a6:	1b c0       	rjmp	.+54     	; 0x40de <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;
	   case TIMER1_MODE_FAST_PWM_10 :
	        Copy_u16OCR1AValue=((u16)1023*Copy_u8Intensity/100);
    40a8:	8b 81       	ldd	r24, Y+3	; 0x03
    40aa:	28 2f       	mov	r18, r24
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	8f ef       	ldi	r24, 0xFF	; 255
    40b0:	93 e0       	ldi	r25, 0x03	; 3
    40b2:	ac 01       	movw	r20, r24
    40b4:	24 9f       	mul	r18, r20
    40b6:	c0 01       	movw	r24, r0
    40b8:	25 9f       	mul	r18, r21
    40ba:	90 0d       	add	r25, r0
    40bc:	34 9f       	mul	r19, r20
    40be:	90 0d       	add	r25, r0
    40c0:	11 24       	eor	r1, r1
    40c2:	24 e6       	ldi	r18, 0x64	; 100
    40c4:	30 e0       	ldi	r19, 0x00	; 0
    40c6:	b9 01       	movw	r22, r18
    40c8:	0e 94 8d 31 	call	0x631a	; 0x631a <__udivmodhi4>
    40cc:	cb 01       	movw	r24, r22
    40ce:	9a 83       	std	Y+2, r25	; 0x02
    40d0:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    40d2:	ea e4       	ldi	r30, 0x4A	; 74
    40d4:	f0 e0       	ldi	r31, 0x00	; 0
    40d6:	89 81       	ldd	r24, Y+1	; 0x01
    40d8:	9a 81       	ldd	r25, Y+2	; 0x02
    40da:	91 83       	std	Z+1, r25	; 0x01
    40dc:	80 83       	st	Z, r24
	   break;
	}
}
    40de:	0f 90       	pop	r0
    40e0:	0f 90       	pop	r0
    40e2:	0f 90       	pop	r0
    40e4:	0f 90       	pop	r0
    40e6:	0f 90       	pop	r0
    40e8:	cf 91       	pop	r28
    40ea:	df 91       	pop	r29
    40ec:	08 95       	ret

000040ee <TIMER_voidTimer1GeneratePWMOCR1B>:
void TIMER_voidTimer1GeneratePWMOCR1B(u8 Copy_u8Intensity)
{
    40ee:	df 93       	push	r29
    40f0:	cf 93       	push	r28
    40f2:	00 d0       	rcall	.+0      	; 0x40f4 <TIMER_voidTimer1GeneratePWMOCR1B+0x6>
    40f4:	00 d0       	rcall	.+0      	; 0x40f6 <TIMER_voidTimer1GeneratePWMOCR1B+0x8>
    40f6:	0f 92       	push	r0
    40f8:	cd b7       	in	r28, 0x3d	; 61
    40fa:	de b7       	in	r29, 0x3e	; 62
    40fc:	8b 83       	std	Y+3, r24	; 0x03
	u16 Copy_u16OCR1BValue;
	switch(TIMER1_u8MODEPWM)
    40fe:	80 91 43 01 	lds	r24, 0x0143
    4102:	28 2f       	mov	r18, r24
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	3d 83       	std	Y+5, r19	; 0x05
    4108:	2c 83       	std	Y+4, r18	; 0x04
    410a:	4c 81       	ldd	r20, Y+4	; 0x04
    410c:	5d 81       	ldd	r21, Y+5	; 0x05
    410e:	43 30       	cpi	r20, 0x03	; 3
    4110:	51 05       	cpc	r21, r1
    4112:	09 f4       	brne	.+2      	; 0x4116 <TIMER_voidTimer1GeneratePWMOCR1B+0x28>
    4114:	5b c0       	rjmp	.+182    	; 0x41cc <TIMER_voidTimer1GeneratePWMOCR1B+0xde>
    4116:	8c 81       	ldd	r24, Y+4	; 0x04
    4118:	9d 81       	ldd	r25, Y+5	; 0x05
    411a:	84 30       	cpi	r24, 0x04	; 4
    411c:	91 05       	cpc	r25, r1
    411e:	5c f4       	brge	.+22     	; 0x4136 <TIMER_voidTimer1GeneratePWMOCR1B+0x48>
    4120:	2c 81       	ldd	r18, Y+4	; 0x04
    4122:	3d 81       	ldd	r19, Y+5	; 0x05
    4124:	21 30       	cpi	r18, 0x01	; 1
    4126:	31 05       	cpc	r19, r1
    4128:	c9 f0       	breq	.+50     	; 0x415c <TIMER_voidTimer1GeneratePWMOCR1B+0x6e>
    412a:	4c 81       	ldd	r20, Y+4	; 0x04
    412c:	5d 81       	ldd	r21, Y+5	; 0x05
    412e:	42 30       	cpi	r20, 0x02	; 2
    4130:	51 05       	cpc	r21, r1
    4132:	81 f1       	breq	.+96     	; 0x4194 <TIMER_voidTimer1GeneratePWMOCR1B+0xa6>
    4134:	ab c0       	rjmp	.+342    	; 0x428c <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
    4136:	8c 81       	ldd	r24, Y+4	; 0x04
    4138:	9d 81       	ldd	r25, Y+5	; 0x05
    413a:	86 30       	cpi	r24, 0x06	; 6
    413c:	91 05       	cpc	r25, r1
    413e:	09 f4       	brne	.+2      	; 0x4142 <TIMER_voidTimer1GeneratePWMOCR1B+0x54>
    4140:	75 c0       	rjmp	.+234    	; 0x422c <TIMER_voidTimer1GeneratePWMOCR1B+0x13e>
    4142:	2c 81       	ldd	r18, Y+4	; 0x04
    4144:	3d 81       	ldd	r19, Y+5	; 0x05
    4146:	27 30       	cpi	r18, 0x07	; 7
    4148:	31 05       	cpc	r19, r1
    414a:	09 f4       	brne	.+2      	; 0x414e <TIMER_voidTimer1GeneratePWMOCR1B+0x60>
    414c:	84 c0       	rjmp	.+264    	; 0x4256 <TIMER_voidTimer1GeneratePWMOCR1B+0x168>
    414e:	4c 81       	ldd	r20, Y+4	; 0x04
    4150:	5d 81       	ldd	r21, Y+5	; 0x05
    4152:	45 30       	cpi	r20, 0x05	; 5
    4154:	51 05       	cpc	r21, r1
    4156:	09 f4       	brne	.+2      	; 0x415a <TIMER_voidTimer1GeneratePWMOCR1B+0x6c>
    4158:	55 c0       	rjmp	.+170    	; 0x4204 <TIMER_voidTimer1GeneratePWMOCR1B+0x116>
    415a:	98 c0       	rjmp	.+304    	; 0x428c <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	{
	   case TIMER1_MODE_PWM_PHASE_CORRECT_8 :
	        Copy_u16OCR1BValue=((u16)510*Copy_u8Intensity/100);
    415c:	8b 81       	ldd	r24, Y+3	; 0x03
    415e:	28 2f       	mov	r18, r24
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	8e ef       	ldi	r24, 0xFE	; 254
    4164:	91 e0       	ldi	r25, 0x01	; 1
    4166:	ac 01       	movw	r20, r24
    4168:	24 9f       	mul	r18, r20
    416a:	c0 01       	movw	r24, r0
    416c:	25 9f       	mul	r18, r21
    416e:	90 0d       	add	r25, r0
    4170:	34 9f       	mul	r19, r20
    4172:	90 0d       	add	r25, r0
    4174:	11 24       	eor	r1, r1
    4176:	24 e6       	ldi	r18, 0x64	; 100
    4178:	30 e0       	ldi	r19, 0x00	; 0
    417a:	b9 01       	movw	r22, r18
    417c:	0e 94 8d 31 	call	0x631a	; 0x631a <__udivmodhi4>
    4180:	cb 01       	movw	r24, r22
    4182:	9a 83       	std	Y+2, r25	; 0x02
    4184:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    4186:	e8 e4       	ldi	r30, 0x48	; 72
    4188:	f0 e0       	ldi	r31, 0x00	; 0
    418a:	89 81       	ldd	r24, Y+1	; 0x01
    418c:	9a 81       	ldd	r25, Y+2	; 0x02
    418e:	91 83       	std	Z+1, r25	; 0x01
    4190:	80 83       	st	Z, r24
    4192:	7c c0       	rjmp	.+248    	; 0x428c <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;
	   case TIMER1_MODE_PWM_PHASE_CORRECT_9 :
	        Copy_u16OCR1BValue=((u16)1022*Copy_u8Intensity/100);
    4194:	8b 81       	ldd	r24, Y+3	; 0x03
    4196:	28 2f       	mov	r18, r24
    4198:	30 e0       	ldi	r19, 0x00	; 0
    419a:	8e ef       	ldi	r24, 0xFE	; 254
    419c:	93 e0       	ldi	r25, 0x03	; 3
    419e:	ac 01       	movw	r20, r24
    41a0:	24 9f       	mul	r18, r20
    41a2:	c0 01       	movw	r24, r0
    41a4:	25 9f       	mul	r18, r21
    41a6:	90 0d       	add	r25, r0
    41a8:	34 9f       	mul	r19, r20
    41aa:	90 0d       	add	r25, r0
    41ac:	11 24       	eor	r1, r1
    41ae:	24 e6       	ldi	r18, 0x64	; 100
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	b9 01       	movw	r22, r18
    41b4:	0e 94 8d 31 	call	0x631a	; 0x631a <__udivmodhi4>
    41b8:	cb 01       	movw	r24, r22
    41ba:	9a 83       	std	Y+2, r25	; 0x02
    41bc:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    41be:	e8 e4       	ldi	r30, 0x48	; 72
    41c0:	f0 e0       	ldi	r31, 0x00	; 0
    41c2:	89 81       	ldd	r24, Y+1	; 0x01
    41c4:	9a 81       	ldd	r25, Y+2	; 0x02
    41c6:	91 83       	std	Z+1, r25	; 0x01
    41c8:	80 83       	st	Z, r24
    41ca:	60 c0       	rjmp	.+192    	; 0x428c <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;
	   case TIMER1_MODE_PWM_PHASE_CORRECT_10 :
	        Copy_u16OCR1BValue=((u16)2046*Copy_u8Intensity/100);
    41cc:	8b 81       	ldd	r24, Y+3	; 0x03
    41ce:	28 2f       	mov	r18, r24
    41d0:	30 e0       	ldi	r19, 0x00	; 0
    41d2:	8e ef       	ldi	r24, 0xFE	; 254
    41d4:	97 e0       	ldi	r25, 0x07	; 7
    41d6:	ac 01       	movw	r20, r24
    41d8:	24 9f       	mul	r18, r20
    41da:	c0 01       	movw	r24, r0
    41dc:	25 9f       	mul	r18, r21
    41de:	90 0d       	add	r25, r0
    41e0:	34 9f       	mul	r19, r20
    41e2:	90 0d       	add	r25, r0
    41e4:	11 24       	eor	r1, r1
    41e6:	24 e6       	ldi	r18, 0x64	; 100
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	b9 01       	movw	r22, r18
    41ec:	0e 94 8d 31 	call	0x631a	; 0x631a <__udivmodhi4>
    41f0:	cb 01       	movw	r24, r22
    41f2:	9a 83       	std	Y+2, r25	; 0x02
    41f4:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    41f6:	e8 e4       	ldi	r30, 0x48	; 72
    41f8:	f0 e0       	ldi	r31, 0x00	; 0
    41fa:	89 81       	ldd	r24, Y+1	; 0x01
    41fc:	9a 81       	ldd	r25, Y+2	; 0x02
    41fe:	91 83       	std	Z+1, r25	; 0x01
    4200:	80 83       	st	Z, r24
    4202:	44 c0       	rjmp	.+136    	; 0x428c <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;

	   case TIMER1_MODE_FAST_PWM_8 :
	        Copy_u16OCR1BValue=(256*Copy_u8Intensity/100);
    4204:	8b 81       	ldd	r24, Y+3	; 0x03
    4206:	88 2f       	mov	r24, r24
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	98 2f       	mov	r25, r24
    420c:	88 27       	eor	r24, r24
    420e:	24 e6       	ldi	r18, 0x64	; 100
    4210:	30 e0       	ldi	r19, 0x00	; 0
    4212:	b9 01       	movw	r22, r18
    4214:	0e 94 a1 31 	call	0x6342	; 0x6342 <__divmodhi4>
    4218:	cb 01       	movw	r24, r22
    421a:	9a 83       	std	Y+2, r25	; 0x02
    421c:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    421e:	e8 e4       	ldi	r30, 0x48	; 72
    4220:	f0 e0       	ldi	r31, 0x00	; 0
    4222:	89 81       	ldd	r24, Y+1	; 0x01
    4224:	9a 81       	ldd	r25, Y+2	; 0x02
    4226:	91 83       	std	Z+1, r25	; 0x01
    4228:	80 83       	st	Z, r24
    422a:	30 c0       	rjmp	.+96     	; 0x428c <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;
	   case TIMER1_MODE_FAST_PWM_9 :
	        Copy_u16OCR1BValue=(512*Copy_u8Intensity/100);
    422c:	8b 81       	ldd	r24, Y+3	; 0x03
    422e:	88 2f       	mov	r24, r24
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	98 2f       	mov	r25, r24
    4234:	88 27       	eor	r24, r24
    4236:	99 0f       	add	r25, r25
    4238:	24 e6       	ldi	r18, 0x64	; 100
    423a:	30 e0       	ldi	r19, 0x00	; 0
    423c:	b9 01       	movw	r22, r18
    423e:	0e 94 a1 31 	call	0x6342	; 0x6342 <__divmodhi4>
    4242:	cb 01       	movw	r24, r22
    4244:	9a 83       	std	Y+2, r25	; 0x02
    4246:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    4248:	e8 e4       	ldi	r30, 0x48	; 72
    424a:	f0 e0       	ldi	r31, 0x00	; 0
    424c:	89 81       	ldd	r24, Y+1	; 0x01
    424e:	9a 81       	ldd	r25, Y+2	; 0x02
    4250:	91 83       	std	Z+1, r25	; 0x01
    4252:	80 83       	st	Z, r24
    4254:	1b c0       	rjmp	.+54     	; 0x428c <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;
	   case TIMER1_MODE_FAST_PWM_10 :
	        Copy_u16OCR1BValue=((u16)1023*Copy_u8Intensity/100);
    4256:	8b 81       	ldd	r24, Y+3	; 0x03
    4258:	28 2f       	mov	r18, r24
    425a:	30 e0       	ldi	r19, 0x00	; 0
    425c:	8f ef       	ldi	r24, 0xFF	; 255
    425e:	93 e0       	ldi	r25, 0x03	; 3
    4260:	ac 01       	movw	r20, r24
    4262:	24 9f       	mul	r18, r20
    4264:	c0 01       	movw	r24, r0
    4266:	25 9f       	mul	r18, r21
    4268:	90 0d       	add	r25, r0
    426a:	34 9f       	mul	r19, r20
    426c:	90 0d       	add	r25, r0
    426e:	11 24       	eor	r1, r1
    4270:	24 e6       	ldi	r18, 0x64	; 100
    4272:	30 e0       	ldi	r19, 0x00	; 0
    4274:	b9 01       	movw	r22, r18
    4276:	0e 94 8d 31 	call	0x631a	; 0x631a <__udivmodhi4>
    427a:	cb 01       	movw	r24, r22
    427c:	9a 83       	std	Y+2, r25	; 0x02
    427e:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    4280:	e8 e4       	ldi	r30, 0x48	; 72
    4282:	f0 e0       	ldi	r31, 0x00	; 0
    4284:	89 81       	ldd	r24, Y+1	; 0x01
    4286:	9a 81       	ldd	r25, Y+2	; 0x02
    4288:	91 83       	std	Z+1, r25	; 0x01
    428a:	80 83       	st	Z, r24
	   break;
	}
}
    428c:	0f 90       	pop	r0
    428e:	0f 90       	pop	r0
    4290:	0f 90       	pop	r0
    4292:	0f 90       	pop	r0
    4294:	0f 90       	pop	r0
    4296:	cf 91       	pop	r28
    4298:	df 91       	pop	r29
    429a:	08 95       	ret

0000429c <TIMER_voidTimer1SetOCR1A>:

/*************************************************************************************************************/
void TIMER_voidTimer1SetOCR1A(u16 Copy_u16OCR1A)
{
    429c:	df 93       	push	r29
    429e:	cf 93       	push	r28
    42a0:	00 d0       	rcall	.+0      	; 0x42a2 <TIMER_voidTimer1SetOCR1A+0x6>
    42a2:	cd b7       	in	r28, 0x3d	; 61
    42a4:	de b7       	in	r29, 0x3e	; 62
    42a6:	9a 83       	std	Y+2, r25	; 0x02
    42a8:	89 83       	std	Y+1, r24	; 0x01
	  OCR1AH = (u8)(Copy_u16OCR1A>>8);
    42aa:	eb e4       	ldi	r30, 0x4B	; 75
    42ac:	f0 e0       	ldi	r31, 0x00	; 0
    42ae:	89 81       	ldd	r24, Y+1	; 0x01
    42b0:	9a 81       	ldd	r25, Y+2	; 0x02
    42b2:	89 2f       	mov	r24, r25
    42b4:	99 27       	eor	r25, r25
    42b6:	80 83       	st	Z, r24
	  OCR1AL = (u8)(Copy_u16OCR1A);
    42b8:	ea e4       	ldi	r30, 0x4A	; 74
    42ba:	f0 e0       	ldi	r31, 0x00	; 0
    42bc:	89 81       	ldd	r24, Y+1	; 0x01
    42be:	80 83       	st	Z, r24
}
    42c0:	0f 90       	pop	r0
    42c2:	0f 90       	pop	r0
    42c4:	cf 91       	pop	r28
    42c6:	df 91       	pop	r29
    42c8:	08 95       	ret

000042ca <TIMER_voidTimer1SetOCR1B>:
void TIMER_voidTimer1SetOCR1B(u16 Copy_u16OCR1B)
{
    42ca:	df 93       	push	r29
    42cc:	cf 93       	push	r28
    42ce:	00 d0       	rcall	.+0      	; 0x42d0 <TIMER_voidTimer1SetOCR1B+0x6>
    42d0:	cd b7       	in	r28, 0x3d	; 61
    42d2:	de b7       	in	r29, 0x3e	; 62
    42d4:	9a 83       	std	Y+2, r25	; 0x02
    42d6:	89 83       	std	Y+1, r24	; 0x01
	  OCR1BH = (u8)(Copy_u16OCR1B>>8);
    42d8:	e9 e4       	ldi	r30, 0x49	; 73
    42da:	f0 e0       	ldi	r31, 0x00	; 0
    42dc:	89 81       	ldd	r24, Y+1	; 0x01
    42de:	9a 81       	ldd	r25, Y+2	; 0x02
    42e0:	89 2f       	mov	r24, r25
    42e2:	99 27       	eor	r25, r25
    42e4:	80 83       	st	Z, r24
	  OCR1BL = (u8)(Copy_u16OCR1B);
    42e6:	e8 e4       	ldi	r30, 0x48	; 72
    42e8:	f0 e0       	ldi	r31, 0x00	; 0
    42ea:	89 81       	ldd	r24, Y+1	; 0x01
    42ec:	80 83       	st	Z, r24
}
    42ee:	0f 90       	pop	r0
    42f0:	0f 90       	pop	r0
    42f2:	cf 91       	pop	r28
    42f4:	df 91       	pop	r29
    42f6:	08 95       	ret

000042f8 <TIMER_voidTimer1SetICR1>:
void TIMER_voidTimer1SetICR1(u16 Copy_u16ICR1)
{
    42f8:	df 93       	push	r29
    42fa:	cf 93       	push	r28
    42fc:	00 d0       	rcall	.+0      	; 0x42fe <TIMER_voidTimer1SetICR1+0x6>
    42fe:	cd b7       	in	r28, 0x3d	; 61
    4300:	de b7       	in	r29, 0x3e	; 62
    4302:	9a 83       	std	Y+2, r25	; 0x02
    4304:	89 83       	std	Y+1, r24	; 0x01
	  ICR1H = (u8)(Copy_u16ICR1>>8);
    4306:	e7 e4       	ldi	r30, 0x47	; 71
    4308:	f0 e0       	ldi	r31, 0x00	; 0
    430a:	89 81       	ldd	r24, Y+1	; 0x01
    430c:	9a 81       	ldd	r25, Y+2	; 0x02
    430e:	89 2f       	mov	r24, r25
    4310:	99 27       	eor	r25, r25
    4312:	80 83       	st	Z, r24
	  ICR1L = (u8)(Copy_u16ICR1);
    4314:	e6 e4       	ldi	r30, 0x46	; 70
    4316:	f0 e0       	ldi	r31, 0x00	; 0
    4318:	89 81       	ldd	r24, Y+1	; 0x01
    431a:	80 83       	st	Z, r24
}
    431c:	0f 90       	pop	r0
    431e:	0f 90       	pop	r0
    4320:	cf 91       	pop	r28
    4322:	df 91       	pop	r29
    4324:	08 95       	ret

00004326 <TIMER_voidTimer1ICUInit>:
 *                                                           ICU Timer 1                                                             *
 **************************************************************************************************************************************/
static void(*Timer1_pICUSetCallBack)(void);
/************************************************************************************************************************************/
void TIMER_voidTimer1ICUInit(void)
{
    4326:	df 93       	push	r29
    4328:	cf 93       	push	r28
    432a:	cd b7       	in	r28, 0x3d	; 61
    432c:	de b7       	in	r29, 0x3e	; 62
	 SET_BIT(TCCR1B,TCCR1B_ICES1);
    432e:	ae e4       	ldi	r26, 0x4E	; 78
    4330:	b0 e0       	ldi	r27, 0x00	; 0
    4332:	ee e4       	ldi	r30, 0x4E	; 78
    4334:	f0 e0       	ldi	r31, 0x00	; 0
    4336:	80 81       	ld	r24, Z
    4338:	80 64       	ori	r24, 0x40	; 64
    433a:	8c 93       	st	X, r24
	 SET_BIT(TIMSK,TIMSK_TICIE1);
    433c:	a9 e5       	ldi	r26, 0x59	; 89
    433e:	b0 e0       	ldi	r27, 0x00	; 0
    4340:	e9 e5       	ldi	r30, 0x59	; 89
    4342:	f0 e0       	ldi	r31, 0x00	; 0
    4344:	80 81       	ld	r24, Z
    4346:	80 62       	ori	r24, 0x20	; 32
    4348:	8c 93       	st	X, r24

	 CLR_BIT(TCCR1B,TCCR1B_CS10);
    434a:	ae e4       	ldi	r26, 0x4E	; 78
    434c:	b0 e0       	ldi	r27, 0x00	; 0
    434e:	ee e4       	ldi	r30, 0x4E	; 78
    4350:	f0 e0       	ldi	r31, 0x00	; 0
    4352:	80 81       	ld	r24, Z
    4354:	8e 7f       	andi	r24, 0xFE	; 254
    4356:	8c 93       	st	X, r24
	 SET_BIT(TCCR1B,TCCR1B_CS11);
    4358:	ae e4       	ldi	r26, 0x4E	; 78
    435a:	b0 e0       	ldi	r27, 0x00	; 0
    435c:	ee e4       	ldi	r30, 0x4E	; 78
    435e:	f0 e0       	ldi	r31, 0x00	; 0
    4360:	80 81       	ld	r24, Z
    4362:	82 60       	ori	r24, 0x02	; 2
    4364:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1B,TCCR1B_CS12);
    4366:	ae e4       	ldi	r26, 0x4E	; 78
    4368:	b0 e0       	ldi	r27, 0x00	; 0
    436a:	ee e4       	ldi	r30, 0x4E	; 78
    436c:	f0 e0       	ldi	r31, 0x00	; 0
    436e:	80 81       	ld	r24, Z
    4370:	8b 7f       	andi	r24, 0xFB	; 251
    4372:	8c 93       	st	X, r24
}
    4374:	cf 91       	pop	r28
    4376:	df 91       	pop	r29
    4378:	08 95       	ret

0000437a <TIMER_voidTimer1ICUSetTriggerEdge>:
void TIMER_voidTimer1ICUSetTriggerEdge(u8 Copy_u8ICUEdgeType)
{
    437a:	df 93       	push	r29
    437c:	cf 93       	push	r28
    437e:	0f 92       	push	r0
    4380:	cd b7       	in	r28, 0x3d	; 61
    4382:	de b7       	in	r29, 0x3e	; 62
    4384:	89 83       	std	Y+1, r24	; 0x01
   if(Copy_u8ICUEdgeType==TIMER1_ICU_RISING_EDGY_TYPE_MODE)
    4386:	89 81       	ldd	r24, Y+1	; 0x01
    4388:	81 30       	cpi	r24, 0x01	; 1
    438a:	41 f4       	brne	.+16     	; 0x439c <TIMER_voidTimer1ICUSetTriggerEdge+0x22>
   {
	  SET_BIT(TCCR1B,TCCR1B_ICES1);
    438c:	ae e4       	ldi	r26, 0x4E	; 78
    438e:	b0 e0       	ldi	r27, 0x00	; 0
    4390:	ee e4       	ldi	r30, 0x4E	; 78
    4392:	f0 e0       	ldi	r31, 0x00	; 0
    4394:	80 81       	ld	r24, Z
    4396:	80 64       	ori	r24, 0x40	; 64
    4398:	8c 93       	st	X, r24
    439a:	0a c0       	rjmp	.+20     	; 0x43b0 <TIMER_voidTimer1ICUSetTriggerEdge+0x36>
   }
   else if(Copy_u8ICUEdgeType==TIMER1_ICU_FALLING_EDGY_TYPE_MODE)
    439c:	89 81       	ldd	r24, Y+1	; 0x01
    439e:	88 23       	and	r24, r24
    43a0:	39 f4       	brne	.+14     	; 0x43b0 <TIMER_voidTimer1ICUSetTriggerEdge+0x36>
   {
	  CLR_BIT(TCCR1B,TCCR1B_ICES1);
    43a2:	ae e4       	ldi	r26, 0x4E	; 78
    43a4:	b0 e0       	ldi	r27, 0x00	; 0
    43a6:	ee e4       	ldi	r30, 0x4E	; 78
    43a8:	f0 e0       	ldi	r31, 0x00	; 0
    43aa:	80 81       	ld	r24, Z
    43ac:	8f 7b       	andi	r24, 0xBF	; 191
    43ae:	8c 93       	st	X, r24
   }
}
    43b0:	0f 90       	pop	r0
    43b2:	cf 91       	pop	r28
    43b4:	df 91       	pop	r29
    43b6:	08 95       	ret

000043b8 <TIMER_voidTimer1ICUGetInputCaptureValue>:
u16 TIMER_voidTimer1ICUGetInputCaptureValue(void)
{
    43b8:	df 93       	push	r29
    43ba:	cf 93       	push	r28
    43bc:	cd b7       	in	r28, 0x3d	; 61
    43be:	de b7       	in	r29, 0x3e	; 62
	 return TIMER_u16_ICR1;
    43c0:	e6 e4       	ldi	r30, 0x46	; 70
    43c2:	f0 e0       	ldi	r31, 0x00	; 0
    43c4:	80 81       	ld	r24, Z
    43c6:	91 81       	ldd	r25, Z+1	; 0x01
}
    43c8:	cf 91       	pop	r28
    43ca:	df 91       	pop	r29
    43cc:	08 95       	ret

000043ce <TIMER_voidTimer1ICUSetCallBack>:
void TIMER_voidTimer1ICUSetCallBack(void (*Copy_pFun) (void))
{
    43ce:	df 93       	push	r29
    43d0:	cf 93       	push	r28
    43d2:	00 d0       	rcall	.+0      	; 0x43d4 <TIMER_voidTimer1ICUSetCallBack+0x6>
    43d4:	cd b7       	in	r28, 0x3d	; 61
    43d6:	de b7       	in	r29, 0x3e	; 62
    43d8:	9a 83       	std	Y+2, r25	; 0x02
    43da:	89 83       	std	Y+1, r24	; 0x01
	 Timer1_pICUSetCallBack = Copy_pFun;
    43dc:	89 81       	ldd	r24, Y+1	; 0x01
    43de:	9a 81       	ldd	r25, Y+2	; 0x02
    43e0:	90 93 42 01 	sts	0x0142, r25
    43e4:	80 93 41 01 	sts	0x0141, r24
}
    43e8:	0f 90       	pop	r0
    43ea:	0f 90       	pop	r0
    43ec:	cf 91       	pop	r28
    43ee:	df 91       	pop	r29
    43f0:	08 95       	ret

000043f2 <TIMER_voidClearTimer1Value>:
void TIMER_voidClearTimer1Value(void)
{
    43f2:	df 93       	push	r29
    43f4:	cf 93       	push	r28
    43f6:	cd b7       	in	r28, 0x3d	; 61
    43f8:	de b7       	in	r29, 0x3e	; 62
	 TIMER_u16_TCNT1 = 0;
    43fa:	ec e4       	ldi	r30, 0x4C	; 76
    43fc:	f0 e0       	ldi	r31, 0x00	; 0
    43fe:	11 82       	std	Z+1, r1	; 0x01
    4400:	10 82       	st	Z, r1
}
    4402:	cf 91       	pop	r28
    4404:	df 91       	pop	r29
    4406:	08 95       	ret

00004408 <__vector_6>:
void __vector_6 (void)
{
    4408:	1f 92       	push	r1
    440a:	0f 92       	push	r0
    440c:	0f b6       	in	r0, 0x3f	; 63
    440e:	0f 92       	push	r0
    4410:	11 24       	eor	r1, r1
    4412:	2f 93       	push	r18
    4414:	3f 93       	push	r19
    4416:	4f 93       	push	r20
    4418:	5f 93       	push	r21
    441a:	6f 93       	push	r22
    441c:	7f 93       	push	r23
    441e:	8f 93       	push	r24
    4420:	9f 93       	push	r25
    4422:	af 93       	push	r26
    4424:	bf 93       	push	r27
    4426:	ef 93       	push	r30
    4428:	ff 93       	push	r31
    442a:	df 93       	push	r29
    442c:	cf 93       	push	r28
    442e:	cd b7       	in	r28, 0x3d	; 61
    4430:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_pICUSetCallBack!=NULL)
    4432:	80 91 41 01 	lds	r24, 0x0141
    4436:	90 91 42 01 	lds	r25, 0x0142
    443a:	00 97       	sbiw	r24, 0x00	; 0
    443c:	29 f0       	breq	.+10     	; 0x4448 <__vector_6+0x40>
	{
		Timer1_pICUSetCallBack();
    443e:	e0 91 41 01 	lds	r30, 0x0141
    4442:	f0 91 42 01 	lds	r31, 0x0142
    4446:	09 95       	icall
	}
}
    4448:	cf 91       	pop	r28
    444a:	df 91       	pop	r29
    444c:	ff 91       	pop	r31
    444e:	ef 91       	pop	r30
    4450:	bf 91       	pop	r27
    4452:	af 91       	pop	r26
    4454:	9f 91       	pop	r25
    4456:	8f 91       	pop	r24
    4458:	7f 91       	pop	r23
    445a:	6f 91       	pop	r22
    445c:	5f 91       	pop	r21
    445e:	4f 91       	pop	r20
    4460:	3f 91       	pop	r19
    4462:	2f 91       	pop	r18
    4464:	0f 90       	pop	r0
    4466:	0f be       	out	0x3f, r0	; 63
    4468:	0f 90       	pop	r0
    446a:	1f 90       	pop	r1
    446c:	18 95       	reti

0000446e <main>:
/* Global Variable */
u8 SPI_VALUE;

/**************************************** Entry point *******************************************/
void main(void)
{
    446e:	0f 93       	push	r16
    4470:	1f 93       	push	r17
    4472:	df 93       	push	r29
    4474:	cf 93       	push	r28
    4476:	cd b7       	in	r28, 0x3d	; 61
    4478:	de b7       	in	r29, 0x3e	; 62
    447a:	c4 50       	subi	r28, 0x04	; 4
    447c:	d1 40       	sbci	r29, 0x01	; 1
    447e:	0f b6       	in	r0, 0x3f	; 63
    4480:	f8 94       	cli
    4482:	de bf       	out	0x3e, r29	; 62
    4484:	0f be       	out	0x3f, r0	; 63
    4486:	cd bf       	out	0x3d, r28	; 61
	u8 Local_au8Password[4];
	u8 Local_u8Flag = 0;
    4488:	fe 01       	movw	r30, r28
    448a:	e0 50       	subi	r30, 0x00	; 0
    448c:	ff 4f       	sbci	r31, 0xFF	; 255
    448e:	10 82       	st	Z, r1
	u8 Local_u8ReadPassword = KPD_NO_PRESSED_KEY;
    4490:	fe 01       	movw	r30, r28
    4492:	e1 50       	subi	r30, 0x01	; 1
    4494:	ff 4f       	sbci	r31, 0xFF	; 255
    4496:	8f ef       	ldi	r24, 0xFF	; 255
    4498:	80 83       	st	Z, r24
	u8 Local_u8Tries = Max_Tries;
    449a:	fe 01       	movw	r30, r28
    449c:	e2 50       	subi	r30, 0x02	; 2
    449e:	ff 4f       	sbci	r31, 0xFF	; 255
    44a0:	83 e0       	ldi	r24, 0x03	; 3
    44a2:	80 83       	st	Z, r24
	u8 i;

	/* Initialize DIO */
	DIO_voidInit();
    44a4:	0e 94 12 11 	call	0x2224	; 0x2224 <DIO_voidInit>

	/* Initialize SPI as slave MCU */
	SPI_voidInitSlave();
    44a8:	0e 94 c7 18 	call	0x318e	; 0x318e <SPI_voidInitSlave>

	/* SPI Enable interrupt */
	SPI_voidEnableInterrupt();
    44ac:	0e 94 28 19 	call	0x3250	; 0x3250 <SPI_voidEnableInterrupt>

	/* SPI Function to set call back massage*/
	SPI_voidSetCallBack(FUNC_voidCallBack);
    44b0:	8d ee       	ldi	r24, 0xED	; 237
    44b2:	90 e3       	ldi	r25, 0x30	; 48
    44b4:	0e 94 44 19 	call	0x3288	; 0x3288 <SPI_voidSetCallBack>

	/* Initialize servo Motors */
	SERVO_voidTimer1InitOCR1AB();
    44b8:	0e 94 83 19 	call	0x3306	; 0x3306 <SERVO_voidTimer1InitOCR1AB>

	/* Initialize angle to be 90 */
	SERVO_voidTimer1ServoSetAngleOCR1A(90);
    44bc:	6a e5       	ldi	r22, 0x5A	; 90
    44be:	70 e0       	ldi	r23, 0x00	; 0
    44c0:	80 e0       	ldi	r24, 0x00	; 0
    44c2:	90 e0       	ldi	r25, 0x00	; 0
    44c4:	0e 94 b2 19 	call	0x3364	; 0x3364 <SERVO_voidTimer1ServoSetAngleOCR1A>
	SERVO_voidTimer1ServoSetAngleOCR1B(90);
    44c8:	6a e5       	ldi	r22, 0x5A	; 90
    44ca:	70 e0       	ldi	r23, 0x00	; 0
    44cc:	80 e0       	ldi	r24, 0x00	; 0
    44ce:	90 e0       	ldi	r25, 0x00	; 0
    44d0:	0e 94 0d 1a 	call	0x341a	; 0x341a <SERVO_voidTimer1ServoSetAngleOCR1B>

	/* Initialize Character LCD */
	CLCD_voidInit();
    44d4:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidInit>

	/* Initialize Keypad */
	KPD_voidInit();
    44d8:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <KPD_voidInit>

	/* Enable global interrupt */
	GIE_voidEnable();
    44dc:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <GIE_voidEnable>

	/* Control the position (0,0) of the printed characters */
	CLCD_voidGoToXY(0,0);
    44e0:	80 e0       	ldi	r24, 0x00	; 0
    44e2:	60 e0       	ldi	r22, 0x00	; 0
    44e4:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>


	if(EEPROM_u8ReadeData(EEPROM_Status_Flag)==First_Use) // to check if its the first time to use the safe
    44e8:	80 e2       	ldi	r24, 0x20	; 32
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <EEPROM_u8ReadeData>
    44f0:	8f 3f       	cpi	r24, 0xFF	; 255
    44f2:	09 f0       	breq	.+2      	; 0x44f6 <main+0x88>
    44f4:	01 c1       	rjmp	.+514    	; 0x46f8 <main+0x28a>
	{
		CLCD_voidSendString("Set Password:");
    44f6:	80 e6       	ldi	r24, 0x60	; 96
    44f8:	90 e0       	ldi	r25, 0x00	; 0
    44fa:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>
		for( i=0; i<=3 ; i++)
    44fe:	fe 01       	movw	r30, r28
    4500:	e3 50       	subi	r30, 0x03	; 3
    4502:	ff 4f       	sbci	r31, 0xFF	; 255
    4504:	10 82       	st	Z, r1
    4506:	ec c0       	rjmp	.+472    	; 0x46e0 <main+0x272>
		{
			do
			{
				Local_u8ReadPassword = KPD_u8GetPressedKey();
    4508:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KPD_u8GetPressedKey>
    450c:	fe 01       	movw	r30, r28
    450e:	e1 50       	subi	r30, 0x01	; 1
    4510:	ff 4f       	sbci	r31, 0xFF	; 255
    4512:	80 83       	st	Z, r24

			} while (Local_u8ReadPassword == KPD_NO_PRESSED_KEY);
    4514:	fe 01       	movw	r30, r28
    4516:	e1 50       	subi	r30, 0x01	; 1
    4518:	ff 4f       	sbci	r31, 0xFF	; 255
    451a:	80 81       	ld	r24, Z
    451c:	8f 3f       	cpi	r24, 0xFF	; 255
    451e:	a1 f3       	breq	.-24     	; 0x4508 <main+0x9a>

			CLCD_voidGoToXY(1,i);
    4520:	fe 01       	movw	r30, r28
    4522:	e3 50       	subi	r30, 0x03	; 3
    4524:	ff 4f       	sbci	r31, 0xFF	; 255
    4526:	81 e0       	ldi	r24, 0x01	; 1
    4528:	60 81       	ld	r22, Z
    452a:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
			CLCD_voidSendData(Local_u8ReadPassword);
    452e:	fe 01       	movw	r30, r28
    4530:	e1 50       	subi	r30, 0x01	; 1
    4532:	ff 4f       	sbci	r31, 0xFF	; 255
    4534:	80 81       	ld	r24, Z
    4536:	0e 94 a6 0a 	call	0x154c	; 0x154c <CLCD_voidSendData>
    453a:	fe 01       	movw	r30, r28
    453c:	e7 50       	subi	r30, 0x07	; 7
    453e:	ff 4f       	sbci	r31, 0xFF	; 255
    4540:	80 e0       	ldi	r24, 0x00	; 0
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	aa ef       	ldi	r26, 0xFA	; 250
    4546:	b3 e4       	ldi	r27, 0x43	; 67
    4548:	80 83       	st	Z, r24
    454a:	91 83       	std	Z+1, r25	; 0x01
    454c:	a2 83       	std	Z+2, r26	; 0x02
    454e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4550:	8e 01       	movw	r16, r28
    4552:	0b 50       	subi	r16, 0x0B	; 11
    4554:	1f 4f       	sbci	r17, 0xFF	; 255
    4556:	fe 01       	movw	r30, r28
    4558:	e7 50       	subi	r30, 0x07	; 7
    455a:	ff 4f       	sbci	r31, 0xFF	; 255
    455c:	60 81       	ld	r22, Z
    455e:	71 81       	ldd	r23, Z+1	; 0x01
    4560:	82 81       	ldd	r24, Z+2	; 0x02
    4562:	93 81       	ldd	r25, Z+3	; 0x03
    4564:	20 e0       	ldi	r18, 0x00	; 0
    4566:	30 e0       	ldi	r19, 0x00	; 0
    4568:	4a ef       	ldi	r20, 0xFA	; 250
    456a:	54 e4       	ldi	r21, 0x44	; 68
    456c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4570:	dc 01       	movw	r26, r24
    4572:	cb 01       	movw	r24, r22
    4574:	f8 01       	movw	r30, r16
    4576:	80 83       	st	Z, r24
    4578:	91 83       	std	Z+1, r25	; 0x01
    457a:	a2 83       	std	Z+2, r26	; 0x02
    457c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    457e:	fe 01       	movw	r30, r28
    4580:	eb 50       	subi	r30, 0x0B	; 11
    4582:	ff 4f       	sbci	r31, 0xFF	; 255
    4584:	60 81       	ld	r22, Z
    4586:	71 81       	ldd	r23, Z+1	; 0x01
    4588:	82 81       	ldd	r24, Z+2	; 0x02
    458a:	93 81       	ldd	r25, Z+3	; 0x03
    458c:	20 e0       	ldi	r18, 0x00	; 0
    458e:	30 e0       	ldi	r19, 0x00	; 0
    4590:	40 e8       	ldi	r20, 0x80	; 128
    4592:	5f e3       	ldi	r21, 0x3F	; 63
    4594:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4598:	88 23       	and	r24, r24
    459a:	44 f4       	brge	.+16     	; 0x45ac <main+0x13e>
		__ticks = 1;
    459c:	fe 01       	movw	r30, r28
    459e:	ed 50       	subi	r30, 0x0D	; 13
    45a0:	ff 4f       	sbci	r31, 0xFF	; 255
    45a2:	81 e0       	ldi	r24, 0x01	; 1
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	91 83       	std	Z+1, r25	; 0x01
    45a8:	80 83       	st	Z, r24
    45aa:	64 c0       	rjmp	.+200    	; 0x4674 <main+0x206>
	else if (__tmp > 65535)
    45ac:	fe 01       	movw	r30, r28
    45ae:	eb 50       	subi	r30, 0x0B	; 11
    45b0:	ff 4f       	sbci	r31, 0xFF	; 255
    45b2:	60 81       	ld	r22, Z
    45b4:	71 81       	ldd	r23, Z+1	; 0x01
    45b6:	82 81       	ldd	r24, Z+2	; 0x02
    45b8:	93 81       	ldd	r25, Z+3	; 0x03
    45ba:	20 e0       	ldi	r18, 0x00	; 0
    45bc:	3f ef       	ldi	r19, 0xFF	; 255
    45be:	4f e7       	ldi	r20, 0x7F	; 127
    45c0:	57 e4       	ldi	r21, 0x47	; 71
    45c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45c6:	18 16       	cp	r1, r24
    45c8:	0c f0       	brlt	.+2      	; 0x45cc <main+0x15e>
    45ca:	43 c0       	rjmp	.+134    	; 0x4652 <main+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45cc:	fe 01       	movw	r30, r28
    45ce:	e7 50       	subi	r30, 0x07	; 7
    45d0:	ff 4f       	sbci	r31, 0xFF	; 255
    45d2:	60 81       	ld	r22, Z
    45d4:	71 81       	ldd	r23, Z+1	; 0x01
    45d6:	82 81       	ldd	r24, Z+2	; 0x02
    45d8:	93 81       	ldd	r25, Z+3	; 0x03
    45da:	20 e0       	ldi	r18, 0x00	; 0
    45dc:	30 e0       	ldi	r19, 0x00	; 0
    45de:	40 e2       	ldi	r20, 0x20	; 32
    45e0:	51 e4       	ldi	r21, 0x41	; 65
    45e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45e6:	dc 01       	movw	r26, r24
    45e8:	cb 01       	movw	r24, r22
    45ea:	8e 01       	movw	r16, r28
    45ec:	0d 50       	subi	r16, 0x0D	; 13
    45ee:	1f 4f       	sbci	r17, 0xFF	; 255
    45f0:	bc 01       	movw	r22, r24
    45f2:	cd 01       	movw	r24, r26
    45f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45f8:	dc 01       	movw	r26, r24
    45fa:	cb 01       	movw	r24, r22
    45fc:	f8 01       	movw	r30, r16
    45fe:	91 83       	std	Z+1, r25	; 0x01
    4600:	80 83       	st	Z, r24
    4602:	1f c0       	rjmp	.+62     	; 0x4642 <main+0x1d4>
    4604:	fe 01       	movw	r30, r28
    4606:	ef 50       	subi	r30, 0x0F	; 15
    4608:	ff 4f       	sbci	r31, 0xFF	; 255
    460a:	88 ec       	ldi	r24, 0xC8	; 200
    460c:	90 e0       	ldi	r25, 0x00	; 0
    460e:	91 83       	std	Z+1, r25	; 0x01
    4610:	80 83       	st	Z, r24
    4612:	fe 01       	movw	r30, r28
    4614:	ef 50       	subi	r30, 0x0F	; 15
    4616:	ff 4f       	sbci	r31, 0xFF	; 255
    4618:	80 81       	ld	r24, Z
    461a:	91 81       	ldd	r25, Z+1	; 0x01
    461c:	01 97       	sbiw	r24, 0x01	; 1
    461e:	f1 f7       	brne	.-4      	; 0x461c <main+0x1ae>
    4620:	fe 01       	movw	r30, r28
    4622:	ef 50       	subi	r30, 0x0F	; 15
    4624:	ff 4f       	sbci	r31, 0xFF	; 255
    4626:	91 83       	std	Z+1, r25	; 0x01
    4628:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    462a:	de 01       	movw	r26, r28
    462c:	ad 50       	subi	r26, 0x0D	; 13
    462e:	bf 4f       	sbci	r27, 0xFF	; 255
    4630:	fe 01       	movw	r30, r28
    4632:	ed 50       	subi	r30, 0x0D	; 13
    4634:	ff 4f       	sbci	r31, 0xFF	; 255
    4636:	80 81       	ld	r24, Z
    4638:	91 81       	ldd	r25, Z+1	; 0x01
    463a:	01 97       	sbiw	r24, 0x01	; 1
    463c:	11 96       	adiw	r26, 0x01	; 1
    463e:	9c 93       	st	X, r25
    4640:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4642:	fe 01       	movw	r30, r28
    4644:	ed 50       	subi	r30, 0x0D	; 13
    4646:	ff 4f       	sbci	r31, 0xFF	; 255
    4648:	80 81       	ld	r24, Z
    464a:	91 81       	ldd	r25, Z+1	; 0x01
    464c:	00 97       	sbiw	r24, 0x00	; 0
    464e:	d1 f6       	brne	.-76     	; 0x4604 <main+0x196>
    4650:	27 c0       	rjmp	.+78     	; 0x46a0 <main+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4652:	8e 01       	movw	r16, r28
    4654:	0d 50       	subi	r16, 0x0D	; 13
    4656:	1f 4f       	sbci	r17, 0xFF	; 255
    4658:	fe 01       	movw	r30, r28
    465a:	eb 50       	subi	r30, 0x0B	; 11
    465c:	ff 4f       	sbci	r31, 0xFF	; 255
    465e:	60 81       	ld	r22, Z
    4660:	71 81       	ldd	r23, Z+1	; 0x01
    4662:	82 81       	ldd	r24, Z+2	; 0x02
    4664:	93 81       	ldd	r25, Z+3	; 0x03
    4666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    466a:	dc 01       	movw	r26, r24
    466c:	cb 01       	movw	r24, r22
    466e:	f8 01       	movw	r30, r16
    4670:	91 83       	std	Z+1, r25	; 0x01
    4672:	80 83       	st	Z, r24
    4674:	de 01       	movw	r26, r28
    4676:	a1 51       	subi	r26, 0x11	; 17
    4678:	bf 4f       	sbci	r27, 0xFF	; 255
    467a:	fe 01       	movw	r30, r28
    467c:	ed 50       	subi	r30, 0x0D	; 13
    467e:	ff 4f       	sbci	r31, 0xFF	; 255
    4680:	80 81       	ld	r24, Z
    4682:	91 81       	ldd	r25, Z+1	; 0x01
    4684:	8d 93       	st	X+, r24
    4686:	9c 93       	st	X, r25
    4688:	fe 01       	movw	r30, r28
    468a:	e1 51       	subi	r30, 0x11	; 17
    468c:	ff 4f       	sbci	r31, 0xFF	; 255
    468e:	80 81       	ld	r24, Z
    4690:	91 81       	ldd	r25, Z+1	; 0x01
    4692:	01 97       	sbiw	r24, 0x01	; 1
    4694:	f1 f7       	brne	.-4      	; 0x4692 <main+0x224>
    4696:	fe 01       	movw	r30, r28
    4698:	e1 51       	subi	r30, 0x11	; 17
    469a:	ff 4f       	sbci	r31, 0xFF	; 255
    469c:	91 83       	std	Z+1, r25	; 0x01
    469e:	80 83       	st	Z, r24
			_delay_ms(500);
			CLCD_voidGoToXY(1,i);
    46a0:	fe 01       	movw	r30, r28
    46a2:	e3 50       	subi	r30, 0x03	; 3
    46a4:	ff 4f       	sbci	r31, 0xFF	; 255
    46a6:	81 e0       	ldi	r24, 0x01	; 1
    46a8:	60 81       	ld	r22, Z
    46aa:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
			CLCD_voidSendData('*');
    46ae:	8a e2       	ldi	r24, 0x2A	; 42
    46b0:	0e 94 a6 0a 	call	0x154c	; 0x154c <CLCD_voidSendData>
			EEPROM_enuWriteData(EEPROM_PASSWORD_LOCATION1+i,Local_u8ReadPassword);
    46b4:	fe 01       	movw	r30, r28
    46b6:	e3 50       	subi	r30, 0x03	; 3
    46b8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ba:	80 81       	ld	r24, Z
    46bc:	88 2f       	mov	r24, r24
    46be:	90 e0       	ldi	r25, 0x00	; 0
    46c0:	81 96       	adiw	r24, 0x21	; 33
    46c2:	fe 01       	movw	r30, r28
    46c4:	e1 50       	subi	r30, 0x01	; 1
    46c6:	ff 4f       	sbci	r31, 0xFF	; 255
    46c8:	60 81       	ld	r22, Z
    46ca:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <EEPROM_enuWriteData>


	if(EEPROM_u8ReadeData(EEPROM_Status_Flag)==First_Use) // to check if its the first time to use the safe
	{
		CLCD_voidSendString("Set Password:");
		for( i=0; i<=3 ; i++)
    46ce:	de 01       	movw	r26, r28
    46d0:	a3 50       	subi	r26, 0x03	; 3
    46d2:	bf 4f       	sbci	r27, 0xFF	; 255
    46d4:	fe 01       	movw	r30, r28
    46d6:	e3 50       	subi	r30, 0x03	; 3
    46d8:	ff 4f       	sbci	r31, 0xFF	; 255
    46da:	80 81       	ld	r24, Z
    46dc:	8f 5f       	subi	r24, 0xFF	; 255
    46de:	8c 93       	st	X, r24
    46e0:	fe 01       	movw	r30, r28
    46e2:	e3 50       	subi	r30, 0x03	; 3
    46e4:	ff 4f       	sbci	r31, 0xFF	; 255
    46e6:	80 81       	ld	r24, Z
    46e8:	84 30       	cpi	r24, 0x04	; 4
    46ea:	08 f4       	brcc	.+2      	; 0x46ee <main+0x280>
    46ec:	0d cf       	rjmp	.-486    	; 0x4508 <main+0x9a>
			CLCD_voidGoToXY(1,i);
			CLCD_voidSendData('*');
			EEPROM_enuWriteData(EEPROM_PASSWORD_LOCATION1+i,Local_u8ReadPassword);
		}

		EEPROM_enuWriteData(EEPROM_Status_Flag,Entered_The_Home); // set the flag to 0
    46ee:	80 e2       	ldi	r24, 0x20	; 32
    46f0:	90 e0       	ldi	r25, 0x00	; 0
    46f2:	60 e0       	ldi	r22, 0x00	; 0
    46f4:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <EEPROM_enuWriteData>
	}

	/* Clear LCD */
	CLCD_voidClearScreen();
    46f8:	0e 94 08 11 	call	0x2210	; 0x2210 <CLCD_voidClearScreen>

	/* Control the position (0,2) of the printed characters */
	CLCD_voidGoToXY(0,2);
    46fc:	80 e0       	ldi	r24, 0x00	; 0
    46fe:	62 e0       	ldi	r22, 0x02	; 2
    4700:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>

	/* Print string in LCD */
	CLCD_voidSendString("Welcome Home");
    4704:	8e e6       	ldi	r24, 0x6E	; 110
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>
    470c:	fe 01       	movw	r30, r28
    470e:	e5 51       	subi	r30, 0x15	; 21
    4710:	ff 4f       	sbci	r31, 0xFF	; 255
    4712:	80 e0       	ldi	r24, 0x00	; 0
    4714:	90 e0       	ldi	r25, 0x00	; 0
    4716:	aa e7       	ldi	r26, 0x7A	; 122
    4718:	b4 e4       	ldi	r27, 0x44	; 68
    471a:	80 83       	st	Z, r24
    471c:	91 83       	std	Z+1, r25	; 0x01
    471e:	a2 83       	std	Z+2, r26	; 0x02
    4720:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4722:	8e 01       	movw	r16, r28
    4724:	09 51       	subi	r16, 0x19	; 25
    4726:	1f 4f       	sbci	r17, 0xFF	; 255
    4728:	fe 01       	movw	r30, r28
    472a:	e5 51       	subi	r30, 0x15	; 21
    472c:	ff 4f       	sbci	r31, 0xFF	; 255
    472e:	60 81       	ld	r22, Z
    4730:	71 81       	ldd	r23, Z+1	; 0x01
    4732:	82 81       	ldd	r24, Z+2	; 0x02
    4734:	93 81       	ldd	r25, Z+3	; 0x03
    4736:	20 e0       	ldi	r18, 0x00	; 0
    4738:	30 e0       	ldi	r19, 0x00	; 0
    473a:	4a ef       	ldi	r20, 0xFA	; 250
    473c:	54 e4       	ldi	r21, 0x44	; 68
    473e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4742:	dc 01       	movw	r26, r24
    4744:	cb 01       	movw	r24, r22
    4746:	f8 01       	movw	r30, r16
    4748:	80 83       	st	Z, r24
    474a:	91 83       	std	Z+1, r25	; 0x01
    474c:	a2 83       	std	Z+2, r26	; 0x02
    474e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4750:	fe 01       	movw	r30, r28
    4752:	e9 51       	subi	r30, 0x19	; 25
    4754:	ff 4f       	sbci	r31, 0xFF	; 255
    4756:	60 81       	ld	r22, Z
    4758:	71 81       	ldd	r23, Z+1	; 0x01
    475a:	82 81       	ldd	r24, Z+2	; 0x02
    475c:	93 81       	ldd	r25, Z+3	; 0x03
    475e:	20 e0       	ldi	r18, 0x00	; 0
    4760:	30 e0       	ldi	r19, 0x00	; 0
    4762:	40 e8       	ldi	r20, 0x80	; 128
    4764:	5f e3       	ldi	r21, 0x3F	; 63
    4766:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    476a:	88 23       	and	r24, r24
    476c:	44 f4       	brge	.+16     	; 0x477e <main+0x310>
		__ticks = 1;
    476e:	fe 01       	movw	r30, r28
    4770:	eb 51       	subi	r30, 0x1B	; 27
    4772:	ff 4f       	sbci	r31, 0xFF	; 255
    4774:	81 e0       	ldi	r24, 0x01	; 1
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	91 83       	std	Z+1, r25	; 0x01
    477a:	80 83       	st	Z, r24
    477c:	65 c0       	rjmp	.+202    	; 0x4848 <main+0x3da>
	else if (__tmp > 65535)
    477e:	fe 01       	movw	r30, r28
    4780:	e9 51       	subi	r30, 0x19	; 25
    4782:	ff 4f       	sbci	r31, 0xFF	; 255
    4784:	60 81       	ld	r22, Z
    4786:	71 81       	ldd	r23, Z+1	; 0x01
    4788:	82 81       	ldd	r24, Z+2	; 0x02
    478a:	93 81       	ldd	r25, Z+3	; 0x03
    478c:	20 e0       	ldi	r18, 0x00	; 0
    478e:	3f ef       	ldi	r19, 0xFF	; 255
    4790:	4f e7       	ldi	r20, 0x7F	; 127
    4792:	57 e4       	ldi	r21, 0x47	; 71
    4794:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4798:	18 16       	cp	r1, r24
    479a:	0c f0       	brlt	.+2      	; 0x479e <main+0x330>
    479c:	44 c0       	rjmp	.+136    	; 0x4826 <main+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    479e:	fe 01       	movw	r30, r28
    47a0:	e5 51       	subi	r30, 0x15	; 21
    47a2:	ff 4f       	sbci	r31, 0xFF	; 255
    47a4:	60 81       	ld	r22, Z
    47a6:	71 81       	ldd	r23, Z+1	; 0x01
    47a8:	82 81       	ldd	r24, Z+2	; 0x02
    47aa:	93 81       	ldd	r25, Z+3	; 0x03
    47ac:	20 e0       	ldi	r18, 0x00	; 0
    47ae:	30 e0       	ldi	r19, 0x00	; 0
    47b0:	40 e2       	ldi	r20, 0x20	; 32
    47b2:	51 e4       	ldi	r21, 0x41	; 65
    47b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47b8:	dc 01       	movw	r26, r24
    47ba:	cb 01       	movw	r24, r22
    47bc:	8e 01       	movw	r16, r28
    47be:	0b 51       	subi	r16, 0x1B	; 27
    47c0:	1f 4f       	sbci	r17, 0xFF	; 255
    47c2:	bc 01       	movw	r22, r24
    47c4:	cd 01       	movw	r24, r26
    47c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47ca:	dc 01       	movw	r26, r24
    47cc:	cb 01       	movw	r24, r22
    47ce:	f8 01       	movw	r30, r16
    47d0:	91 83       	std	Z+1, r25	; 0x01
    47d2:	80 83       	st	Z, r24
    47d4:	1f c0       	rjmp	.+62     	; 0x4814 <main+0x3a6>
    47d6:	fe 01       	movw	r30, r28
    47d8:	ed 51       	subi	r30, 0x1D	; 29
    47da:	ff 4f       	sbci	r31, 0xFF	; 255
    47dc:	88 ec       	ldi	r24, 0xC8	; 200
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	91 83       	std	Z+1, r25	; 0x01
    47e2:	80 83       	st	Z, r24
    47e4:	fe 01       	movw	r30, r28
    47e6:	ed 51       	subi	r30, 0x1D	; 29
    47e8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ea:	80 81       	ld	r24, Z
    47ec:	91 81       	ldd	r25, Z+1	; 0x01
    47ee:	01 97       	sbiw	r24, 0x01	; 1
    47f0:	f1 f7       	brne	.-4      	; 0x47ee <main+0x380>
    47f2:	fe 01       	movw	r30, r28
    47f4:	ed 51       	subi	r30, 0x1D	; 29
    47f6:	ff 4f       	sbci	r31, 0xFF	; 255
    47f8:	91 83       	std	Z+1, r25	; 0x01
    47fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47fc:	de 01       	movw	r26, r28
    47fe:	ab 51       	subi	r26, 0x1B	; 27
    4800:	bf 4f       	sbci	r27, 0xFF	; 255
    4802:	fe 01       	movw	r30, r28
    4804:	eb 51       	subi	r30, 0x1B	; 27
    4806:	ff 4f       	sbci	r31, 0xFF	; 255
    4808:	80 81       	ld	r24, Z
    480a:	91 81       	ldd	r25, Z+1	; 0x01
    480c:	01 97       	sbiw	r24, 0x01	; 1
    480e:	11 96       	adiw	r26, 0x01	; 1
    4810:	9c 93       	st	X, r25
    4812:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4814:	fe 01       	movw	r30, r28
    4816:	eb 51       	subi	r30, 0x1B	; 27
    4818:	ff 4f       	sbci	r31, 0xFF	; 255
    481a:	80 81       	ld	r24, Z
    481c:	91 81       	ldd	r25, Z+1	; 0x01
    481e:	00 97       	sbiw	r24, 0x00	; 0
    4820:	d1 f6       	brne	.-76     	; 0x47d6 <main+0x368>
    4822:	0c 94 e4 30 	jmp	0x61c8	; 0x61c8 <main+0x1d5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4826:	8e 01       	movw	r16, r28
    4828:	0b 51       	subi	r16, 0x1B	; 27
    482a:	1f 4f       	sbci	r17, 0xFF	; 255
    482c:	fe 01       	movw	r30, r28
    482e:	e9 51       	subi	r30, 0x19	; 25
    4830:	ff 4f       	sbci	r31, 0xFF	; 255
    4832:	60 81       	ld	r22, Z
    4834:	71 81       	ldd	r23, Z+1	; 0x01
    4836:	82 81       	ldd	r24, Z+2	; 0x02
    4838:	93 81       	ldd	r25, Z+3	; 0x03
    483a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    483e:	dc 01       	movw	r26, r24
    4840:	cb 01       	movw	r24, r22
    4842:	f8 01       	movw	r30, r16
    4844:	91 83       	std	Z+1, r25	; 0x01
    4846:	80 83       	st	Z, r24
    4848:	de 01       	movw	r26, r28
    484a:	af 51       	subi	r26, 0x1F	; 31
    484c:	bf 4f       	sbci	r27, 0xFF	; 255
    484e:	fe 01       	movw	r30, r28
    4850:	eb 51       	subi	r30, 0x1B	; 27
    4852:	ff 4f       	sbci	r31, 0xFF	; 255
    4854:	80 81       	ld	r24, Z
    4856:	91 81       	ldd	r25, Z+1	; 0x01
    4858:	11 96       	adiw	r26, 0x01	; 1
    485a:	9c 93       	st	X, r25
    485c:	8e 93       	st	-X, r24
    485e:	fe 01       	movw	r30, r28
    4860:	ef 51       	subi	r30, 0x1F	; 31
    4862:	ff 4f       	sbci	r31, 0xFF	; 255
    4864:	80 81       	ld	r24, Z
    4866:	91 81       	ldd	r25, Z+1	; 0x01
    4868:	01 97       	sbiw	r24, 0x01	; 1
    486a:	f1 f7       	brne	.-4      	; 0x4868 <main+0x3fa>
    486c:	fe 01       	movw	r30, r28
    486e:	ef 51       	subi	r30, 0x1F	; 31
    4870:	ff 4f       	sbci	r31, 0xFF	; 255
    4872:	91 83       	std	Z+1, r25	; 0x01
    4874:	80 83       	st	Z, r24
    4876:	0c 94 e4 30 	jmp	0x61c8	; 0x61c8 <main+0x1d5a>
	for(;;)
	{
		while(Local_u8Flag == 0)
		{
			/* Clear LCD */
			CLCD_voidClearScreen();
    487a:	0e 94 08 11 	call	0x2210	; 0x2210 <CLCD_voidClearScreen>

			/* Control the position (0,2) and print string in LCD  */
			CLCD_voidGoToXY(0,2);
    487e:	80 e0       	ldi	r24, 0x00	; 0
    4880:	62 e0       	ldi	r22, 0x02	; 2
    4882:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
			CLCD_voidSendString("Chose a Mode");
    4886:	8b e7       	ldi	r24, 0x7B	; 123
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>
    488e:	fe 01       	movw	r30, r28
    4890:	e3 52       	subi	r30, 0x23	; 35
    4892:	ff 4f       	sbci	r31, 0xFF	; 255
    4894:	80 e0       	ldi	r24, 0x00	; 0
    4896:	90 e0       	ldi	r25, 0x00	; 0
    4898:	a8 ec       	ldi	r26, 0xC8	; 200
    489a:	b2 e4       	ldi	r27, 0x42	; 66
    489c:	80 83       	st	Z, r24
    489e:	91 83       	std	Z+1, r25	; 0x01
    48a0:	a2 83       	std	Z+2, r26	; 0x02
    48a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48a4:	8e 01       	movw	r16, r28
    48a6:	07 52       	subi	r16, 0x27	; 39
    48a8:	1f 4f       	sbci	r17, 0xFF	; 255
    48aa:	fe 01       	movw	r30, r28
    48ac:	e3 52       	subi	r30, 0x23	; 35
    48ae:	ff 4f       	sbci	r31, 0xFF	; 255
    48b0:	60 81       	ld	r22, Z
    48b2:	71 81       	ldd	r23, Z+1	; 0x01
    48b4:	82 81       	ldd	r24, Z+2	; 0x02
    48b6:	93 81       	ldd	r25, Z+3	; 0x03
    48b8:	20 e0       	ldi	r18, 0x00	; 0
    48ba:	30 e0       	ldi	r19, 0x00	; 0
    48bc:	4a ef       	ldi	r20, 0xFA	; 250
    48be:	54 e4       	ldi	r21, 0x44	; 68
    48c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48c4:	dc 01       	movw	r26, r24
    48c6:	cb 01       	movw	r24, r22
    48c8:	f8 01       	movw	r30, r16
    48ca:	80 83       	st	Z, r24
    48cc:	91 83       	std	Z+1, r25	; 0x01
    48ce:	a2 83       	std	Z+2, r26	; 0x02
    48d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48d2:	fe 01       	movw	r30, r28
    48d4:	e7 52       	subi	r30, 0x27	; 39
    48d6:	ff 4f       	sbci	r31, 0xFF	; 255
    48d8:	60 81       	ld	r22, Z
    48da:	71 81       	ldd	r23, Z+1	; 0x01
    48dc:	82 81       	ldd	r24, Z+2	; 0x02
    48de:	93 81       	ldd	r25, Z+3	; 0x03
    48e0:	20 e0       	ldi	r18, 0x00	; 0
    48e2:	30 e0       	ldi	r19, 0x00	; 0
    48e4:	40 e8       	ldi	r20, 0x80	; 128
    48e6:	5f e3       	ldi	r21, 0x3F	; 63
    48e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48ec:	88 23       	and	r24, r24
    48ee:	44 f4       	brge	.+16     	; 0x4900 <main+0x492>
		__ticks = 1;
    48f0:	fe 01       	movw	r30, r28
    48f2:	e9 52       	subi	r30, 0x29	; 41
    48f4:	ff 4f       	sbci	r31, 0xFF	; 255
    48f6:	81 e0       	ldi	r24, 0x01	; 1
    48f8:	90 e0       	ldi	r25, 0x00	; 0
    48fa:	91 83       	std	Z+1, r25	; 0x01
    48fc:	80 83       	st	Z, r24
    48fe:	64 c0       	rjmp	.+200    	; 0x49c8 <main+0x55a>
	else if (__tmp > 65535)
    4900:	fe 01       	movw	r30, r28
    4902:	e7 52       	subi	r30, 0x27	; 39
    4904:	ff 4f       	sbci	r31, 0xFF	; 255
    4906:	60 81       	ld	r22, Z
    4908:	71 81       	ldd	r23, Z+1	; 0x01
    490a:	82 81       	ldd	r24, Z+2	; 0x02
    490c:	93 81       	ldd	r25, Z+3	; 0x03
    490e:	20 e0       	ldi	r18, 0x00	; 0
    4910:	3f ef       	ldi	r19, 0xFF	; 255
    4912:	4f e7       	ldi	r20, 0x7F	; 127
    4914:	57 e4       	ldi	r21, 0x47	; 71
    4916:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    491a:	18 16       	cp	r1, r24
    491c:	0c f0       	brlt	.+2      	; 0x4920 <main+0x4b2>
    491e:	43 c0       	rjmp	.+134    	; 0x49a6 <main+0x538>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4920:	fe 01       	movw	r30, r28
    4922:	e3 52       	subi	r30, 0x23	; 35
    4924:	ff 4f       	sbci	r31, 0xFF	; 255
    4926:	60 81       	ld	r22, Z
    4928:	71 81       	ldd	r23, Z+1	; 0x01
    492a:	82 81       	ldd	r24, Z+2	; 0x02
    492c:	93 81       	ldd	r25, Z+3	; 0x03
    492e:	20 e0       	ldi	r18, 0x00	; 0
    4930:	30 e0       	ldi	r19, 0x00	; 0
    4932:	40 e2       	ldi	r20, 0x20	; 32
    4934:	51 e4       	ldi	r21, 0x41	; 65
    4936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    493a:	dc 01       	movw	r26, r24
    493c:	cb 01       	movw	r24, r22
    493e:	8e 01       	movw	r16, r28
    4940:	09 52       	subi	r16, 0x29	; 41
    4942:	1f 4f       	sbci	r17, 0xFF	; 255
    4944:	bc 01       	movw	r22, r24
    4946:	cd 01       	movw	r24, r26
    4948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    494c:	dc 01       	movw	r26, r24
    494e:	cb 01       	movw	r24, r22
    4950:	f8 01       	movw	r30, r16
    4952:	91 83       	std	Z+1, r25	; 0x01
    4954:	80 83       	st	Z, r24
    4956:	1f c0       	rjmp	.+62     	; 0x4996 <main+0x528>
    4958:	fe 01       	movw	r30, r28
    495a:	eb 52       	subi	r30, 0x2B	; 43
    495c:	ff 4f       	sbci	r31, 0xFF	; 255
    495e:	88 ec       	ldi	r24, 0xC8	; 200
    4960:	90 e0       	ldi	r25, 0x00	; 0
    4962:	91 83       	std	Z+1, r25	; 0x01
    4964:	80 83       	st	Z, r24
    4966:	fe 01       	movw	r30, r28
    4968:	eb 52       	subi	r30, 0x2B	; 43
    496a:	ff 4f       	sbci	r31, 0xFF	; 255
    496c:	80 81       	ld	r24, Z
    496e:	91 81       	ldd	r25, Z+1	; 0x01
    4970:	01 97       	sbiw	r24, 0x01	; 1
    4972:	f1 f7       	brne	.-4      	; 0x4970 <main+0x502>
    4974:	fe 01       	movw	r30, r28
    4976:	eb 52       	subi	r30, 0x2B	; 43
    4978:	ff 4f       	sbci	r31, 0xFF	; 255
    497a:	91 83       	std	Z+1, r25	; 0x01
    497c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    497e:	de 01       	movw	r26, r28
    4980:	a9 52       	subi	r26, 0x29	; 41
    4982:	bf 4f       	sbci	r27, 0xFF	; 255
    4984:	fe 01       	movw	r30, r28
    4986:	e9 52       	subi	r30, 0x29	; 41
    4988:	ff 4f       	sbci	r31, 0xFF	; 255
    498a:	80 81       	ld	r24, Z
    498c:	91 81       	ldd	r25, Z+1	; 0x01
    498e:	01 97       	sbiw	r24, 0x01	; 1
    4990:	11 96       	adiw	r26, 0x01	; 1
    4992:	9c 93       	st	X, r25
    4994:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4996:	fe 01       	movw	r30, r28
    4998:	e9 52       	subi	r30, 0x29	; 41
    499a:	ff 4f       	sbci	r31, 0xFF	; 255
    499c:	80 81       	ld	r24, Z
    499e:	91 81       	ldd	r25, Z+1	; 0x01
    49a0:	00 97       	sbiw	r24, 0x00	; 0
    49a2:	d1 f6       	brne	.-76     	; 0x4958 <main+0x4ea>
    49a4:	27 c0       	rjmp	.+78     	; 0x49f4 <main+0x586>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49a6:	8e 01       	movw	r16, r28
    49a8:	09 52       	subi	r16, 0x29	; 41
    49aa:	1f 4f       	sbci	r17, 0xFF	; 255
    49ac:	fe 01       	movw	r30, r28
    49ae:	e7 52       	subi	r30, 0x27	; 39
    49b0:	ff 4f       	sbci	r31, 0xFF	; 255
    49b2:	60 81       	ld	r22, Z
    49b4:	71 81       	ldd	r23, Z+1	; 0x01
    49b6:	82 81       	ldd	r24, Z+2	; 0x02
    49b8:	93 81       	ldd	r25, Z+3	; 0x03
    49ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49be:	dc 01       	movw	r26, r24
    49c0:	cb 01       	movw	r24, r22
    49c2:	f8 01       	movw	r30, r16
    49c4:	91 83       	std	Z+1, r25	; 0x01
    49c6:	80 83       	st	Z, r24
    49c8:	de 01       	movw	r26, r28
    49ca:	ad 52       	subi	r26, 0x2D	; 45
    49cc:	bf 4f       	sbci	r27, 0xFF	; 255
    49ce:	fe 01       	movw	r30, r28
    49d0:	e9 52       	subi	r30, 0x29	; 41
    49d2:	ff 4f       	sbci	r31, 0xFF	; 255
    49d4:	80 81       	ld	r24, Z
    49d6:	91 81       	ldd	r25, Z+1	; 0x01
    49d8:	8d 93       	st	X+, r24
    49da:	9c 93       	st	X, r25
    49dc:	fe 01       	movw	r30, r28
    49de:	ed 52       	subi	r30, 0x2D	; 45
    49e0:	ff 4f       	sbci	r31, 0xFF	; 255
    49e2:	80 81       	ld	r24, Z
    49e4:	91 81       	ldd	r25, Z+1	; 0x01
    49e6:	01 97       	sbiw	r24, 0x01	; 1
    49e8:	f1 f7       	brne	.-4      	; 0x49e6 <main+0x578>
    49ea:	fe 01       	movw	r30, r28
    49ec:	ed 52       	subi	r30, 0x2D	; 45
    49ee:	ff 4f       	sbci	r31, 0xFF	; 255
    49f0:	91 83       	std	Z+1, r25	; 0x01
    49f2:	80 83       	st	Z, r24

			/* wait 1000 ms */
			_delay_ms(100);

			/* Clear LCD */
			CLCD_voidClearScreen();
    49f4:	0e 94 08 11 	call	0x2210	; 0x2210 <CLCD_voidClearScreen>

			Local_u8ReadPassword = KPD_NO_PRESSED_KEY;
    49f8:	fe 01       	movw	r30, r28
    49fa:	e1 50       	subi	r30, 0x01	; 1
    49fc:	ff 4f       	sbci	r31, 0xFF	; 255
    49fe:	8f ef       	ldi	r24, 0xFF	; 255
    4a00:	80 83       	st	Z, r24
			CLCD_voidSendString("1-Enter Pass");
    4a02:	88 e8       	ldi	r24, 0x88	; 136
    4a04:	90 e0       	ldi	r25, 0x00	; 0
    4a06:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>
			CLCD_voidGoToXY(1,0);
    4a0a:	81 e0       	ldi	r24, 0x01	; 1
    4a0c:	60 e0       	ldi	r22, 0x00	; 0
    4a0e:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
			CLCD_voidSendString("2-Change Pass");
    4a12:	85 e9       	ldi	r24, 0x95	; 149
    4a14:	90 e0       	ldi	r25, 0x00	; 0
    4a16:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>
			do
			{
				Local_u8ReadPassword = KPD_u8GetPressedKey();
    4a1a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KPD_u8GetPressedKey>
    4a1e:	fe 01       	movw	r30, r28
    4a20:	e1 50       	subi	r30, 0x01	; 1
    4a22:	ff 4f       	sbci	r31, 0xFF	; 255
    4a24:	80 83       	st	Z, r24

			} while (Local_u8ReadPassword == KPD_NO_PRESSED_KEY);
    4a26:	fe 01       	movw	r30, r28
    4a28:	e1 50       	subi	r30, 0x01	; 1
    4a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2c:	80 81       	ld	r24, Z
    4a2e:	8f 3f       	cpi	r24, 0xFF	; 255
    4a30:	a1 f3       	breq	.-24     	; 0x4a1a <main+0x5ac>
    4a32:	fe 01       	movw	r30, r28
    4a34:	e1 53       	subi	r30, 0x31	; 49
    4a36:	ff 4f       	sbci	r31, 0xFF	; 255
    4a38:	80 e0       	ldi	r24, 0x00	; 0
    4a3a:	90 e0       	ldi	r25, 0x00	; 0
    4a3c:	aa ef       	ldi	r26, 0xFA	; 250
    4a3e:	b3 e4       	ldi	r27, 0x43	; 67
    4a40:	80 83       	st	Z, r24
    4a42:	91 83       	std	Z+1, r25	; 0x01
    4a44:	a2 83       	std	Z+2, r26	; 0x02
    4a46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a48:	8e 01       	movw	r16, r28
    4a4a:	05 53       	subi	r16, 0x35	; 53
    4a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a4e:	fe 01       	movw	r30, r28
    4a50:	e1 53       	subi	r30, 0x31	; 49
    4a52:	ff 4f       	sbci	r31, 0xFF	; 255
    4a54:	60 81       	ld	r22, Z
    4a56:	71 81       	ldd	r23, Z+1	; 0x01
    4a58:	82 81       	ldd	r24, Z+2	; 0x02
    4a5a:	93 81       	ldd	r25, Z+3	; 0x03
    4a5c:	20 e0       	ldi	r18, 0x00	; 0
    4a5e:	30 e0       	ldi	r19, 0x00	; 0
    4a60:	4a ef       	ldi	r20, 0xFA	; 250
    4a62:	54 e4       	ldi	r21, 0x44	; 68
    4a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a68:	dc 01       	movw	r26, r24
    4a6a:	cb 01       	movw	r24, r22
    4a6c:	f8 01       	movw	r30, r16
    4a6e:	80 83       	st	Z, r24
    4a70:	91 83       	std	Z+1, r25	; 0x01
    4a72:	a2 83       	std	Z+2, r26	; 0x02
    4a74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a76:	fe 01       	movw	r30, r28
    4a78:	e5 53       	subi	r30, 0x35	; 53
    4a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7c:	60 81       	ld	r22, Z
    4a7e:	71 81       	ldd	r23, Z+1	; 0x01
    4a80:	82 81       	ldd	r24, Z+2	; 0x02
    4a82:	93 81       	ldd	r25, Z+3	; 0x03
    4a84:	20 e0       	ldi	r18, 0x00	; 0
    4a86:	30 e0       	ldi	r19, 0x00	; 0
    4a88:	40 e8       	ldi	r20, 0x80	; 128
    4a8a:	5f e3       	ldi	r21, 0x3F	; 63
    4a8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a90:	88 23       	and	r24, r24
    4a92:	44 f4       	brge	.+16     	; 0x4aa4 <main+0x636>
		__ticks = 1;
    4a94:	fe 01       	movw	r30, r28
    4a96:	e7 53       	subi	r30, 0x37	; 55
    4a98:	ff 4f       	sbci	r31, 0xFF	; 255
    4a9a:	81 e0       	ldi	r24, 0x01	; 1
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
    4a9e:	91 83       	std	Z+1, r25	; 0x01
    4aa0:	80 83       	st	Z, r24
    4aa2:	64 c0       	rjmp	.+200    	; 0x4b6c <main+0x6fe>
	else if (__tmp > 65535)
    4aa4:	fe 01       	movw	r30, r28
    4aa6:	e5 53       	subi	r30, 0x35	; 53
    4aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aaa:	60 81       	ld	r22, Z
    4aac:	71 81       	ldd	r23, Z+1	; 0x01
    4aae:	82 81       	ldd	r24, Z+2	; 0x02
    4ab0:	93 81       	ldd	r25, Z+3	; 0x03
    4ab2:	20 e0       	ldi	r18, 0x00	; 0
    4ab4:	3f ef       	ldi	r19, 0xFF	; 255
    4ab6:	4f e7       	ldi	r20, 0x7F	; 127
    4ab8:	57 e4       	ldi	r21, 0x47	; 71
    4aba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4abe:	18 16       	cp	r1, r24
    4ac0:	0c f0       	brlt	.+2      	; 0x4ac4 <main+0x656>
    4ac2:	43 c0       	rjmp	.+134    	; 0x4b4a <main+0x6dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ac4:	fe 01       	movw	r30, r28
    4ac6:	e1 53       	subi	r30, 0x31	; 49
    4ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aca:	60 81       	ld	r22, Z
    4acc:	71 81       	ldd	r23, Z+1	; 0x01
    4ace:	82 81       	ldd	r24, Z+2	; 0x02
    4ad0:	93 81       	ldd	r25, Z+3	; 0x03
    4ad2:	20 e0       	ldi	r18, 0x00	; 0
    4ad4:	30 e0       	ldi	r19, 0x00	; 0
    4ad6:	40 e2       	ldi	r20, 0x20	; 32
    4ad8:	51 e4       	ldi	r21, 0x41	; 65
    4ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ade:	dc 01       	movw	r26, r24
    4ae0:	cb 01       	movw	r24, r22
    4ae2:	8e 01       	movw	r16, r28
    4ae4:	07 53       	subi	r16, 0x37	; 55
    4ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ae8:	bc 01       	movw	r22, r24
    4aea:	cd 01       	movw	r24, r26
    4aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4af0:	dc 01       	movw	r26, r24
    4af2:	cb 01       	movw	r24, r22
    4af4:	f8 01       	movw	r30, r16
    4af6:	91 83       	std	Z+1, r25	; 0x01
    4af8:	80 83       	st	Z, r24
    4afa:	1f c0       	rjmp	.+62     	; 0x4b3a <main+0x6cc>
    4afc:	fe 01       	movw	r30, r28
    4afe:	e9 53       	subi	r30, 0x39	; 57
    4b00:	ff 4f       	sbci	r31, 0xFF	; 255
    4b02:	88 ec       	ldi	r24, 0xC8	; 200
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	91 83       	std	Z+1, r25	; 0x01
    4b08:	80 83       	st	Z, r24
    4b0a:	fe 01       	movw	r30, r28
    4b0c:	e9 53       	subi	r30, 0x39	; 57
    4b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b10:	80 81       	ld	r24, Z
    4b12:	91 81       	ldd	r25, Z+1	; 0x01
    4b14:	01 97       	sbiw	r24, 0x01	; 1
    4b16:	f1 f7       	brne	.-4      	; 0x4b14 <main+0x6a6>
    4b18:	fe 01       	movw	r30, r28
    4b1a:	e9 53       	subi	r30, 0x39	; 57
    4b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1e:	91 83       	std	Z+1, r25	; 0x01
    4b20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b22:	de 01       	movw	r26, r28
    4b24:	a7 53       	subi	r26, 0x37	; 55
    4b26:	bf 4f       	sbci	r27, 0xFF	; 255
    4b28:	fe 01       	movw	r30, r28
    4b2a:	e7 53       	subi	r30, 0x37	; 55
    4b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2e:	80 81       	ld	r24, Z
    4b30:	91 81       	ldd	r25, Z+1	; 0x01
    4b32:	01 97       	sbiw	r24, 0x01	; 1
    4b34:	11 96       	adiw	r26, 0x01	; 1
    4b36:	9c 93       	st	X, r25
    4b38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b3a:	fe 01       	movw	r30, r28
    4b3c:	e7 53       	subi	r30, 0x37	; 55
    4b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b40:	80 81       	ld	r24, Z
    4b42:	91 81       	ldd	r25, Z+1	; 0x01
    4b44:	00 97       	sbiw	r24, 0x00	; 0
    4b46:	d1 f6       	brne	.-76     	; 0x4afc <main+0x68e>
    4b48:	28 c0       	rjmp	.+80     	; 0x4b9a <main+0x72c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b4a:	8e 01       	movw	r16, r28
    4b4c:	07 53       	subi	r16, 0x37	; 55
    4b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b50:	fe 01       	movw	r30, r28
    4b52:	e5 53       	subi	r30, 0x35	; 53
    4b54:	ff 4f       	sbci	r31, 0xFF	; 255
    4b56:	60 81       	ld	r22, Z
    4b58:	71 81       	ldd	r23, Z+1	; 0x01
    4b5a:	82 81       	ldd	r24, Z+2	; 0x02
    4b5c:	93 81       	ldd	r25, Z+3	; 0x03
    4b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b62:	dc 01       	movw	r26, r24
    4b64:	cb 01       	movw	r24, r22
    4b66:	f8 01       	movw	r30, r16
    4b68:	91 83       	std	Z+1, r25	; 0x01
    4b6a:	80 83       	st	Z, r24
    4b6c:	de 01       	movw	r26, r28
    4b6e:	ab 53       	subi	r26, 0x3B	; 59
    4b70:	bf 4f       	sbci	r27, 0xFF	; 255
    4b72:	fe 01       	movw	r30, r28
    4b74:	e7 53       	subi	r30, 0x37	; 55
    4b76:	ff 4f       	sbci	r31, 0xFF	; 255
    4b78:	80 81       	ld	r24, Z
    4b7a:	91 81       	ldd	r25, Z+1	; 0x01
    4b7c:	11 96       	adiw	r26, 0x01	; 1
    4b7e:	9c 93       	st	X, r25
    4b80:	8e 93       	st	-X, r24
    4b82:	fe 01       	movw	r30, r28
    4b84:	eb 53       	subi	r30, 0x3B	; 59
    4b86:	ff 4f       	sbci	r31, 0xFF	; 255
    4b88:	80 81       	ld	r24, Z
    4b8a:	91 81       	ldd	r25, Z+1	; 0x01
    4b8c:	01 97       	sbiw	r24, 0x01	; 1
    4b8e:	f1 f7       	brne	.-4      	; 0x4b8c <main+0x71e>
    4b90:	fe 01       	movw	r30, r28
    4b92:	eb 53       	subi	r30, 0x3B	; 59
    4b94:	ff 4f       	sbci	r31, 0xFF	; 255
    4b96:	91 83       	std	Z+1, r25	; 0x01
    4b98:	80 83       	st	Z, r24
			_delay_ms(500);
			if(Local_u8ReadPassword == '1')
    4b9a:	fe 01       	movw	r30, r28
    4b9c:	e1 50       	subi	r30, 0x01	; 1
    4b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba0:	80 81       	ld	r24, Z
    4ba2:	81 33       	cpi	r24, 0x31	; 49
    4ba4:	09 f0       	breq	.+2      	; 0x4ba8 <main+0x73a>
    4ba6:	02 c7       	rjmp	.+3588   	; 0x59ac <main+0x153e>
			{
				CLCD_voidClearScreen();
    4ba8:	0e 94 08 11 	call	0x2210	; 0x2210 <CLCD_voidClearScreen>
				CLCD_voidSendString("Enter Password:");
    4bac:	83 ea       	ldi	r24, 0xA3	; 163
    4bae:	90 e0       	ldi	r25, 0x00	; 0
    4bb0:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>
				for( i =0 ; i<=3 ; i++)
    4bb4:	fe 01       	movw	r30, r28
    4bb6:	e3 50       	subi	r30, 0x03	; 3
    4bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bba:	10 82       	st	Z, r1
    4bbc:	bc c1       	rjmp	.+888    	; 0x4f36 <main+0xac8>
				{
					do
					{
						CLCD_voidGoToXY(1,i);
    4bbe:	fe 01       	movw	r30, r28
    4bc0:	e3 50       	subi	r30, 0x03	; 3
    4bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc4:	81 e0       	ldi	r24, 0x01	; 1
    4bc6:	60 81       	ld	r22, Z
    4bc8:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>

						/* Turn on LCD cursor */
						CLCD_voidSendCommand(LCD_CURSOR_ON);
    4bcc:	8e e0       	ldi	r24, 0x0E	; 14
    4bce:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
    4bd2:	fe 01       	movw	r30, r28
    4bd4:	ef 53       	subi	r30, 0x3F	; 63
    4bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd8:	80 e0       	ldi	r24, 0x00	; 0
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	a8 ec       	ldi	r26, 0xC8	; 200
    4bde:	b2 e4       	ldi	r27, 0x42	; 66
    4be0:	80 83       	st	Z, r24
    4be2:	91 83       	std	Z+1, r25	; 0x01
    4be4:	a2 83       	std	Z+2, r26	; 0x02
    4be6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4be8:	8e 01       	movw	r16, r28
    4bea:	03 54       	subi	r16, 0x43	; 67
    4bec:	1f 4f       	sbci	r17, 0xFF	; 255
    4bee:	fe 01       	movw	r30, r28
    4bf0:	ef 53       	subi	r30, 0x3F	; 63
    4bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf4:	60 81       	ld	r22, Z
    4bf6:	71 81       	ldd	r23, Z+1	; 0x01
    4bf8:	82 81       	ldd	r24, Z+2	; 0x02
    4bfa:	93 81       	ldd	r25, Z+3	; 0x03
    4bfc:	20 e0       	ldi	r18, 0x00	; 0
    4bfe:	30 e0       	ldi	r19, 0x00	; 0
    4c00:	4a ef       	ldi	r20, 0xFA	; 250
    4c02:	54 e4       	ldi	r21, 0x44	; 68
    4c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c08:	dc 01       	movw	r26, r24
    4c0a:	cb 01       	movw	r24, r22
    4c0c:	f8 01       	movw	r30, r16
    4c0e:	80 83       	st	Z, r24
    4c10:	91 83       	std	Z+1, r25	; 0x01
    4c12:	a2 83       	std	Z+2, r26	; 0x02
    4c14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c16:	fe 01       	movw	r30, r28
    4c18:	e3 54       	subi	r30, 0x43	; 67
    4c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1c:	60 81       	ld	r22, Z
    4c1e:	71 81       	ldd	r23, Z+1	; 0x01
    4c20:	82 81       	ldd	r24, Z+2	; 0x02
    4c22:	93 81       	ldd	r25, Z+3	; 0x03
    4c24:	20 e0       	ldi	r18, 0x00	; 0
    4c26:	30 e0       	ldi	r19, 0x00	; 0
    4c28:	40 e8       	ldi	r20, 0x80	; 128
    4c2a:	5f e3       	ldi	r21, 0x3F	; 63
    4c2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c30:	88 23       	and	r24, r24
    4c32:	44 f4       	brge	.+16     	; 0x4c44 <main+0x7d6>
		__ticks = 1;
    4c34:	fe 01       	movw	r30, r28
    4c36:	e5 54       	subi	r30, 0x45	; 69
    4c38:	ff 4f       	sbci	r31, 0xFF	; 255
    4c3a:	81 e0       	ldi	r24, 0x01	; 1
    4c3c:	90 e0       	ldi	r25, 0x00	; 0
    4c3e:	91 83       	std	Z+1, r25	; 0x01
    4c40:	80 83       	st	Z, r24
    4c42:	64 c0       	rjmp	.+200    	; 0x4d0c <main+0x89e>
	else if (__tmp > 65535)
    4c44:	fe 01       	movw	r30, r28
    4c46:	e3 54       	subi	r30, 0x43	; 67
    4c48:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4a:	60 81       	ld	r22, Z
    4c4c:	71 81       	ldd	r23, Z+1	; 0x01
    4c4e:	82 81       	ldd	r24, Z+2	; 0x02
    4c50:	93 81       	ldd	r25, Z+3	; 0x03
    4c52:	20 e0       	ldi	r18, 0x00	; 0
    4c54:	3f ef       	ldi	r19, 0xFF	; 255
    4c56:	4f e7       	ldi	r20, 0x7F	; 127
    4c58:	57 e4       	ldi	r21, 0x47	; 71
    4c5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c5e:	18 16       	cp	r1, r24
    4c60:	0c f0       	brlt	.+2      	; 0x4c64 <main+0x7f6>
    4c62:	43 c0       	rjmp	.+134    	; 0x4cea <main+0x87c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c64:	fe 01       	movw	r30, r28
    4c66:	ef 53       	subi	r30, 0x3F	; 63
    4c68:	ff 4f       	sbci	r31, 0xFF	; 255
    4c6a:	60 81       	ld	r22, Z
    4c6c:	71 81       	ldd	r23, Z+1	; 0x01
    4c6e:	82 81       	ldd	r24, Z+2	; 0x02
    4c70:	93 81       	ldd	r25, Z+3	; 0x03
    4c72:	20 e0       	ldi	r18, 0x00	; 0
    4c74:	30 e0       	ldi	r19, 0x00	; 0
    4c76:	40 e2       	ldi	r20, 0x20	; 32
    4c78:	51 e4       	ldi	r21, 0x41	; 65
    4c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c7e:	dc 01       	movw	r26, r24
    4c80:	cb 01       	movw	r24, r22
    4c82:	8e 01       	movw	r16, r28
    4c84:	05 54       	subi	r16, 0x45	; 69
    4c86:	1f 4f       	sbci	r17, 0xFF	; 255
    4c88:	bc 01       	movw	r22, r24
    4c8a:	cd 01       	movw	r24, r26
    4c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c90:	dc 01       	movw	r26, r24
    4c92:	cb 01       	movw	r24, r22
    4c94:	f8 01       	movw	r30, r16
    4c96:	91 83       	std	Z+1, r25	; 0x01
    4c98:	80 83       	st	Z, r24
    4c9a:	1f c0       	rjmp	.+62     	; 0x4cda <main+0x86c>
    4c9c:	fe 01       	movw	r30, r28
    4c9e:	e7 54       	subi	r30, 0x47	; 71
    4ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca2:	88 ec       	ldi	r24, 0xC8	; 200
    4ca4:	90 e0       	ldi	r25, 0x00	; 0
    4ca6:	91 83       	std	Z+1, r25	; 0x01
    4ca8:	80 83       	st	Z, r24
    4caa:	fe 01       	movw	r30, r28
    4cac:	e7 54       	subi	r30, 0x47	; 71
    4cae:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb0:	80 81       	ld	r24, Z
    4cb2:	91 81       	ldd	r25, Z+1	; 0x01
    4cb4:	01 97       	sbiw	r24, 0x01	; 1
    4cb6:	f1 f7       	brne	.-4      	; 0x4cb4 <main+0x846>
    4cb8:	fe 01       	movw	r30, r28
    4cba:	e7 54       	subi	r30, 0x47	; 71
    4cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cbe:	91 83       	std	Z+1, r25	; 0x01
    4cc0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cc2:	de 01       	movw	r26, r28
    4cc4:	a5 54       	subi	r26, 0x45	; 69
    4cc6:	bf 4f       	sbci	r27, 0xFF	; 255
    4cc8:	fe 01       	movw	r30, r28
    4cca:	e5 54       	subi	r30, 0x45	; 69
    4ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cce:	80 81       	ld	r24, Z
    4cd0:	91 81       	ldd	r25, Z+1	; 0x01
    4cd2:	01 97       	sbiw	r24, 0x01	; 1
    4cd4:	11 96       	adiw	r26, 0x01	; 1
    4cd6:	9c 93       	st	X, r25
    4cd8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cda:	fe 01       	movw	r30, r28
    4cdc:	e5 54       	subi	r30, 0x45	; 69
    4cde:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce0:	80 81       	ld	r24, Z
    4ce2:	91 81       	ldd	r25, Z+1	; 0x01
    4ce4:	00 97       	sbiw	r24, 0x00	; 0
    4ce6:	d1 f6       	brne	.-76     	; 0x4c9c <main+0x82e>
    4ce8:	27 c0       	rjmp	.+78     	; 0x4d38 <main+0x8ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cea:	8e 01       	movw	r16, r28
    4cec:	05 54       	subi	r16, 0x45	; 69
    4cee:	1f 4f       	sbci	r17, 0xFF	; 255
    4cf0:	fe 01       	movw	r30, r28
    4cf2:	e3 54       	subi	r30, 0x43	; 67
    4cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf6:	60 81       	ld	r22, Z
    4cf8:	71 81       	ldd	r23, Z+1	; 0x01
    4cfa:	82 81       	ldd	r24, Z+2	; 0x02
    4cfc:	93 81       	ldd	r25, Z+3	; 0x03
    4cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d02:	dc 01       	movw	r26, r24
    4d04:	cb 01       	movw	r24, r22
    4d06:	f8 01       	movw	r30, r16
    4d08:	91 83       	std	Z+1, r25	; 0x01
    4d0a:	80 83       	st	Z, r24
    4d0c:	de 01       	movw	r26, r28
    4d0e:	a9 54       	subi	r26, 0x49	; 73
    4d10:	bf 4f       	sbci	r27, 0xFF	; 255
    4d12:	fe 01       	movw	r30, r28
    4d14:	e5 54       	subi	r30, 0x45	; 69
    4d16:	ff 4f       	sbci	r31, 0xFF	; 255
    4d18:	80 81       	ld	r24, Z
    4d1a:	91 81       	ldd	r25, Z+1	; 0x01
    4d1c:	8d 93       	st	X+, r24
    4d1e:	9c 93       	st	X, r25
    4d20:	fe 01       	movw	r30, r28
    4d22:	e9 54       	subi	r30, 0x49	; 73
    4d24:	ff 4f       	sbci	r31, 0xFF	; 255
    4d26:	80 81       	ld	r24, Z
    4d28:	91 81       	ldd	r25, Z+1	; 0x01
    4d2a:	01 97       	sbiw	r24, 0x01	; 1
    4d2c:	f1 f7       	brne	.-4      	; 0x4d2a <main+0x8bc>
    4d2e:	fe 01       	movw	r30, r28
    4d30:	e9 54       	subi	r30, 0x49	; 73
    4d32:	ff 4f       	sbci	r31, 0xFF	; 255
    4d34:	91 83       	std	Z+1, r25	; 0x01
    4d36:	80 83       	st	Z, r24

						/* wait 100 ms */
						_delay_ms(100);

						/* Turn off LCD cursor */
						CLCD_voidSendCommand(LCD_CURSOR_OFF);
    4d38:	8c e0       	ldi	r24, 0x0C	; 12
    4d3a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

						Local_au8Password[i] = KPD_u8GetPressedKey();
    4d3e:	fe 01       	movw	r30, r28
    4d40:	e3 50       	subi	r30, 0x03	; 3
    4d42:	ff 4f       	sbci	r31, 0xFF	; 255
    4d44:	80 81       	ld	r24, Z
    4d46:	08 2f       	mov	r16, r24
    4d48:	10 e0       	ldi	r17, 0x00	; 0
    4d4a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KPD_u8GetPressedKey>
    4d4e:	28 2f       	mov	r18, r24
    4d50:	ce 01       	movw	r24, r28
    4d52:	8f 5f       	subi	r24, 0xFF	; 255
    4d54:	9e 4f       	sbci	r25, 0xFE	; 254
    4d56:	fc 01       	movw	r30, r24
    4d58:	e0 0f       	add	r30, r16
    4d5a:	f1 1f       	adc	r31, r17
    4d5c:	20 83       	st	Z, r18
					} while (Local_au8Password[i]==KPD_NO_PRESSED_KEY);
    4d5e:	fe 01       	movw	r30, r28
    4d60:	e3 50       	subi	r30, 0x03	; 3
    4d62:	ff 4f       	sbci	r31, 0xFF	; 255
    4d64:	80 81       	ld	r24, Z
    4d66:	28 2f       	mov	r18, r24
    4d68:	30 e0       	ldi	r19, 0x00	; 0
    4d6a:	ce 01       	movw	r24, r28
    4d6c:	8f 5f       	subi	r24, 0xFF	; 255
    4d6e:	9e 4f       	sbci	r25, 0xFE	; 254
    4d70:	fc 01       	movw	r30, r24
    4d72:	e2 0f       	add	r30, r18
    4d74:	f3 1f       	adc	r31, r19
    4d76:	80 81       	ld	r24, Z
    4d78:	8f 3f       	cpi	r24, 0xFF	; 255
    4d7a:	09 f4       	brne	.+2      	; 0x4d7e <main+0x910>
    4d7c:	20 cf       	rjmp	.-448    	; 0x4bbe <main+0x750>

					CLCD_voidGoToXY(1,i);
    4d7e:	fe 01       	movw	r30, r28
    4d80:	e3 50       	subi	r30, 0x03	; 3
    4d82:	ff 4f       	sbci	r31, 0xFF	; 255
    4d84:	81 e0       	ldi	r24, 0x01	; 1
    4d86:	60 81       	ld	r22, Z
    4d88:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
					CLCD_voidSendData(Local_au8Password[i]);
    4d8c:	fe 01       	movw	r30, r28
    4d8e:	e3 50       	subi	r30, 0x03	; 3
    4d90:	ff 4f       	sbci	r31, 0xFF	; 255
    4d92:	80 81       	ld	r24, Z
    4d94:	28 2f       	mov	r18, r24
    4d96:	30 e0       	ldi	r19, 0x00	; 0
    4d98:	ce 01       	movw	r24, r28
    4d9a:	8f 5f       	subi	r24, 0xFF	; 255
    4d9c:	9e 4f       	sbci	r25, 0xFE	; 254
    4d9e:	fc 01       	movw	r30, r24
    4da0:	e2 0f       	add	r30, r18
    4da2:	f3 1f       	adc	r31, r19
    4da4:	80 81       	ld	r24, Z
    4da6:	0e 94 a6 0a 	call	0x154c	; 0x154c <CLCD_voidSendData>
    4daa:	fe 01       	movw	r30, r28
    4dac:	ed 54       	subi	r30, 0x4D	; 77
    4dae:	ff 4f       	sbci	r31, 0xFF	; 255
    4db0:	80 e0       	ldi	r24, 0x00	; 0
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	aa ef       	ldi	r26, 0xFA	; 250
    4db6:	b3 e4       	ldi	r27, 0x43	; 67
    4db8:	80 83       	st	Z, r24
    4dba:	91 83       	std	Z+1, r25	; 0x01
    4dbc:	a2 83       	std	Z+2, r26	; 0x02
    4dbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dc0:	8e 01       	movw	r16, r28
    4dc2:	01 55       	subi	r16, 0x51	; 81
    4dc4:	1f 4f       	sbci	r17, 0xFF	; 255
    4dc6:	fe 01       	movw	r30, r28
    4dc8:	ed 54       	subi	r30, 0x4D	; 77
    4dca:	ff 4f       	sbci	r31, 0xFF	; 255
    4dcc:	60 81       	ld	r22, Z
    4dce:	71 81       	ldd	r23, Z+1	; 0x01
    4dd0:	82 81       	ldd	r24, Z+2	; 0x02
    4dd2:	93 81       	ldd	r25, Z+3	; 0x03
    4dd4:	20 e0       	ldi	r18, 0x00	; 0
    4dd6:	30 e0       	ldi	r19, 0x00	; 0
    4dd8:	4a ef       	ldi	r20, 0xFA	; 250
    4dda:	54 e4       	ldi	r21, 0x44	; 68
    4ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4de0:	dc 01       	movw	r26, r24
    4de2:	cb 01       	movw	r24, r22
    4de4:	f8 01       	movw	r30, r16
    4de6:	80 83       	st	Z, r24
    4de8:	91 83       	std	Z+1, r25	; 0x01
    4dea:	a2 83       	std	Z+2, r26	; 0x02
    4dec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4dee:	fe 01       	movw	r30, r28
    4df0:	e1 55       	subi	r30, 0x51	; 81
    4df2:	ff 4f       	sbci	r31, 0xFF	; 255
    4df4:	60 81       	ld	r22, Z
    4df6:	71 81       	ldd	r23, Z+1	; 0x01
    4df8:	82 81       	ldd	r24, Z+2	; 0x02
    4dfa:	93 81       	ldd	r25, Z+3	; 0x03
    4dfc:	20 e0       	ldi	r18, 0x00	; 0
    4dfe:	30 e0       	ldi	r19, 0x00	; 0
    4e00:	40 e8       	ldi	r20, 0x80	; 128
    4e02:	5f e3       	ldi	r21, 0x3F	; 63
    4e04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e08:	88 23       	and	r24, r24
    4e0a:	44 f4       	brge	.+16     	; 0x4e1c <main+0x9ae>
		__ticks = 1;
    4e0c:	fe 01       	movw	r30, r28
    4e0e:	e3 55       	subi	r30, 0x53	; 83
    4e10:	ff 4f       	sbci	r31, 0xFF	; 255
    4e12:	81 e0       	ldi	r24, 0x01	; 1
    4e14:	90 e0       	ldi	r25, 0x00	; 0
    4e16:	91 83       	std	Z+1, r25	; 0x01
    4e18:	80 83       	st	Z, r24
    4e1a:	64 c0       	rjmp	.+200    	; 0x4ee4 <main+0xa76>
	else if (__tmp > 65535)
    4e1c:	fe 01       	movw	r30, r28
    4e1e:	e1 55       	subi	r30, 0x51	; 81
    4e20:	ff 4f       	sbci	r31, 0xFF	; 255
    4e22:	60 81       	ld	r22, Z
    4e24:	71 81       	ldd	r23, Z+1	; 0x01
    4e26:	82 81       	ldd	r24, Z+2	; 0x02
    4e28:	93 81       	ldd	r25, Z+3	; 0x03
    4e2a:	20 e0       	ldi	r18, 0x00	; 0
    4e2c:	3f ef       	ldi	r19, 0xFF	; 255
    4e2e:	4f e7       	ldi	r20, 0x7F	; 127
    4e30:	57 e4       	ldi	r21, 0x47	; 71
    4e32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e36:	18 16       	cp	r1, r24
    4e38:	0c f0       	brlt	.+2      	; 0x4e3c <main+0x9ce>
    4e3a:	43 c0       	rjmp	.+134    	; 0x4ec2 <main+0xa54>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e3c:	fe 01       	movw	r30, r28
    4e3e:	ed 54       	subi	r30, 0x4D	; 77
    4e40:	ff 4f       	sbci	r31, 0xFF	; 255
    4e42:	60 81       	ld	r22, Z
    4e44:	71 81       	ldd	r23, Z+1	; 0x01
    4e46:	82 81       	ldd	r24, Z+2	; 0x02
    4e48:	93 81       	ldd	r25, Z+3	; 0x03
    4e4a:	20 e0       	ldi	r18, 0x00	; 0
    4e4c:	30 e0       	ldi	r19, 0x00	; 0
    4e4e:	40 e2       	ldi	r20, 0x20	; 32
    4e50:	51 e4       	ldi	r21, 0x41	; 65
    4e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e56:	dc 01       	movw	r26, r24
    4e58:	cb 01       	movw	r24, r22
    4e5a:	8e 01       	movw	r16, r28
    4e5c:	03 55       	subi	r16, 0x53	; 83
    4e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    4e60:	bc 01       	movw	r22, r24
    4e62:	cd 01       	movw	r24, r26
    4e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e68:	dc 01       	movw	r26, r24
    4e6a:	cb 01       	movw	r24, r22
    4e6c:	f8 01       	movw	r30, r16
    4e6e:	91 83       	std	Z+1, r25	; 0x01
    4e70:	80 83       	st	Z, r24
    4e72:	1f c0       	rjmp	.+62     	; 0x4eb2 <main+0xa44>
    4e74:	fe 01       	movw	r30, r28
    4e76:	e5 55       	subi	r30, 0x55	; 85
    4e78:	ff 4f       	sbci	r31, 0xFF	; 255
    4e7a:	88 ec       	ldi	r24, 0xC8	; 200
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
    4e7e:	91 83       	std	Z+1, r25	; 0x01
    4e80:	80 83       	st	Z, r24
    4e82:	fe 01       	movw	r30, r28
    4e84:	e5 55       	subi	r30, 0x55	; 85
    4e86:	ff 4f       	sbci	r31, 0xFF	; 255
    4e88:	80 81       	ld	r24, Z
    4e8a:	91 81       	ldd	r25, Z+1	; 0x01
    4e8c:	01 97       	sbiw	r24, 0x01	; 1
    4e8e:	f1 f7       	brne	.-4      	; 0x4e8c <main+0xa1e>
    4e90:	fe 01       	movw	r30, r28
    4e92:	e5 55       	subi	r30, 0x55	; 85
    4e94:	ff 4f       	sbci	r31, 0xFF	; 255
    4e96:	91 83       	std	Z+1, r25	; 0x01
    4e98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e9a:	de 01       	movw	r26, r28
    4e9c:	a3 55       	subi	r26, 0x53	; 83
    4e9e:	bf 4f       	sbci	r27, 0xFF	; 255
    4ea0:	fe 01       	movw	r30, r28
    4ea2:	e3 55       	subi	r30, 0x53	; 83
    4ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea6:	80 81       	ld	r24, Z
    4ea8:	91 81       	ldd	r25, Z+1	; 0x01
    4eaa:	01 97       	sbiw	r24, 0x01	; 1
    4eac:	11 96       	adiw	r26, 0x01	; 1
    4eae:	9c 93       	st	X, r25
    4eb0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eb2:	fe 01       	movw	r30, r28
    4eb4:	e3 55       	subi	r30, 0x53	; 83
    4eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb8:	80 81       	ld	r24, Z
    4eba:	91 81       	ldd	r25, Z+1	; 0x01
    4ebc:	00 97       	sbiw	r24, 0x00	; 0
    4ebe:	d1 f6       	brne	.-76     	; 0x4e74 <main+0xa06>
    4ec0:	27 c0       	rjmp	.+78     	; 0x4f10 <main+0xaa2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ec2:	8e 01       	movw	r16, r28
    4ec4:	03 55       	subi	r16, 0x53	; 83
    4ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ec8:	fe 01       	movw	r30, r28
    4eca:	e1 55       	subi	r30, 0x51	; 81
    4ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ece:	60 81       	ld	r22, Z
    4ed0:	71 81       	ldd	r23, Z+1	; 0x01
    4ed2:	82 81       	ldd	r24, Z+2	; 0x02
    4ed4:	93 81       	ldd	r25, Z+3	; 0x03
    4ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eda:	dc 01       	movw	r26, r24
    4edc:	cb 01       	movw	r24, r22
    4ede:	f8 01       	movw	r30, r16
    4ee0:	91 83       	std	Z+1, r25	; 0x01
    4ee2:	80 83       	st	Z, r24
    4ee4:	de 01       	movw	r26, r28
    4ee6:	a7 55       	subi	r26, 0x57	; 87
    4ee8:	bf 4f       	sbci	r27, 0xFF	; 255
    4eea:	fe 01       	movw	r30, r28
    4eec:	e3 55       	subi	r30, 0x53	; 83
    4eee:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef0:	80 81       	ld	r24, Z
    4ef2:	91 81       	ldd	r25, Z+1	; 0x01
    4ef4:	8d 93       	st	X+, r24
    4ef6:	9c 93       	st	X, r25
    4ef8:	fe 01       	movw	r30, r28
    4efa:	e7 55       	subi	r30, 0x57	; 87
    4efc:	ff 4f       	sbci	r31, 0xFF	; 255
    4efe:	80 81       	ld	r24, Z
    4f00:	91 81       	ldd	r25, Z+1	; 0x01
    4f02:	01 97       	sbiw	r24, 0x01	; 1
    4f04:	f1 f7       	brne	.-4      	; 0x4f02 <main+0xa94>
    4f06:	fe 01       	movw	r30, r28
    4f08:	e7 55       	subi	r30, 0x57	; 87
    4f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f0c:	91 83       	std	Z+1, r25	; 0x01
    4f0e:	80 83       	st	Z, r24
					_delay_ms(500);
					CLCD_voidGoToXY(1,i);
    4f10:	fe 01       	movw	r30, r28
    4f12:	e3 50       	subi	r30, 0x03	; 3
    4f14:	ff 4f       	sbci	r31, 0xFF	; 255
    4f16:	81 e0       	ldi	r24, 0x01	; 1
    4f18:	60 81       	ld	r22, Z
    4f1a:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
					CLCD_voidSendData('*');
    4f1e:	8a e2       	ldi	r24, 0x2A	; 42
    4f20:	0e 94 a6 0a 	call	0x154c	; 0x154c <CLCD_voidSendData>
			_delay_ms(500);
			if(Local_u8ReadPassword == '1')
			{
				CLCD_voidClearScreen();
				CLCD_voidSendString("Enter Password:");
				for( i =0 ; i<=3 ; i++)
    4f24:	de 01       	movw	r26, r28
    4f26:	a3 50       	subi	r26, 0x03	; 3
    4f28:	bf 4f       	sbci	r27, 0xFF	; 255
    4f2a:	fe 01       	movw	r30, r28
    4f2c:	e3 50       	subi	r30, 0x03	; 3
    4f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f30:	80 81       	ld	r24, Z
    4f32:	8f 5f       	subi	r24, 0xFF	; 255
    4f34:	8c 93       	st	X, r24
    4f36:	fe 01       	movw	r30, r28
    4f38:	e3 50       	subi	r30, 0x03	; 3
    4f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3c:	80 81       	ld	r24, Z
    4f3e:	84 30       	cpi	r24, 0x04	; 4
    4f40:	08 f4       	brcc	.+2      	; 0x4f44 <main+0xad6>
    4f42:	3d ce       	rjmp	.-902    	; 0x4bbe <main+0x750>
					_delay_ms(500);
					CLCD_voidGoToXY(1,i);
					CLCD_voidSendData('*');
				}

				if((EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION1)==Local_au8Password[0]) &&  (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION2)==Local_au8Password[1]) && (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION3)==Local_au8Password[2]) && (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION4)==Local_au8Password[3]) )
    4f44:	81 e2       	ldi	r24, 0x21	; 33
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <EEPROM_u8ReadeData>
    4f4c:	fe 01       	movw	r30, r28
    4f4e:	ef 5f       	subi	r30, 0xFF	; 255
    4f50:	fe 4f       	sbci	r31, 0xFE	; 254
    4f52:	90 81       	ld	r25, Z
    4f54:	89 17       	cp	r24, r25
    4f56:	09 f0       	breq	.+2      	; 0x4f5a <main+0xaec>
    4f58:	12 c1       	rjmp	.+548    	; 0x517e <main+0xd10>
    4f5a:	82 e2       	ldi	r24, 0x22	; 34
    4f5c:	90 e0       	ldi	r25, 0x00	; 0
    4f5e:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <EEPROM_u8ReadeData>
    4f62:	fe 01       	movw	r30, r28
    4f64:	ef 5f       	subi	r30, 0xFF	; 255
    4f66:	fe 4f       	sbci	r31, 0xFE	; 254
    4f68:	91 81       	ldd	r25, Z+1	; 0x01
    4f6a:	89 17       	cp	r24, r25
    4f6c:	09 f0       	breq	.+2      	; 0x4f70 <main+0xb02>
    4f6e:	07 c1       	rjmp	.+526    	; 0x517e <main+0xd10>
    4f70:	83 e2       	ldi	r24, 0x23	; 35
    4f72:	90 e0       	ldi	r25, 0x00	; 0
    4f74:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <EEPROM_u8ReadeData>
    4f78:	fe 01       	movw	r30, r28
    4f7a:	ef 5f       	subi	r30, 0xFF	; 255
    4f7c:	fe 4f       	sbci	r31, 0xFE	; 254
    4f7e:	92 81       	ldd	r25, Z+2	; 0x02
    4f80:	89 17       	cp	r24, r25
    4f82:	09 f0       	breq	.+2      	; 0x4f86 <main+0xb18>
    4f84:	fc c0       	rjmp	.+504    	; 0x517e <main+0xd10>
    4f86:	84 e2       	ldi	r24, 0x24	; 36
    4f88:	90 e0       	ldi	r25, 0x00	; 0
    4f8a:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <EEPROM_u8ReadeData>
    4f8e:	fe 01       	movw	r30, r28
    4f90:	ef 5f       	subi	r30, 0xFF	; 255
    4f92:	fe 4f       	sbci	r31, 0xFE	; 254
    4f94:	93 81       	ldd	r25, Z+3	; 0x03
    4f96:	89 17       	cp	r24, r25
    4f98:	09 f0       	breq	.+2      	; 0x4f9c <main+0xb2e>
    4f9a:	f1 c0       	rjmp	.+482    	; 0x517e <main+0xd10>
				{
					CLCD_voidClearScreen();
    4f9c:	0e 94 08 11 	call	0x2210	; 0x2210 <CLCD_voidClearScreen>
					CLCD_voidGoToXY(0,2);
    4fa0:	80 e0       	ldi	r24, 0x00	; 0
    4fa2:	62 e0       	ldi	r22, 0x02	; 2
    4fa4:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
					CLCD_voidSendString("Welcome Back");
    4fa8:	83 eb       	ldi	r24, 0xB3	; 179
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>

					/* Turn on the indicator green led */
					DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN0,DIO_u8PIN_HIGH);
    4fb0:	83 e0       	ldi	r24, 0x03	; 3
    4fb2:	60 e0       	ldi	r22, 0x00	; 0
    4fb4:	41 e0       	ldi	r20, 0x01	; 1
    4fb6:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_LOW);
    4fba:	83 e0       	ldi	r24, 0x03	; 3
    4fbc:	61 e0       	ldi	r22, 0x01	; 1
    4fbe:	40 e0       	ldi	r20, 0x00	; 0
    4fc0:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>


					SERVO_voidTimer1ServoSetAngleOCR1A(0);
    4fc4:	60 e0       	ldi	r22, 0x00	; 0
    4fc6:	70 e0       	ldi	r23, 0x00	; 0
    4fc8:	80 e0       	ldi	r24, 0x00	; 0
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	0e 94 b2 19 	call	0x3364	; 0x3364 <SERVO_voidTimer1ServoSetAngleOCR1A>
					SERVO_voidTimer1ServoSetAngleOCR1B(0);
    4fd0:	60 e0       	ldi	r22, 0x00	; 0
    4fd2:	70 e0       	ldi	r23, 0x00	; 0
    4fd4:	80 e0       	ldi	r24, 0x00	; 0
    4fd6:	90 e0       	ldi	r25, 0x00	; 0
    4fd8:	0e 94 0d 1a 	call	0x341a	; 0x341a <SERVO_voidTimer1ServoSetAngleOCR1B>
    4fdc:	fe 01       	movw	r30, r28
    4fde:	eb 55       	subi	r30, 0x5B	; 91
    4fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe2:	80 e0       	ldi	r24, 0x00	; 0
    4fe4:	90 e0       	ldi	r25, 0x00	; 0
    4fe6:	aa e7       	ldi	r26, 0x7A	; 122
    4fe8:	b5 e4       	ldi	r27, 0x45	; 69
    4fea:	80 83       	st	Z, r24
    4fec:	91 83       	std	Z+1, r25	; 0x01
    4fee:	a2 83       	std	Z+2, r26	; 0x02
    4ff0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ff2:	8e 01       	movw	r16, r28
    4ff4:	0f 55       	subi	r16, 0x5F	; 95
    4ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ff8:	fe 01       	movw	r30, r28
    4ffa:	eb 55       	subi	r30, 0x5B	; 91
    4ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ffe:	60 81       	ld	r22, Z
    5000:	71 81       	ldd	r23, Z+1	; 0x01
    5002:	82 81       	ldd	r24, Z+2	; 0x02
    5004:	93 81       	ldd	r25, Z+3	; 0x03
    5006:	20 e0       	ldi	r18, 0x00	; 0
    5008:	30 e0       	ldi	r19, 0x00	; 0
    500a:	4a ef       	ldi	r20, 0xFA	; 250
    500c:	54 e4       	ldi	r21, 0x44	; 68
    500e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5012:	dc 01       	movw	r26, r24
    5014:	cb 01       	movw	r24, r22
    5016:	f8 01       	movw	r30, r16
    5018:	80 83       	st	Z, r24
    501a:	91 83       	std	Z+1, r25	; 0x01
    501c:	a2 83       	std	Z+2, r26	; 0x02
    501e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5020:	fe 01       	movw	r30, r28
    5022:	ef 55       	subi	r30, 0x5F	; 95
    5024:	ff 4f       	sbci	r31, 0xFF	; 255
    5026:	60 81       	ld	r22, Z
    5028:	71 81       	ldd	r23, Z+1	; 0x01
    502a:	82 81       	ldd	r24, Z+2	; 0x02
    502c:	93 81       	ldd	r25, Z+3	; 0x03
    502e:	20 e0       	ldi	r18, 0x00	; 0
    5030:	30 e0       	ldi	r19, 0x00	; 0
    5032:	40 e8       	ldi	r20, 0x80	; 128
    5034:	5f e3       	ldi	r21, 0x3F	; 63
    5036:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    503a:	88 23       	and	r24, r24
    503c:	44 f4       	brge	.+16     	; 0x504e <main+0xbe0>
		__ticks = 1;
    503e:	fe 01       	movw	r30, r28
    5040:	e1 56       	subi	r30, 0x61	; 97
    5042:	ff 4f       	sbci	r31, 0xFF	; 255
    5044:	81 e0       	ldi	r24, 0x01	; 1
    5046:	90 e0       	ldi	r25, 0x00	; 0
    5048:	91 83       	std	Z+1, r25	; 0x01
    504a:	80 83       	st	Z, r24
    504c:	64 c0       	rjmp	.+200    	; 0x5116 <main+0xca8>
	else if (__tmp > 65535)
    504e:	fe 01       	movw	r30, r28
    5050:	ef 55       	subi	r30, 0x5F	; 95
    5052:	ff 4f       	sbci	r31, 0xFF	; 255
    5054:	60 81       	ld	r22, Z
    5056:	71 81       	ldd	r23, Z+1	; 0x01
    5058:	82 81       	ldd	r24, Z+2	; 0x02
    505a:	93 81       	ldd	r25, Z+3	; 0x03
    505c:	20 e0       	ldi	r18, 0x00	; 0
    505e:	3f ef       	ldi	r19, 0xFF	; 255
    5060:	4f e7       	ldi	r20, 0x7F	; 127
    5062:	57 e4       	ldi	r21, 0x47	; 71
    5064:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5068:	18 16       	cp	r1, r24
    506a:	0c f0       	brlt	.+2      	; 0x506e <main+0xc00>
    506c:	43 c0       	rjmp	.+134    	; 0x50f4 <main+0xc86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    506e:	fe 01       	movw	r30, r28
    5070:	eb 55       	subi	r30, 0x5B	; 91
    5072:	ff 4f       	sbci	r31, 0xFF	; 255
    5074:	60 81       	ld	r22, Z
    5076:	71 81       	ldd	r23, Z+1	; 0x01
    5078:	82 81       	ldd	r24, Z+2	; 0x02
    507a:	93 81       	ldd	r25, Z+3	; 0x03
    507c:	20 e0       	ldi	r18, 0x00	; 0
    507e:	30 e0       	ldi	r19, 0x00	; 0
    5080:	40 e2       	ldi	r20, 0x20	; 32
    5082:	51 e4       	ldi	r21, 0x41	; 65
    5084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5088:	dc 01       	movw	r26, r24
    508a:	cb 01       	movw	r24, r22
    508c:	8e 01       	movw	r16, r28
    508e:	01 56       	subi	r16, 0x61	; 97
    5090:	1f 4f       	sbci	r17, 0xFF	; 255
    5092:	bc 01       	movw	r22, r24
    5094:	cd 01       	movw	r24, r26
    5096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    509a:	dc 01       	movw	r26, r24
    509c:	cb 01       	movw	r24, r22
    509e:	f8 01       	movw	r30, r16
    50a0:	91 83       	std	Z+1, r25	; 0x01
    50a2:	80 83       	st	Z, r24
    50a4:	1f c0       	rjmp	.+62     	; 0x50e4 <main+0xc76>
    50a6:	fe 01       	movw	r30, r28
    50a8:	e3 56       	subi	r30, 0x63	; 99
    50aa:	ff 4f       	sbci	r31, 0xFF	; 255
    50ac:	88 ec       	ldi	r24, 0xC8	; 200
    50ae:	90 e0       	ldi	r25, 0x00	; 0
    50b0:	91 83       	std	Z+1, r25	; 0x01
    50b2:	80 83       	st	Z, r24
    50b4:	fe 01       	movw	r30, r28
    50b6:	e3 56       	subi	r30, 0x63	; 99
    50b8:	ff 4f       	sbci	r31, 0xFF	; 255
    50ba:	80 81       	ld	r24, Z
    50bc:	91 81       	ldd	r25, Z+1	; 0x01
    50be:	01 97       	sbiw	r24, 0x01	; 1
    50c0:	f1 f7       	brne	.-4      	; 0x50be <main+0xc50>
    50c2:	fe 01       	movw	r30, r28
    50c4:	e3 56       	subi	r30, 0x63	; 99
    50c6:	ff 4f       	sbci	r31, 0xFF	; 255
    50c8:	91 83       	std	Z+1, r25	; 0x01
    50ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50cc:	de 01       	movw	r26, r28
    50ce:	a1 56       	subi	r26, 0x61	; 97
    50d0:	bf 4f       	sbci	r27, 0xFF	; 255
    50d2:	fe 01       	movw	r30, r28
    50d4:	e1 56       	subi	r30, 0x61	; 97
    50d6:	ff 4f       	sbci	r31, 0xFF	; 255
    50d8:	80 81       	ld	r24, Z
    50da:	91 81       	ldd	r25, Z+1	; 0x01
    50dc:	01 97       	sbiw	r24, 0x01	; 1
    50de:	11 96       	adiw	r26, 0x01	; 1
    50e0:	9c 93       	st	X, r25
    50e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50e4:	fe 01       	movw	r30, r28
    50e6:	e1 56       	subi	r30, 0x61	; 97
    50e8:	ff 4f       	sbci	r31, 0xFF	; 255
    50ea:	80 81       	ld	r24, Z
    50ec:	91 81       	ldd	r25, Z+1	; 0x01
    50ee:	00 97       	sbiw	r24, 0x00	; 0
    50f0:	d1 f6       	brne	.-76     	; 0x50a6 <main+0xc38>
    50f2:	27 c0       	rjmp	.+78     	; 0x5142 <main+0xcd4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50f4:	8e 01       	movw	r16, r28
    50f6:	01 56       	subi	r16, 0x61	; 97
    50f8:	1f 4f       	sbci	r17, 0xFF	; 255
    50fa:	fe 01       	movw	r30, r28
    50fc:	ef 55       	subi	r30, 0x5F	; 95
    50fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5100:	60 81       	ld	r22, Z
    5102:	71 81       	ldd	r23, Z+1	; 0x01
    5104:	82 81       	ldd	r24, Z+2	; 0x02
    5106:	93 81       	ldd	r25, Z+3	; 0x03
    5108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    510c:	dc 01       	movw	r26, r24
    510e:	cb 01       	movw	r24, r22
    5110:	f8 01       	movw	r30, r16
    5112:	91 83       	std	Z+1, r25	; 0x01
    5114:	80 83       	st	Z, r24
    5116:	de 01       	movw	r26, r28
    5118:	a5 56       	subi	r26, 0x65	; 101
    511a:	bf 4f       	sbci	r27, 0xFF	; 255
    511c:	fe 01       	movw	r30, r28
    511e:	e1 56       	subi	r30, 0x61	; 97
    5120:	ff 4f       	sbci	r31, 0xFF	; 255
    5122:	80 81       	ld	r24, Z
    5124:	91 81       	ldd	r25, Z+1	; 0x01
    5126:	8d 93       	st	X+, r24
    5128:	9c 93       	st	X, r25
    512a:	fe 01       	movw	r30, r28
    512c:	e5 56       	subi	r30, 0x65	; 101
    512e:	ff 4f       	sbci	r31, 0xFF	; 255
    5130:	80 81       	ld	r24, Z
    5132:	91 81       	ldd	r25, Z+1	; 0x01
    5134:	01 97       	sbiw	r24, 0x01	; 1
    5136:	f1 f7       	brne	.-4      	; 0x5134 <main+0xcc6>
    5138:	fe 01       	movw	r30, r28
    513a:	e5 56       	subi	r30, 0x65	; 101
    513c:	ff 4f       	sbci	r31, 0xFF	; 255
    513e:	91 83       	std	Z+1, r25	; 0x01
    5140:	80 83       	st	Z, r24

					_delay_ms(4000);

					SERVO_voidTimer1ServoSetAngleOCR1A(90);
    5142:	6a e5       	ldi	r22, 0x5A	; 90
    5144:	70 e0       	ldi	r23, 0x00	; 0
    5146:	80 e0       	ldi	r24, 0x00	; 0
    5148:	90 e0       	ldi	r25, 0x00	; 0
    514a:	0e 94 b2 19 	call	0x3364	; 0x3364 <SERVO_voidTimer1ServoSetAngleOCR1A>
					SERVO_voidTimer1ServoSetAngleOCR1B(90);
    514e:	6a e5       	ldi	r22, 0x5A	; 90
    5150:	70 e0       	ldi	r23, 0x00	; 0
    5152:	80 e0       	ldi	r24, 0x00	; 0
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	0e 94 0d 1a 	call	0x341a	; 0x341a <SERVO_voidTimer1ServoSetAngleOCR1B>

					/* Turn on the indicator red led */
					DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN0,DIO_u8PIN_LOW);
    515a:	83 e0       	ldi	r24, 0x03	; 3
    515c:	60 e0       	ldi	r22, 0x00	; 0
    515e:	40 e0       	ldi	r20, 0x00	; 0
    5160:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_HIGH);
    5164:	83 e0       	ldi	r24, 0x03	; 3
    5166:	61 e0       	ldi	r22, 0x01	; 1
    5168:	41 e0       	ldi	r20, 0x01	; 1
    516a:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>

					/* Clear LCD */
					CLCD_voidClearScreen();
    516e:	0e 94 08 11 	call	0x2210	; 0x2210 <CLCD_voidClearScreen>
					Local_u8Flag=0;
    5172:	fe 01       	movw	r30, r28
    5174:	e0 50       	subi	r30, 0x00	; 0
    5176:	ff 4f       	sbci	r31, 0xFF	; 255
    5178:	10 82       	st	Z, r1
    517a:	0c 94 e4 30 	jmp	0x61c8	; 0x61c8 <main+0x1d5a>

				}
				else if((EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION1)==Local_au8Password[3]) &&  (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION2)==Local_au8Password[2]) && (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION3)==Local_au8Password[1]) && (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION4)==Local_au8Password[0]) )
    517e:	81 e2       	ldi	r24, 0x21	; 33
    5180:	90 e0       	ldi	r25, 0x00	; 0
    5182:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <EEPROM_u8ReadeData>
    5186:	fe 01       	movw	r30, r28
    5188:	ef 5f       	subi	r30, 0xFF	; 255
    518a:	fe 4f       	sbci	r31, 0xFE	; 254
    518c:	93 81       	ldd	r25, Z+3	; 0x03
    518e:	89 17       	cp	r24, r25
    5190:	09 f0       	breq	.+2      	; 0x5194 <main+0xd26>
    5192:	f9 c0       	rjmp	.+498    	; 0x5386 <main+0xf18>
    5194:	82 e2       	ldi	r24, 0x22	; 34
    5196:	90 e0       	ldi	r25, 0x00	; 0
    5198:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <EEPROM_u8ReadeData>
    519c:	fe 01       	movw	r30, r28
    519e:	ef 5f       	subi	r30, 0xFF	; 255
    51a0:	fe 4f       	sbci	r31, 0xFE	; 254
    51a2:	92 81       	ldd	r25, Z+2	; 0x02
    51a4:	89 17       	cp	r24, r25
    51a6:	09 f0       	breq	.+2      	; 0x51aa <main+0xd3c>
    51a8:	ee c0       	rjmp	.+476    	; 0x5386 <main+0xf18>
    51aa:	83 e2       	ldi	r24, 0x23	; 35
    51ac:	90 e0       	ldi	r25, 0x00	; 0
    51ae:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <EEPROM_u8ReadeData>
    51b2:	fe 01       	movw	r30, r28
    51b4:	ef 5f       	subi	r30, 0xFF	; 255
    51b6:	fe 4f       	sbci	r31, 0xFE	; 254
    51b8:	91 81       	ldd	r25, Z+1	; 0x01
    51ba:	89 17       	cp	r24, r25
    51bc:	09 f0       	breq	.+2      	; 0x51c0 <main+0xd52>
    51be:	e3 c0       	rjmp	.+454    	; 0x5386 <main+0xf18>
    51c0:	84 e2       	ldi	r24, 0x24	; 36
    51c2:	90 e0       	ldi	r25, 0x00	; 0
    51c4:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <EEPROM_u8ReadeData>
    51c8:	fe 01       	movw	r30, r28
    51ca:	ef 5f       	subi	r30, 0xFF	; 255
    51cc:	fe 4f       	sbci	r31, 0xFE	; 254
    51ce:	90 81       	ld	r25, Z
    51d0:	89 17       	cp	r24, r25
    51d2:	09 f0       	breq	.+2      	; 0x51d6 <main+0xd68>
    51d4:	d8 c0       	rjmp	.+432    	; 0x5386 <main+0xf18>
				{
					CLCD_voidClearScreen();
    51d6:	0e 94 08 11 	call	0x2210	; 0x2210 <CLCD_voidClearScreen>
					CLCD_voidGoToXY(0,1);
    51da:	80 e0       	ldi	r24, 0x00	; 0
    51dc:	61 e0       	ldi	r22, 0x01	; 1
    51de:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
					CLCD_voidSendString("Calling Police");
    51e2:	80 ec       	ldi	r24, 0xC0	; 192
    51e4:	90 e0       	ldi	r25, 0x00	; 0
    51e6:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>

					/* Turn on the indicator blue led */
					DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_LOW);
    51ea:	83 e0       	ldi	r24, 0x03	; 3
    51ec:	61 e0       	ldi	r22, 0x01	; 1
    51ee:	40 e0       	ldi	r20, 0x00	; 0
    51f0:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN2,DIO_u8PIN_HIGH);
    51f4:	83 e0       	ldi	r24, 0x03	; 3
    51f6:	62 e0       	ldi	r22, 0x02	; 2
    51f8:	41 e0       	ldi	r20, 0x01	; 1
    51fa:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
    51fe:	fe 01       	movw	r30, r28
    5200:	e9 56       	subi	r30, 0x69	; 105
    5202:	ff 4f       	sbci	r31, 0xFF	; 255
    5204:	80 e0       	ldi	r24, 0x00	; 0
    5206:	90 e4       	ldi	r25, 0x40	; 64
    5208:	ac e9       	ldi	r26, 0x9C	; 156
    520a:	b5 e4       	ldi	r27, 0x45	; 69
    520c:	80 83       	st	Z, r24
    520e:	91 83       	std	Z+1, r25	; 0x01
    5210:	a2 83       	std	Z+2, r26	; 0x02
    5212:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5214:	8e 01       	movw	r16, r28
    5216:	0d 56       	subi	r16, 0x6D	; 109
    5218:	1f 4f       	sbci	r17, 0xFF	; 255
    521a:	fe 01       	movw	r30, r28
    521c:	e9 56       	subi	r30, 0x69	; 105
    521e:	ff 4f       	sbci	r31, 0xFF	; 255
    5220:	60 81       	ld	r22, Z
    5222:	71 81       	ldd	r23, Z+1	; 0x01
    5224:	82 81       	ldd	r24, Z+2	; 0x02
    5226:	93 81       	ldd	r25, Z+3	; 0x03
    5228:	20 e0       	ldi	r18, 0x00	; 0
    522a:	30 e0       	ldi	r19, 0x00	; 0
    522c:	4a ef       	ldi	r20, 0xFA	; 250
    522e:	54 e4       	ldi	r21, 0x44	; 68
    5230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5234:	dc 01       	movw	r26, r24
    5236:	cb 01       	movw	r24, r22
    5238:	f8 01       	movw	r30, r16
    523a:	80 83       	st	Z, r24
    523c:	91 83       	std	Z+1, r25	; 0x01
    523e:	a2 83       	std	Z+2, r26	; 0x02
    5240:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5242:	fe 01       	movw	r30, r28
    5244:	ed 56       	subi	r30, 0x6D	; 109
    5246:	ff 4f       	sbci	r31, 0xFF	; 255
    5248:	60 81       	ld	r22, Z
    524a:	71 81       	ldd	r23, Z+1	; 0x01
    524c:	82 81       	ldd	r24, Z+2	; 0x02
    524e:	93 81       	ldd	r25, Z+3	; 0x03
    5250:	20 e0       	ldi	r18, 0x00	; 0
    5252:	30 e0       	ldi	r19, 0x00	; 0
    5254:	40 e8       	ldi	r20, 0x80	; 128
    5256:	5f e3       	ldi	r21, 0x3F	; 63
    5258:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    525c:	88 23       	and	r24, r24
    525e:	44 f4       	brge	.+16     	; 0x5270 <main+0xe02>
		__ticks = 1;
    5260:	fe 01       	movw	r30, r28
    5262:	ef 56       	subi	r30, 0x6F	; 111
    5264:	ff 4f       	sbci	r31, 0xFF	; 255
    5266:	81 e0       	ldi	r24, 0x01	; 1
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	91 83       	std	Z+1, r25	; 0x01
    526c:	80 83       	st	Z, r24
    526e:	64 c0       	rjmp	.+200    	; 0x5338 <main+0xeca>
	else if (__tmp > 65535)
    5270:	fe 01       	movw	r30, r28
    5272:	ed 56       	subi	r30, 0x6D	; 109
    5274:	ff 4f       	sbci	r31, 0xFF	; 255
    5276:	60 81       	ld	r22, Z
    5278:	71 81       	ldd	r23, Z+1	; 0x01
    527a:	82 81       	ldd	r24, Z+2	; 0x02
    527c:	93 81       	ldd	r25, Z+3	; 0x03
    527e:	20 e0       	ldi	r18, 0x00	; 0
    5280:	3f ef       	ldi	r19, 0xFF	; 255
    5282:	4f e7       	ldi	r20, 0x7F	; 127
    5284:	57 e4       	ldi	r21, 0x47	; 71
    5286:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    528a:	18 16       	cp	r1, r24
    528c:	0c f0       	brlt	.+2      	; 0x5290 <main+0xe22>
    528e:	43 c0       	rjmp	.+134    	; 0x5316 <main+0xea8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5290:	fe 01       	movw	r30, r28
    5292:	e9 56       	subi	r30, 0x69	; 105
    5294:	ff 4f       	sbci	r31, 0xFF	; 255
    5296:	60 81       	ld	r22, Z
    5298:	71 81       	ldd	r23, Z+1	; 0x01
    529a:	82 81       	ldd	r24, Z+2	; 0x02
    529c:	93 81       	ldd	r25, Z+3	; 0x03
    529e:	20 e0       	ldi	r18, 0x00	; 0
    52a0:	30 e0       	ldi	r19, 0x00	; 0
    52a2:	40 e2       	ldi	r20, 0x20	; 32
    52a4:	51 e4       	ldi	r21, 0x41	; 65
    52a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52aa:	dc 01       	movw	r26, r24
    52ac:	cb 01       	movw	r24, r22
    52ae:	8e 01       	movw	r16, r28
    52b0:	0f 56       	subi	r16, 0x6F	; 111
    52b2:	1f 4f       	sbci	r17, 0xFF	; 255
    52b4:	bc 01       	movw	r22, r24
    52b6:	cd 01       	movw	r24, r26
    52b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52bc:	dc 01       	movw	r26, r24
    52be:	cb 01       	movw	r24, r22
    52c0:	f8 01       	movw	r30, r16
    52c2:	91 83       	std	Z+1, r25	; 0x01
    52c4:	80 83       	st	Z, r24
    52c6:	1f c0       	rjmp	.+62     	; 0x5306 <main+0xe98>
    52c8:	fe 01       	movw	r30, r28
    52ca:	e1 57       	subi	r30, 0x71	; 113
    52cc:	ff 4f       	sbci	r31, 0xFF	; 255
    52ce:	88 ec       	ldi	r24, 0xC8	; 200
    52d0:	90 e0       	ldi	r25, 0x00	; 0
    52d2:	91 83       	std	Z+1, r25	; 0x01
    52d4:	80 83       	st	Z, r24
    52d6:	fe 01       	movw	r30, r28
    52d8:	e1 57       	subi	r30, 0x71	; 113
    52da:	ff 4f       	sbci	r31, 0xFF	; 255
    52dc:	80 81       	ld	r24, Z
    52de:	91 81       	ldd	r25, Z+1	; 0x01
    52e0:	01 97       	sbiw	r24, 0x01	; 1
    52e2:	f1 f7       	brne	.-4      	; 0x52e0 <main+0xe72>
    52e4:	fe 01       	movw	r30, r28
    52e6:	e1 57       	subi	r30, 0x71	; 113
    52e8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ea:	91 83       	std	Z+1, r25	; 0x01
    52ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52ee:	de 01       	movw	r26, r28
    52f0:	af 56       	subi	r26, 0x6F	; 111
    52f2:	bf 4f       	sbci	r27, 0xFF	; 255
    52f4:	fe 01       	movw	r30, r28
    52f6:	ef 56       	subi	r30, 0x6F	; 111
    52f8:	ff 4f       	sbci	r31, 0xFF	; 255
    52fa:	80 81       	ld	r24, Z
    52fc:	91 81       	ldd	r25, Z+1	; 0x01
    52fe:	01 97       	sbiw	r24, 0x01	; 1
    5300:	11 96       	adiw	r26, 0x01	; 1
    5302:	9c 93       	st	X, r25
    5304:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5306:	fe 01       	movw	r30, r28
    5308:	ef 56       	subi	r30, 0x6F	; 111
    530a:	ff 4f       	sbci	r31, 0xFF	; 255
    530c:	80 81       	ld	r24, Z
    530e:	91 81       	ldd	r25, Z+1	; 0x01
    5310:	00 97       	sbiw	r24, 0x00	; 0
    5312:	d1 f6       	brne	.-76     	; 0x52c8 <main+0xe5a>
    5314:	27 c0       	rjmp	.+78     	; 0x5364 <main+0xef6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5316:	8e 01       	movw	r16, r28
    5318:	0f 56       	subi	r16, 0x6F	; 111
    531a:	1f 4f       	sbci	r17, 0xFF	; 255
    531c:	fe 01       	movw	r30, r28
    531e:	ed 56       	subi	r30, 0x6D	; 109
    5320:	ff 4f       	sbci	r31, 0xFF	; 255
    5322:	60 81       	ld	r22, Z
    5324:	71 81       	ldd	r23, Z+1	; 0x01
    5326:	82 81       	ldd	r24, Z+2	; 0x02
    5328:	93 81       	ldd	r25, Z+3	; 0x03
    532a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    532e:	dc 01       	movw	r26, r24
    5330:	cb 01       	movw	r24, r22
    5332:	f8 01       	movw	r30, r16
    5334:	91 83       	std	Z+1, r25	; 0x01
    5336:	80 83       	st	Z, r24
    5338:	de 01       	movw	r26, r28
    533a:	a3 57       	subi	r26, 0x73	; 115
    533c:	bf 4f       	sbci	r27, 0xFF	; 255
    533e:	fe 01       	movw	r30, r28
    5340:	ef 56       	subi	r30, 0x6F	; 111
    5342:	ff 4f       	sbci	r31, 0xFF	; 255
    5344:	80 81       	ld	r24, Z
    5346:	91 81       	ldd	r25, Z+1	; 0x01
    5348:	8d 93       	st	X+, r24
    534a:	9c 93       	st	X, r25
    534c:	fe 01       	movw	r30, r28
    534e:	e3 57       	subi	r30, 0x73	; 115
    5350:	ff 4f       	sbci	r31, 0xFF	; 255
    5352:	80 81       	ld	r24, Z
    5354:	91 81       	ldd	r25, Z+1	; 0x01
    5356:	01 97       	sbiw	r24, 0x01	; 1
    5358:	f1 f7       	brne	.-4      	; 0x5356 <main+0xee8>
    535a:	fe 01       	movw	r30, r28
    535c:	e3 57       	subi	r30, 0x73	; 115
    535e:	ff 4f       	sbci	r31, 0xFF	; 255
    5360:	91 83       	std	Z+1, r25	; 0x01
    5362:	80 83       	st	Z, r24

					/* wait 5000 ms */
					_delay_ms(5000);

					/* Turn on the indicator red led */
					DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_HIGH);
    5364:	83 e0       	ldi	r24, 0x03	; 3
    5366:	61 e0       	ldi	r22, 0x01	; 1
    5368:	41 e0       	ldi	r20, 0x01	; 1
    536a:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN2,DIO_u8PIN_LOW);
    536e:	83 e0       	ldi	r24, 0x03	; 3
    5370:	62 e0       	ldi	r22, 0x02	; 2
    5372:	40 e0       	ldi	r20, 0x00	; 0
    5374:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>

					/* Clear LCD */
					CLCD_voidClearScreen();
    5378:	0e 94 08 11 	call	0x2210	; 0x2210 <CLCD_voidClearScreen>

					Local_u8Flag=0;
    537c:	fe 01       	movw	r30, r28
    537e:	e0 50       	subi	r30, 0x00	; 0
    5380:	ff 4f       	sbci	r31, 0xFF	; 255
    5382:	10 82       	st	Z, r1
    5384:	21 c7       	rjmp	.+3650   	; 0x61c8 <main+0x1d5a>
				}
				else
				{
					Local_u8Tries--;
    5386:	de 01       	movw	r26, r28
    5388:	a2 50       	subi	r26, 0x02	; 2
    538a:	bf 4f       	sbci	r27, 0xFF	; 255
    538c:	fe 01       	movw	r30, r28
    538e:	e2 50       	subi	r30, 0x02	; 2
    5390:	ff 4f       	sbci	r31, 0xFF	; 255
    5392:	80 81       	ld	r24, Z
    5394:	81 50       	subi	r24, 0x01	; 1
    5396:	8c 93       	st	X, r24
					/* Check if the three tries are */
					if(Local_u8Tries>0)
    5398:	fe 01       	movw	r30, r28
    539a:	e2 50       	subi	r30, 0x02	; 2
    539c:	ff 4f       	sbci	r31, 0xFF	; 255
    539e:	80 81       	ld	r24, Z
    53a0:	88 23       	and	r24, r24
    53a2:	09 f4       	brne	.+2      	; 0x53a6 <main+0xf38>
    53a4:	7f c1       	rjmp	.+766    	; 0x56a4 <main+0x1236>
					{
						CLCD_voidClearScreen();
    53a6:	0e 94 08 11 	call	0x2210	; 0x2210 <CLCD_voidClearScreen>
						CLCD_voidGoToXY(0,1);
    53aa:	80 e0       	ldi	r24, 0x00	; 0
    53ac:	61 e0       	ldi	r22, 0x01	; 1
    53ae:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
						CLCD_voidSendString("Wrong Password");
    53b2:	8f ec       	ldi	r24, 0xCF	; 207
    53b4:	90 e0       	ldi	r25, 0x00	; 0
    53b6:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>
    53ba:	fe 01       	movw	r30, r28
    53bc:	e7 57       	subi	r30, 0x77	; 119
    53be:	ff 4f       	sbci	r31, 0xFF	; 255
    53c0:	80 e0       	ldi	r24, 0x00	; 0
    53c2:	90 e0       	ldi	r25, 0x00	; 0
    53c4:	aa e7       	ldi	r26, 0x7A	; 122
    53c6:	b4 e4       	ldi	r27, 0x44	; 68
    53c8:	80 83       	st	Z, r24
    53ca:	91 83       	std	Z+1, r25	; 0x01
    53cc:	a2 83       	std	Z+2, r26	; 0x02
    53ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53d0:	8e 01       	movw	r16, r28
    53d2:	0b 57       	subi	r16, 0x7B	; 123
    53d4:	1f 4f       	sbci	r17, 0xFF	; 255
    53d6:	fe 01       	movw	r30, r28
    53d8:	e7 57       	subi	r30, 0x77	; 119
    53da:	ff 4f       	sbci	r31, 0xFF	; 255
    53dc:	60 81       	ld	r22, Z
    53de:	71 81       	ldd	r23, Z+1	; 0x01
    53e0:	82 81       	ldd	r24, Z+2	; 0x02
    53e2:	93 81       	ldd	r25, Z+3	; 0x03
    53e4:	20 e0       	ldi	r18, 0x00	; 0
    53e6:	30 e0       	ldi	r19, 0x00	; 0
    53e8:	4a ef       	ldi	r20, 0xFA	; 250
    53ea:	54 e4       	ldi	r21, 0x44	; 68
    53ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53f0:	dc 01       	movw	r26, r24
    53f2:	cb 01       	movw	r24, r22
    53f4:	f8 01       	movw	r30, r16
    53f6:	80 83       	st	Z, r24
    53f8:	91 83       	std	Z+1, r25	; 0x01
    53fa:	a2 83       	std	Z+2, r26	; 0x02
    53fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    53fe:	fe 01       	movw	r30, r28
    5400:	eb 57       	subi	r30, 0x7B	; 123
    5402:	ff 4f       	sbci	r31, 0xFF	; 255
    5404:	60 81       	ld	r22, Z
    5406:	71 81       	ldd	r23, Z+1	; 0x01
    5408:	82 81       	ldd	r24, Z+2	; 0x02
    540a:	93 81       	ldd	r25, Z+3	; 0x03
    540c:	20 e0       	ldi	r18, 0x00	; 0
    540e:	30 e0       	ldi	r19, 0x00	; 0
    5410:	40 e8       	ldi	r20, 0x80	; 128
    5412:	5f e3       	ldi	r21, 0x3F	; 63
    5414:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5418:	88 23       	and	r24, r24
    541a:	44 f4       	brge	.+16     	; 0x542c <main+0xfbe>
		__ticks = 1;
    541c:	fe 01       	movw	r30, r28
    541e:	ed 57       	subi	r30, 0x7D	; 125
    5420:	ff 4f       	sbci	r31, 0xFF	; 255
    5422:	81 e0       	ldi	r24, 0x01	; 1
    5424:	90 e0       	ldi	r25, 0x00	; 0
    5426:	91 83       	std	Z+1, r25	; 0x01
    5428:	80 83       	st	Z, r24
    542a:	64 c0       	rjmp	.+200    	; 0x54f4 <main+0x1086>
	else if (__tmp > 65535)
    542c:	fe 01       	movw	r30, r28
    542e:	eb 57       	subi	r30, 0x7B	; 123
    5430:	ff 4f       	sbci	r31, 0xFF	; 255
    5432:	60 81       	ld	r22, Z
    5434:	71 81       	ldd	r23, Z+1	; 0x01
    5436:	82 81       	ldd	r24, Z+2	; 0x02
    5438:	93 81       	ldd	r25, Z+3	; 0x03
    543a:	20 e0       	ldi	r18, 0x00	; 0
    543c:	3f ef       	ldi	r19, 0xFF	; 255
    543e:	4f e7       	ldi	r20, 0x7F	; 127
    5440:	57 e4       	ldi	r21, 0x47	; 71
    5442:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5446:	18 16       	cp	r1, r24
    5448:	0c f0       	brlt	.+2      	; 0x544c <main+0xfde>
    544a:	43 c0       	rjmp	.+134    	; 0x54d2 <main+0x1064>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    544c:	fe 01       	movw	r30, r28
    544e:	e7 57       	subi	r30, 0x77	; 119
    5450:	ff 4f       	sbci	r31, 0xFF	; 255
    5452:	60 81       	ld	r22, Z
    5454:	71 81       	ldd	r23, Z+1	; 0x01
    5456:	82 81       	ldd	r24, Z+2	; 0x02
    5458:	93 81       	ldd	r25, Z+3	; 0x03
    545a:	20 e0       	ldi	r18, 0x00	; 0
    545c:	30 e0       	ldi	r19, 0x00	; 0
    545e:	40 e2       	ldi	r20, 0x20	; 32
    5460:	51 e4       	ldi	r21, 0x41	; 65
    5462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5466:	dc 01       	movw	r26, r24
    5468:	cb 01       	movw	r24, r22
    546a:	8e 01       	movw	r16, r28
    546c:	0d 57       	subi	r16, 0x7D	; 125
    546e:	1f 4f       	sbci	r17, 0xFF	; 255
    5470:	bc 01       	movw	r22, r24
    5472:	cd 01       	movw	r24, r26
    5474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5478:	dc 01       	movw	r26, r24
    547a:	cb 01       	movw	r24, r22
    547c:	f8 01       	movw	r30, r16
    547e:	91 83       	std	Z+1, r25	; 0x01
    5480:	80 83       	st	Z, r24
    5482:	1f c0       	rjmp	.+62     	; 0x54c2 <main+0x1054>
    5484:	fe 01       	movw	r30, r28
    5486:	ef 57       	subi	r30, 0x7F	; 127
    5488:	ff 4f       	sbci	r31, 0xFF	; 255
    548a:	88 ec       	ldi	r24, 0xC8	; 200
    548c:	90 e0       	ldi	r25, 0x00	; 0
    548e:	91 83       	std	Z+1, r25	; 0x01
    5490:	80 83       	st	Z, r24
    5492:	fe 01       	movw	r30, r28
    5494:	ef 57       	subi	r30, 0x7F	; 127
    5496:	ff 4f       	sbci	r31, 0xFF	; 255
    5498:	80 81       	ld	r24, Z
    549a:	91 81       	ldd	r25, Z+1	; 0x01
    549c:	01 97       	sbiw	r24, 0x01	; 1
    549e:	f1 f7       	brne	.-4      	; 0x549c <main+0x102e>
    54a0:	fe 01       	movw	r30, r28
    54a2:	ef 57       	subi	r30, 0x7F	; 127
    54a4:	ff 4f       	sbci	r31, 0xFF	; 255
    54a6:	91 83       	std	Z+1, r25	; 0x01
    54a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54aa:	de 01       	movw	r26, r28
    54ac:	ad 57       	subi	r26, 0x7D	; 125
    54ae:	bf 4f       	sbci	r27, 0xFF	; 255
    54b0:	fe 01       	movw	r30, r28
    54b2:	ed 57       	subi	r30, 0x7D	; 125
    54b4:	ff 4f       	sbci	r31, 0xFF	; 255
    54b6:	80 81       	ld	r24, Z
    54b8:	91 81       	ldd	r25, Z+1	; 0x01
    54ba:	01 97       	sbiw	r24, 0x01	; 1
    54bc:	11 96       	adiw	r26, 0x01	; 1
    54be:	9c 93       	st	X, r25
    54c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54c2:	fe 01       	movw	r30, r28
    54c4:	ed 57       	subi	r30, 0x7D	; 125
    54c6:	ff 4f       	sbci	r31, 0xFF	; 255
    54c8:	80 81       	ld	r24, Z
    54ca:	91 81       	ldd	r25, Z+1	; 0x01
    54cc:	00 97       	sbiw	r24, 0x00	; 0
    54ce:	d1 f6       	brne	.-76     	; 0x5484 <main+0x1016>
    54d0:	27 c0       	rjmp	.+78     	; 0x5520 <main+0x10b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54d2:	8e 01       	movw	r16, r28
    54d4:	0d 57       	subi	r16, 0x7D	; 125
    54d6:	1f 4f       	sbci	r17, 0xFF	; 255
    54d8:	fe 01       	movw	r30, r28
    54da:	eb 57       	subi	r30, 0x7B	; 123
    54dc:	ff 4f       	sbci	r31, 0xFF	; 255
    54de:	60 81       	ld	r22, Z
    54e0:	71 81       	ldd	r23, Z+1	; 0x01
    54e2:	82 81       	ldd	r24, Z+2	; 0x02
    54e4:	93 81       	ldd	r25, Z+3	; 0x03
    54e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54ea:	dc 01       	movw	r26, r24
    54ec:	cb 01       	movw	r24, r22
    54ee:	f8 01       	movw	r30, r16
    54f0:	91 83       	std	Z+1, r25	; 0x01
    54f2:	80 83       	st	Z, r24
    54f4:	de 01       	movw	r26, r28
    54f6:	a1 58       	subi	r26, 0x81	; 129
    54f8:	bf 4f       	sbci	r27, 0xFF	; 255
    54fa:	fe 01       	movw	r30, r28
    54fc:	ed 57       	subi	r30, 0x7D	; 125
    54fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5500:	80 81       	ld	r24, Z
    5502:	91 81       	ldd	r25, Z+1	; 0x01
    5504:	8d 93       	st	X+, r24
    5506:	9c 93       	st	X, r25
    5508:	fe 01       	movw	r30, r28
    550a:	e1 58       	subi	r30, 0x81	; 129
    550c:	ff 4f       	sbci	r31, 0xFF	; 255
    550e:	80 81       	ld	r24, Z
    5510:	91 81       	ldd	r25, Z+1	; 0x01
    5512:	01 97       	sbiw	r24, 0x01	; 1
    5514:	f1 f7       	brne	.-4      	; 0x5512 <main+0x10a4>
    5516:	fe 01       	movw	r30, r28
    5518:	e1 58       	subi	r30, 0x81	; 129
    551a:	ff 4f       	sbci	r31, 0xFF	; 255
    551c:	91 83       	std	Z+1, r25	; 0x01
    551e:	80 83       	st	Z, r24
						_delay_ms(1000);
						CLCD_voidClearScreen();
    5520:	0e 94 08 11 	call	0x2210	; 0x2210 <CLCD_voidClearScreen>
						CLCD_voidSendString("Tries Left:");
    5524:	8e ed       	ldi	r24, 0xDE	; 222
    5526:	90 e0       	ldi	r25, 0x00	; 0
    5528:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>
						CLCD_voidSendData(Local_u8Tries+48);
    552c:	fe 01       	movw	r30, r28
    552e:	e2 50       	subi	r30, 0x02	; 2
    5530:	ff 4f       	sbci	r31, 0xFF	; 255
    5532:	80 81       	ld	r24, Z
    5534:	80 5d       	subi	r24, 0xD0	; 208
    5536:	0e 94 a6 0a 	call	0x154c	; 0x154c <CLCD_voidSendData>
    553a:	fe 01       	movw	r30, r28
    553c:	e5 58       	subi	r30, 0x85	; 133
    553e:	ff 4f       	sbci	r31, 0xFF	; 255
    5540:	80 e0       	ldi	r24, 0x00	; 0
    5542:	90 e0       	ldi	r25, 0x00	; 0
    5544:	aa e7       	ldi	r26, 0x7A	; 122
    5546:	b4 e4       	ldi	r27, 0x44	; 68
    5548:	80 83       	st	Z, r24
    554a:	91 83       	std	Z+1, r25	; 0x01
    554c:	a2 83       	std	Z+2, r26	; 0x02
    554e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5550:	8e 01       	movw	r16, r28
    5552:	09 58       	subi	r16, 0x89	; 137
    5554:	1f 4f       	sbci	r17, 0xFF	; 255
    5556:	fe 01       	movw	r30, r28
    5558:	e5 58       	subi	r30, 0x85	; 133
    555a:	ff 4f       	sbci	r31, 0xFF	; 255
    555c:	60 81       	ld	r22, Z
    555e:	71 81       	ldd	r23, Z+1	; 0x01
    5560:	82 81       	ldd	r24, Z+2	; 0x02
    5562:	93 81       	ldd	r25, Z+3	; 0x03
    5564:	20 e0       	ldi	r18, 0x00	; 0
    5566:	30 e0       	ldi	r19, 0x00	; 0
    5568:	4a ef       	ldi	r20, 0xFA	; 250
    556a:	54 e4       	ldi	r21, 0x44	; 68
    556c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5570:	dc 01       	movw	r26, r24
    5572:	cb 01       	movw	r24, r22
    5574:	f8 01       	movw	r30, r16
    5576:	80 83       	st	Z, r24
    5578:	91 83       	std	Z+1, r25	; 0x01
    557a:	a2 83       	std	Z+2, r26	; 0x02
    557c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    557e:	fe 01       	movw	r30, r28
    5580:	e9 58       	subi	r30, 0x89	; 137
    5582:	ff 4f       	sbci	r31, 0xFF	; 255
    5584:	60 81       	ld	r22, Z
    5586:	71 81       	ldd	r23, Z+1	; 0x01
    5588:	82 81       	ldd	r24, Z+2	; 0x02
    558a:	93 81       	ldd	r25, Z+3	; 0x03
    558c:	20 e0       	ldi	r18, 0x00	; 0
    558e:	30 e0       	ldi	r19, 0x00	; 0
    5590:	40 e8       	ldi	r20, 0x80	; 128
    5592:	5f e3       	ldi	r21, 0x3F	; 63
    5594:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5598:	88 23       	and	r24, r24
    559a:	44 f4       	brge	.+16     	; 0x55ac <main+0x113e>
		__ticks = 1;
    559c:	fe 01       	movw	r30, r28
    559e:	eb 58       	subi	r30, 0x8B	; 139
    55a0:	ff 4f       	sbci	r31, 0xFF	; 255
    55a2:	81 e0       	ldi	r24, 0x01	; 1
    55a4:	90 e0       	ldi	r25, 0x00	; 0
    55a6:	91 83       	std	Z+1, r25	; 0x01
    55a8:	80 83       	st	Z, r24
    55aa:	64 c0       	rjmp	.+200    	; 0x5674 <main+0x1206>
	else if (__tmp > 65535)
    55ac:	fe 01       	movw	r30, r28
    55ae:	e9 58       	subi	r30, 0x89	; 137
    55b0:	ff 4f       	sbci	r31, 0xFF	; 255
    55b2:	60 81       	ld	r22, Z
    55b4:	71 81       	ldd	r23, Z+1	; 0x01
    55b6:	82 81       	ldd	r24, Z+2	; 0x02
    55b8:	93 81       	ldd	r25, Z+3	; 0x03
    55ba:	20 e0       	ldi	r18, 0x00	; 0
    55bc:	3f ef       	ldi	r19, 0xFF	; 255
    55be:	4f e7       	ldi	r20, 0x7F	; 127
    55c0:	57 e4       	ldi	r21, 0x47	; 71
    55c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55c6:	18 16       	cp	r1, r24
    55c8:	0c f0       	brlt	.+2      	; 0x55cc <main+0x115e>
    55ca:	43 c0       	rjmp	.+134    	; 0x5652 <main+0x11e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55cc:	fe 01       	movw	r30, r28
    55ce:	e5 58       	subi	r30, 0x85	; 133
    55d0:	ff 4f       	sbci	r31, 0xFF	; 255
    55d2:	60 81       	ld	r22, Z
    55d4:	71 81       	ldd	r23, Z+1	; 0x01
    55d6:	82 81       	ldd	r24, Z+2	; 0x02
    55d8:	93 81       	ldd	r25, Z+3	; 0x03
    55da:	20 e0       	ldi	r18, 0x00	; 0
    55dc:	30 e0       	ldi	r19, 0x00	; 0
    55de:	40 e2       	ldi	r20, 0x20	; 32
    55e0:	51 e4       	ldi	r21, 0x41	; 65
    55e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55e6:	dc 01       	movw	r26, r24
    55e8:	cb 01       	movw	r24, r22
    55ea:	8e 01       	movw	r16, r28
    55ec:	0b 58       	subi	r16, 0x8B	; 139
    55ee:	1f 4f       	sbci	r17, 0xFF	; 255
    55f0:	bc 01       	movw	r22, r24
    55f2:	cd 01       	movw	r24, r26
    55f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55f8:	dc 01       	movw	r26, r24
    55fa:	cb 01       	movw	r24, r22
    55fc:	f8 01       	movw	r30, r16
    55fe:	91 83       	std	Z+1, r25	; 0x01
    5600:	80 83       	st	Z, r24
    5602:	1f c0       	rjmp	.+62     	; 0x5642 <main+0x11d4>
    5604:	fe 01       	movw	r30, r28
    5606:	ed 58       	subi	r30, 0x8D	; 141
    5608:	ff 4f       	sbci	r31, 0xFF	; 255
    560a:	88 ec       	ldi	r24, 0xC8	; 200
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	91 83       	std	Z+1, r25	; 0x01
    5610:	80 83       	st	Z, r24
    5612:	fe 01       	movw	r30, r28
    5614:	ed 58       	subi	r30, 0x8D	; 141
    5616:	ff 4f       	sbci	r31, 0xFF	; 255
    5618:	80 81       	ld	r24, Z
    561a:	91 81       	ldd	r25, Z+1	; 0x01
    561c:	01 97       	sbiw	r24, 0x01	; 1
    561e:	f1 f7       	brne	.-4      	; 0x561c <main+0x11ae>
    5620:	fe 01       	movw	r30, r28
    5622:	ed 58       	subi	r30, 0x8D	; 141
    5624:	ff 4f       	sbci	r31, 0xFF	; 255
    5626:	91 83       	std	Z+1, r25	; 0x01
    5628:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    562a:	de 01       	movw	r26, r28
    562c:	ab 58       	subi	r26, 0x8B	; 139
    562e:	bf 4f       	sbci	r27, 0xFF	; 255
    5630:	fe 01       	movw	r30, r28
    5632:	eb 58       	subi	r30, 0x8B	; 139
    5634:	ff 4f       	sbci	r31, 0xFF	; 255
    5636:	80 81       	ld	r24, Z
    5638:	91 81       	ldd	r25, Z+1	; 0x01
    563a:	01 97       	sbiw	r24, 0x01	; 1
    563c:	11 96       	adiw	r26, 0x01	; 1
    563e:	9c 93       	st	X, r25
    5640:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5642:	fe 01       	movw	r30, r28
    5644:	eb 58       	subi	r30, 0x8B	; 139
    5646:	ff 4f       	sbci	r31, 0xFF	; 255
    5648:	80 81       	ld	r24, Z
    564a:	91 81       	ldd	r25, Z+1	; 0x01
    564c:	00 97       	sbiw	r24, 0x00	; 0
    564e:	d1 f6       	brne	.-76     	; 0x5604 <main+0x1196>
    5650:	bb c5       	rjmp	.+2934   	; 0x61c8 <main+0x1d5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5652:	8e 01       	movw	r16, r28
    5654:	0b 58       	subi	r16, 0x8B	; 139
    5656:	1f 4f       	sbci	r17, 0xFF	; 255
    5658:	fe 01       	movw	r30, r28
    565a:	e9 58       	subi	r30, 0x89	; 137
    565c:	ff 4f       	sbci	r31, 0xFF	; 255
    565e:	60 81       	ld	r22, Z
    5660:	71 81       	ldd	r23, Z+1	; 0x01
    5662:	82 81       	ldd	r24, Z+2	; 0x02
    5664:	93 81       	ldd	r25, Z+3	; 0x03
    5666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    566a:	dc 01       	movw	r26, r24
    566c:	cb 01       	movw	r24, r22
    566e:	f8 01       	movw	r30, r16
    5670:	91 83       	std	Z+1, r25	; 0x01
    5672:	80 83       	st	Z, r24
    5674:	de 01       	movw	r26, r28
    5676:	af 58       	subi	r26, 0x8F	; 143
    5678:	bf 4f       	sbci	r27, 0xFF	; 255
    567a:	fe 01       	movw	r30, r28
    567c:	eb 58       	subi	r30, 0x8B	; 139
    567e:	ff 4f       	sbci	r31, 0xFF	; 255
    5680:	80 81       	ld	r24, Z
    5682:	91 81       	ldd	r25, Z+1	; 0x01
    5684:	11 96       	adiw	r26, 0x01	; 1
    5686:	9c 93       	st	X, r25
    5688:	8e 93       	st	-X, r24
    568a:	fe 01       	movw	r30, r28
    568c:	ef 58       	subi	r30, 0x8F	; 143
    568e:	ff 4f       	sbci	r31, 0xFF	; 255
    5690:	80 81       	ld	r24, Z
    5692:	91 81       	ldd	r25, Z+1	; 0x01
    5694:	01 97       	sbiw	r24, 0x01	; 1
    5696:	f1 f7       	brne	.-4      	; 0x5694 <main+0x1226>
    5698:	fe 01       	movw	r30, r28
    569a:	ef 58       	subi	r30, 0x8F	; 143
    569c:	ff 4f       	sbci	r31, 0xFF	; 255
    569e:	91 83       	std	Z+1, r25	; 0x01
    56a0:	80 83       	st	Z, r24
    56a2:	92 c5       	rjmp	.+2852   	; 0x61c8 <main+0x1d5a>
    56a4:	fe 01       	movw	r30, r28
    56a6:	e3 59       	subi	r30, 0x93	; 147
    56a8:	ff 4f       	sbci	r31, 0xFF	; 255
    56aa:	80 e0       	ldi	r24, 0x00	; 0
    56ac:	90 e0       	ldi	r25, 0x00	; 0
    56ae:	aa ef       	ldi	r26, 0xFA	; 250
    56b0:	b3 e4       	ldi	r27, 0x43	; 67
    56b2:	80 83       	st	Z, r24
    56b4:	91 83       	std	Z+1, r25	; 0x01
    56b6:	a2 83       	std	Z+2, r26	; 0x02
    56b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56ba:	8e 01       	movw	r16, r28
    56bc:	07 59       	subi	r16, 0x97	; 151
    56be:	1f 4f       	sbci	r17, 0xFF	; 255
    56c0:	fe 01       	movw	r30, r28
    56c2:	e3 59       	subi	r30, 0x93	; 147
    56c4:	ff 4f       	sbci	r31, 0xFF	; 255
    56c6:	60 81       	ld	r22, Z
    56c8:	71 81       	ldd	r23, Z+1	; 0x01
    56ca:	82 81       	ldd	r24, Z+2	; 0x02
    56cc:	93 81       	ldd	r25, Z+3	; 0x03
    56ce:	20 e0       	ldi	r18, 0x00	; 0
    56d0:	30 e0       	ldi	r19, 0x00	; 0
    56d2:	4a ef       	ldi	r20, 0xFA	; 250
    56d4:	54 e4       	ldi	r21, 0x44	; 68
    56d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56da:	dc 01       	movw	r26, r24
    56dc:	cb 01       	movw	r24, r22
    56de:	f8 01       	movw	r30, r16
    56e0:	80 83       	st	Z, r24
    56e2:	91 83       	std	Z+1, r25	; 0x01
    56e4:	a2 83       	std	Z+2, r26	; 0x02
    56e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    56e8:	fe 01       	movw	r30, r28
    56ea:	e7 59       	subi	r30, 0x97	; 151
    56ec:	ff 4f       	sbci	r31, 0xFF	; 255
    56ee:	60 81       	ld	r22, Z
    56f0:	71 81       	ldd	r23, Z+1	; 0x01
    56f2:	82 81       	ldd	r24, Z+2	; 0x02
    56f4:	93 81       	ldd	r25, Z+3	; 0x03
    56f6:	20 e0       	ldi	r18, 0x00	; 0
    56f8:	30 e0       	ldi	r19, 0x00	; 0
    56fa:	40 e8       	ldi	r20, 0x80	; 128
    56fc:	5f e3       	ldi	r21, 0x3F	; 63
    56fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5702:	88 23       	and	r24, r24
    5704:	44 f4       	brge	.+16     	; 0x5716 <main+0x12a8>
		__ticks = 1;
    5706:	fe 01       	movw	r30, r28
    5708:	e9 59       	subi	r30, 0x99	; 153
    570a:	ff 4f       	sbci	r31, 0xFF	; 255
    570c:	81 e0       	ldi	r24, 0x01	; 1
    570e:	90 e0       	ldi	r25, 0x00	; 0
    5710:	91 83       	std	Z+1, r25	; 0x01
    5712:	80 83       	st	Z, r24
    5714:	64 c0       	rjmp	.+200    	; 0x57de <main+0x1370>
	else if (__tmp > 65535)
    5716:	fe 01       	movw	r30, r28
    5718:	e7 59       	subi	r30, 0x97	; 151
    571a:	ff 4f       	sbci	r31, 0xFF	; 255
    571c:	60 81       	ld	r22, Z
    571e:	71 81       	ldd	r23, Z+1	; 0x01
    5720:	82 81       	ldd	r24, Z+2	; 0x02
    5722:	93 81       	ldd	r25, Z+3	; 0x03
    5724:	20 e0       	ldi	r18, 0x00	; 0
    5726:	3f ef       	ldi	r19, 0xFF	; 255
    5728:	4f e7       	ldi	r20, 0x7F	; 127
    572a:	57 e4       	ldi	r21, 0x47	; 71
    572c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5730:	18 16       	cp	r1, r24
    5732:	0c f0       	brlt	.+2      	; 0x5736 <main+0x12c8>
    5734:	43 c0       	rjmp	.+134    	; 0x57bc <main+0x134e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5736:	fe 01       	movw	r30, r28
    5738:	e3 59       	subi	r30, 0x93	; 147
    573a:	ff 4f       	sbci	r31, 0xFF	; 255
    573c:	60 81       	ld	r22, Z
    573e:	71 81       	ldd	r23, Z+1	; 0x01
    5740:	82 81       	ldd	r24, Z+2	; 0x02
    5742:	93 81       	ldd	r25, Z+3	; 0x03
    5744:	20 e0       	ldi	r18, 0x00	; 0
    5746:	30 e0       	ldi	r19, 0x00	; 0
    5748:	40 e2       	ldi	r20, 0x20	; 32
    574a:	51 e4       	ldi	r21, 0x41	; 65
    574c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5750:	dc 01       	movw	r26, r24
    5752:	cb 01       	movw	r24, r22
    5754:	8e 01       	movw	r16, r28
    5756:	09 59       	subi	r16, 0x99	; 153
    5758:	1f 4f       	sbci	r17, 0xFF	; 255
    575a:	bc 01       	movw	r22, r24
    575c:	cd 01       	movw	r24, r26
    575e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5762:	dc 01       	movw	r26, r24
    5764:	cb 01       	movw	r24, r22
    5766:	f8 01       	movw	r30, r16
    5768:	91 83       	std	Z+1, r25	; 0x01
    576a:	80 83       	st	Z, r24
    576c:	1f c0       	rjmp	.+62     	; 0x57ac <main+0x133e>
    576e:	fe 01       	movw	r30, r28
    5770:	eb 59       	subi	r30, 0x9B	; 155
    5772:	ff 4f       	sbci	r31, 0xFF	; 255
    5774:	88 ec       	ldi	r24, 0xC8	; 200
    5776:	90 e0       	ldi	r25, 0x00	; 0
    5778:	91 83       	std	Z+1, r25	; 0x01
    577a:	80 83       	st	Z, r24
    577c:	fe 01       	movw	r30, r28
    577e:	eb 59       	subi	r30, 0x9B	; 155
    5780:	ff 4f       	sbci	r31, 0xFF	; 255
    5782:	80 81       	ld	r24, Z
    5784:	91 81       	ldd	r25, Z+1	; 0x01
    5786:	01 97       	sbiw	r24, 0x01	; 1
    5788:	f1 f7       	brne	.-4      	; 0x5786 <main+0x1318>
    578a:	fe 01       	movw	r30, r28
    578c:	eb 59       	subi	r30, 0x9B	; 155
    578e:	ff 4f       	sbci	r31, 0xFF	; 255
    5790:	91 83       	std	Z+1, r25	; 0x01
    5792:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5794:	de 01       	movw	r26, r28
    5796:	a9 59       	subi	r26, 0x99	; 153
    5798:	bf 4f       	sbci	r27, 0xFF	; 255
    579a:	fe 01       	movw	r30, r28
    579c:	e9 59       	subi	r30, 0x99	; 153
    579e:	ff 4f       	sbci	r31, 0xFF	; 255
    57a0:	80 81       	ld	r24, Z
    57a2:	91 81       	ldd	r25, Z+1	; 0x01
    57a4:	01 97       	sbiw	r24, 0x01	; 1
    57a6:	11 96       	adiw	r26, 0x01	; 1
    57a8:	9c 93       	st	X, r25
    57aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57ac:	fe 01       	movw	r30, r28
    57ae:	e9 59       	subi	r30, 0x99	; 153
    57b0:	ff 4f       	sbci	r31, 0xFF	; 255
    57b2:	80 81       	ld	r24, Z
    57b4:	91 81       	ldd	r25, Z+1	; 0x01
    57b6:	00 97       	sbiw	r24, 0x00	; 0
    57b8:	d1 f6       	brne	.-76     	; 0x576e <main+0x1300>
    57ba:	27 c0       	rjmp	.+78     	; 0x580a <main+0x139c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57bc:	8e 01       	movw	r16, r28
    57be:	09 59       	subi	r16, 0x99	; 153
    57c0:	1f 4f       	sbci	r17, 0xFF	; 255
    57c2:	fe 01       	movw	r30, r28
    57c4:	e7 59       	subi	r30, 0x97	; 151
    57c6:	ff 4f       	sbci	r31, 0xFF	; 255
    57c8:	60 81       	ld	r22, Z
    57ca:	71 81       	ldd	r23, Z+1	; 0x01
    57cc:	82 81       	ldd	r24, Z+2	; 0x02
    57ce:	93 81       	ldd	r25, Z+3	; 0x03
    57d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57d4:	dc 01       	movw	r26, r24
    57d6:	cb 01       	movw	r24, r22
    57d8:	f8 01       	movw	r30, r16
    57da:	91 83       	std	Z+1, r25	; 0x01
    57dc:	80 83       	st	Z, r24
    57de:	de 01       	movw	r26, r28
    57e0:	ad 59       	subi	r26, 0x9D	; 157
    57e2:	bf 4f       	sbci	r27, 0xFF	; 255
    57e4:	fe 01       	movw	r30, r28
    57e6:	e9 59       	subi	r30, 0x99	; 153
    57e8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ea:	80 81       	ld	r24, Z
    57ec:	91 81       	ldd	r25, Z+1	; 0x01
    57ee:	8d 93       	st	X+, r24
    57f0:	9c 93       	st	X, r25
    57f2:	fe 01       	movw	r30, r28
    57f4:	ed 59       	subi	r30, 0x9D	; 157
    57f6:	ff 4f       	sbci	r31, 0xFF	; 255
    57f8:	80 81       	ld	r24, Z
    57fa:	91 81       	ldd	r25, Z+1	; 0x01
    57fc:	01 97       	sbiw	r24, 0x01	; 1
    57fe:	f1 f7       	brne	.-4      	; 0x57fc <main+0x138e>
    5800:	fe 01       	movw	r30, r28
    5802:	ed 59       	subi	r30, 0x9D	; 157
    5804:	ff 4f       	sbci	r31, 0xFF	; 255
    5806:	91 83       	std	Z+1, r25	; 0x01
    5808:	80 83       	st	Z, r24
					{
						/* wait 500 ms */
						_delay_ms(500);

						/* Clear LCD */
						CLCD_voidClearScreen();
    580a:	0e 94 08 11 	call	0x2210	; 0x2210 <CLCD_voidClearScreen>

						/* Control the position (0,1) and print string in LCD  */
						CLCD_voidGoToXY(0,2);
    580e:	80 e0       	ldi	r24, 0x00	; 0
    5810:	62 e0       	ldi	r22, 0x02	; 2
    5812:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
						CLCD_voidSendString("LOGIN BLOCKED");
    5816:	8a ee       	ldi	r24, 0xEA	; 234
    5818:	90 e0       	ldi	r25, 0x00	; 0
    581a:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>

						/* Turn on buzzer */
						DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN3,DIO_u8PIN_HIGH);
    581e:	83 e0       	ldi	r24, 0x03	; 3
    5820:	63 e0       	ldi	r22, 0x03	; 3
    5822:	41 e0       	ldi	r20, 0x01	; 1
    5824:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
    5828:	fe 01       	movw	r30, r28
    582a:	e1 5a       	subi	r30, 0xA1	; 161
    582c:	ff 4f       	sbci	r31, 0xFF	; 255
    582e:	80 e0       	ldi	r24, 0x00	; 0
    5830:	90 e4       	ldi	r25, 0x40	; 64
    5832:	ac e1       	ldi	r26, 0x1C	; 28
    5834:	b6 e4       	ldi	r27, 0x46	; 70
    5836:	80 83       	st	Z, r24
    5838:	91 83       	std	Z+1, r25	; 0x01
    583a:	a2 83       	std	Z+2, r26	; 0x02
    583c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    583e:	8e 01       	movw	r16, r28
    5840:	05 5a       	subi	r16, 0xA5	; 165
    5842:	1f 4f       	sbci	r17, 0xFF	; 255
    5844:	fe 01       	movw	r30, r28
    5846:	e1 5a       	subi	r30, 0xA1	; 161
    5848:	ff 4f       	sbci	r31, 0xFF	; 255
    584a:	60 81       	ld	r22, Z
    584c:	71 81       	ldd	r23, Z+1	; 0x01
    584e:	82 81       	ldd	r24, Z+2	; 0x02
    5850:	93 81       	ldd	r25, Z+3	; 0x03
    5852:	20 e0       	ldi	r18, 0x00	; 0
    5854:	30 e0       	ldi	r19, 0x00	; 0
    5856:	4a ef       	ldi	r20, 0xFA	; 250
    5858:	54 e4       	ldi	r21, 0x44	; 68
    585a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    585e:	dc 01       	movw	r26, r24
    5860:	cb 01       	movw	r24, r22
    5862:	f8 01       	movw	r30, r16
    5864:	80 83       	st	Z, r24
    5866:	91 83       	std	Z+1, r25	; 0x01
    5868:	a2 83       	std	Z+2, r26	; 0x02
    586a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    586c:	fe 01       	movw	r30, r28
    586e:	e5 5a       	subi	r30, 0xA5	; 165
    5870:	ff 4f       	sbci	r31, 0xFF	; 255
    5872:	60 81       	ld	r22, Z
    5874:	71 81       	ldd	r23, Z+1	; 0x01
    5876:	82 81       	ldd	r24, Z+2	; 0x02
    5878:	93 81       	ldd	r25, Z+3	; 0x03
    587a:	20 e0       	ldi	r18, 0x00	; 0
    587c:	30 e0       	ldi	r19, 0x00	; 0
    587e:	40 e8       	ldi	r20, 0x80	; 128
    5880:	5f e3       	ldi	r21, 0x3F	; 63
    5882:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5886:	88 23       	and	r24, r24
    5888:	44 f4       	brge	.+16     	; 0x589a <main+0x142c>
		__ticks = 1;
    588a:	fe 01       	movw	r30, r28
    588c:	e7 5a       	subi	r30, 0xA7	; 167
    588e:	ff 4f       	sbci	r31, 0xFF	; 255
    5890:	81 e0       	ldi	r24, 0x01	; 1
    5892:	90 e0       	ldi	r25, 0x00	; 0
    5894:	91 83       	std	Z+1, r25	; 0x01
    5896:	80 83       	st	Z, r24
    5898:	64 c0       	rjmp	.+200    	; 0x5962 <main+0x14f4>
	else if (__tmp > 65535)
    589a:	fe 01       	movw	r30, r28
    589c:	e5 5a       	subi	r30, 0xA5	; 165
    589e:	ff 4f       	sbci	r31, 0xFF	; 255
    58a0:	60 81       	ld	r22, Z
    58a2:	71 81       	ldd	r23, Z+1	; 0x01
    58a4:	82 81       	ldd	r24, Z+2	; 0x02
    58a6:	93 81       	ldd	r25, Z+3	; 0x03
    58a8:	20 e0       	ldi	r18, 0x00	; 0
    58aa:	3f ef       	ldi	r19, 0xFF	; 255
    58ac:	4f e7       	ldi	r20, 0x7F	; 127
    58ae:	57 e4       	ldi	r21, 0x47	; 71
    58b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58b4:	18 16       	cp	r1, r24
    58b6:	0c f0       	brlt	.+2      	; 0x58ba <main+0x144c>
    58b8:	43 c0       	rjmp	.+134    	; 0x5940 <main+0x14d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58ba:	fe 01       	movw	r30, r28
    58bc:	e1 5a       	subi	r30, 0xA1	; 161
    58be:	ff 4f       	sbci	r31, 0xFF	; 255
    58c0:	60 81       	ld	r22, Z
    58c2:	71 81       	ldd	r23, Z+1	; 0x01
    58c4:	82 81       	ldd	r24, Z+2	; 0x02
    58c6:	93 81       	ldd	r25, Z+3	; 0x03
    58c8:	20 e0       	ldi	r18, 0x00	; 0
    58ca:	30 e0       	ldi	r19, 0x00	; 0
    58cc:	40 e2       	ldi	r20, 0x20	; 32
    58ce:	51 e4       	ldi	r21, 0x41	; 65
    58d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58d4:	dc 01       	movw	r26, r24
    58d6:	cb 01       	movw	r24, r22
    58d8:	8e 01       	movw	r16, r28
    58da:	07 5a       	subi	r16, 0xA7	; 167
    58dc:	1f 4f       	sbci	r17, 0xFF	; 255
    58de:	bc 01       	movw	r22, r24
    58e0:	cd 01       	movw	r24, r26
    58e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58e6:	dc 01       	movw	r26, r24
    58e8:	cb 01       	movw	r24, r22
    58ea:	f8 01       	movw	r30, r16
    58ec:	91 83       	std	Z+1, r25	; 0x01
    58ee:	80 83       	st	Z, r24
    58f0:	1f c0       	rjmp	.+62     	; 0x5930 <main+0x14c2>
    58f2:	fe 01       	movw	r30, r28
    58f4:	e9 5a       	subi	r30, 0xA9	; 169
    58f6:	ff 4f       	sbci	r31, 0xFF	; 255
    58f8:	88 ec       	ldi	r24, 0xC8	; 200
    58fa:	90 e0       	ldi	r25, 0x00	; 0
    58fc:	91 83       	std	Z+1, r25	; 0x01
    58fe:	80 83       	st	Z, r24
    5900:	fe 01       	movw	r30, r28
    5902:	e9 5a       	subi	r30, 0xA9	; 169
    5904:	ff 4f       	sbci	r31, 0xFF	; 255
    5906:	80 81       	ld	r24, Z
    5908:	91 81       	ldd	r25, Z+1	; 0x01
    590a:	01 97       	sbiw	r24, 0x01	; 1
    590c:	f1 f7       	brne	.-4      	; 0x590a <main+0x149c>
    590e:	fe 01       	movw	r30, r28
    5910:	e9 5a       	subi	r30, 0xA9	; 169
    5912:	ff 4f       	sbci	r31, 0xFF	; 255
    5914:	91 83       	std	Z+1, r25	; 0x01
    5916:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5918:	de 01       	movw	r26, r28
    591a:	a7 5a       	subi	r26, 0xA7	; 167
    591c:	bf 4f       	sbci	r27, 0xFF	; 255
    591e:	fe 01       	movw	r30, r28
    5920:	e7 5a       	subi	r30, 0xA7	; 167
    5922:	ff 4f       	sbci	r31, 0xFF	; 255
    5924:	80 81       	ld	r24, Z
    5926:	91 81       	ldd	r25, Z+1	; 0x01
    5928:	01 97       	sbiw	r24, 0x01	; 1
    592a:	11 96       	adiw	r26, 0x01	; 1
    592c:	9c 93       	st	X, r25
    592e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5930:	fe 01       	movw	r30, r28
    5932:	e7 5a       	subi	r30, 0xA7	; 167
    5934:	ff 4f       	sbci	r31, 0xFF	; 255
    5936:	80 81       	ld	r24, Z
    5938:	91 81       	ldd	r25, Z+1	; 0x01
    593a:	00 97       	sbiw	r24, 0x00	; 0
    593c:	d1 f6       	brne	.-76     	; 0x58f2 <main+0x1484>
    593e:	27 c0       	rjmp	.+78     	; 0x598e <main+0x1520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5940:	8e 01       	movw	r16, r28
    5942:	07 5a       	subi	r16, 0xA7	; 167
    5944:	1f 4f       	sbci	r17, 0xFF	; 255
    5946:	fe 01       	movw	r30, r28
    5948:	e5 5a       	subi	r30, 0xA5	; 165
    594a:	ff 4f       	sbci	r31, 0xFF	; 255
    594c:	60 81       	ld	r22, Z
    594e:	71 81       	ldd	r23, Z+1	; 0x01
    5950:	82 81       	ldd	r24, Z+2	; 0x02
    5952:	93 81       	ldd	r25, Z+3	; 0x03
    5954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5958:	dc 01       	movw	r26, r24
    595a:	cb 01       	movw	r24, r22
    595c:	f8 01       	movw	r30, r16
    595e:	91 83       	std	Z+1, r25	; 0x01
    5960:	80 83       	st	Z, r24
    5962:	de 01       	movw	r26, r28
    5964:	ab 5a       	subi	r26, 0xAB	; 171
    5966:	bf 4f       	sbci	r27, 0xFF	; 255
    5968:	fe 01       	movw	r30, r28
    596a:	e7 5a       	subi	r30, 0xA7	; 167
    596c:	ff 4f       	sbci	r31, 0xFF	; 255
    596e:	80 81       	ld	r24, Z
    5970:	91 81       	ldd	r25, Z+1	; 0x01
    5972:	8d 93       	st	X+, r24
    5974:	9c 93       	st	X, r25
    5976:	fe 01       	movw	r30, r28
    5978:	eb 5a       	subi	r30, 0xAB	; 171
    597a:	ff 4f       	sbci	r31, 0xFF	; 255
    597c:	80 81       	ld	r24, Z
    597e:	91 81       	ldd	r25, Z+1	; 0x01
    5980:	01 97       	sbiw	r24, 0x01	; 1
    5982:	f1 f7       	brne	.-4      	; 0x5980 <main+0x1512>
    5984:	fe 01       	movw	r30, r28
    5986:	eb 5a       	subi	r30, 0xAB	; 171
    5988:	ff 4f       	sbci	r31, 0xFF	; 255
    598a:	91 83       	std	Z+1, r25	; 0x01
    598c:	80 83       	st	Z, r24

						_delay_ms(10000);

						/* Turn off buzzer */
						DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN3,DIO_u8PIN_LOW);
    598e:	83 e0       	ldi	r24, 0x03	; 3
    5990:	63 e0       	ldi	r22, 0x03	; 3
    5992:	40 e0       	ldi	r20, 0x00	; 0
    5994:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
						Local_u8Tries = 3;
    5998:	fe 01       	movw	r30, r28
    599a:	e2 50       	subi	r30, 0x02	; 2
    599c:	ff 4f       	sbci	r31, 0xFF	; 255
    599e:	83 e0       	ldi	r24, 0x03	; 3
    59a0:	80 83       	st	Z, r24
						Local_u8Flag=0;
    59a2:	fe 01       	movw	r30, r28
    59a4:	e0 50       	subi	r30, 0x00	; 0
    59a6:	ff 4f       	sbci	r31, 0xFF	; 255
    59a8:	10 82       	st	Z, r1
    59aa:	0e c4       	rjmp	.+2076   	; 0x61c8 <main+0x1d5a>
						/* exit the for loop and start from super loop */
						continue;
					}
				}
			}
			else if(Local_u8ReadPassword == '2')
    59ac:	fe 01       	movw	r30, r28
    59ae:	e1 50       	subi	r30, 0x01	; 1
    59b0:	ff 4f       	sbci	r31, 0xFF	; 255
    59b2:	80 81       	ld	r24, Z
    59b4:	82 33       	cpi	r24, 0x32	; 50
    59b6:	09 f0       	breq	.+2      	; 0x59ba <main+0x154c>
    59b8:	8f c3       	rjmp	.+1822   	; 0x60d8 <main+0x1c6a>
			{
				CLCD_voidClearScreen();
    59ba:	0e 94 08 11 	call	0x2210	; 0x2210 <CLCD_voidClearScreen>
				CLCD_voidSendString("Old Password:");
    59be:	88 ef       	ldi	r24, 0xF8	; 248
    59c0:	90 e0       	ldi	r25, 0x00	; 0
    59c2:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>
				for( i =0 ; i<=3 ; i++)
    59c6:	fe 01       	movw	r30, r28
    59c8:	e3 50       	subi	r30, 0x03	; 3
    59ca:	ff 4f       	sbci	r31, 0xFF	; 255
    59cc:	10 82       	st	Z, r1
    59ce:	8e c1       	rjmp	.+796    	; 0x5cec <main+0x187e>
				{
					do
					{
						CLCD_voidGoToXY(1,i);
    59d0:	fe 01       	movw	r30, r28
    59d2:	e3 50       	subi	r30, 0x03	; 3
    59d4:	ff 4f       	sbci	r31, 0xFF	; 255
    59d6:	81 e0       	ldi	r24, 0x01	; 1
    59d8:	60 81       	ld	r22, Z
    59da:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
						/* Turn on LCD cursor */
						CLCD_voidSendCommand(LCD_CURSOR_ON);
    59de:	8e e0       	ldi	r24, 0x0E	; 14
    59e0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
    59e4:	fe 01       	movw	r30, r28
    59e6:	ef 5a       	subi	r30, 0xAF	; 175
    59e8:	ff 4f       	sbci	r31, 0xFF	; 255
    59ea:	80 e0       	ldi	r24, 0x00	; 0
    59ec:	90 e0       	ldi	r25, 0x00	; 0
    59ee:	a8 ec       	ldi	r26, 0xC8	; 200
    59f0:	b2 e4       	ldi	r27, 0x42	; 66
    59f2:	80 83       	st	Z, r24
    59f4:	91 83       	std	Z+1, r25	; 0x01
    59f6:	a2 83       	std	Z+2, r26	; 0x02
    59f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59fa:	8e 01       	movw	r16, r28
    59fc:	03 5b       	subi	r16, 0xB3	; 179
    59fe:	1f 4f       	sbci	r17, 0xFF	; 255
    5a00:	fe 01       	movw	r30, r28
    5a02:	ef 5a       	subi	r30, 0xAF	; 175
    5a04:	ff 4f       	sbci	r31, 0xFF	; 255
    5a06:	60 81       	ld	r22, Z
    5a08:	71 81       	ldd	r23, Z+1	; 0x01
    5a0a:	82 81       	ldd	r24, Z+2	; 0x02
    5a0c:	93 81       	ldd	r25, Z+3	; 0x03
    5a0e:	20 e0       	ldi	r18, 0x00	; 0
    5a10:	30 e0       	ldi	r19, 0x00	; 0
    5a12:	4a ef       	ldi	r20, 0xFA	; 250
    5a14:	54 e4       	ldi	r21, 0x44	; 68
    5a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a1a:	dc 01       	movw	r26, r24
    5a1c:	cb 01       	movw	r24, r22
    5a1e:	f8 01       	movw	r30, r16
    5a20:	80 83       	st	Z, r24
    5a22:	91 83       	std	Z+1, r25	; 0x01
    5a24:	a2 83       	std	Z+2, r26	; 0x02
    5a26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5a28:	fe 01       	movw	r30, r28
    5a2a:	e3 5b       	subi	r30, 0xB3	; 179
    5a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a2e:	60 81       	ld	r22, Z
    5a30:	71 81       	ldd	r23, Z+1	; 0x01
    5a32:	82 81       	ldd	r24, Z+2	; 0x02
    5a34:	93 81       	ldd	r25, Z+3	; 0x03
    5a36:	20 e0       	ldi	r18, 0x00	; 0
    5a38:	30 e0       	ldi	r19, 0x00	; 0
    5a3a:	40 e8       	ldi	r20, 0x80	; 128
    5a3c:	5f e3       	ldi	r21, 0x3F	; 63
    5a3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a42:	88 23       	and	r24, r24
    5a44:	44 f4       	brge	.+16     	; 0x5a56 <main+0x15e8>
		__ticks = 1;
    5a46:	fe 01       	movw	r30, r28
    5a48:	e5 5b       	subi	r30, 0xB5	; 181
    5a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a4c:	81 e0       	ldi	r24, 0x01	; 1
    5a4e:	90 e0       	ldi	r25, 0x00	; 0
    5a50:	91 83       	std	Z+1, r25	; 0x01
    5a52:	80 83       	st	Z, r24
    5a54:	64 c0       	rjmp	.+200    	; 0x5b1e <main+0x16b0>
	else if (__tmp > 65535)
    5a56:	fe 01       	movw	r30, r28
    5a58:	e3 5b       	subi	r30, 0xB3	; 179
    5a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a5c:	60 81       	ld	r22, Z
    5a5e:	71 81       	ldd	r23, Z+1	; 0x01
    5a60:	82 81       	ldd	r24, Z+2	; 0x02
    5a62:	93 81       	ldd	r25, Z+3	; 0x03
    5a64:	20 e0       	ldi	r18, 0x00	; 0
    5a66:	3f ef       	ldi	r19, 0xFF	; 255
    5a68:	4f e7       	ldi	r20, 0x7F	; 127
    5a6a:	57 e4       	ldi	r21, 0x47	; 71
    5a6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a70:	18 16       	cp	r1, r24
    5a72:	0c f0       	brlt	.+2      	; 0x5a76 <main+0x1608>
    5a74:	43 c0       	rjmp	.+134    	; 0x5afc <main+0x168e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a76:	fe 01       	movw	r30, r28
    5a78:	ef 5a       	subi	r30, 0xAF	; 175
    5a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a7c:	60 81       	ld	r22, Z
    5a7e:	71 81       	ldd	r23, Z+1	; 0x01
    5a80:	82 81       	ldd	r24, Z+2	; 0x02
    5a82:	93 81       	ldd	r25, Z+3	; 0x03
    5a84:	20 e0       	ldi	r18, 0x00	; 0
    5a86:	30 e0       	ldi	r19, 0x00	; 0
    5a88:	40 e2       	ldi	r20, 0x20	; 32
    5a8a:	51 e4       	ldi	r21, 0x41	; 65
    5a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a90:	dc 01       	movw	r26, r24
    5a92:	cb 01       	movw	r24, r22
    5a94:	8e 01       	movw	r16, r28
    5a96:	05 5b       	subi	r16, 0xB5	; 181
    5a98:	1f 4f       	sbci	r17, 0xFF	; 255
    5a9a:	bc 01       	movw	r22, r24
    5a9c:	cd 01       	movw	r24, r26
    5a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5aa2:	dc 01       	movw	r26, r24
    5aa4:	cb 01       	movw	r24, r22
    5aa6:	f8 01       	movw	r30, r16
    5aa8:	91 83       	std	Z+1, r25	; 0x01
    5aaa:	80 83       	st	Z, r24
    5aac:	1f c0       	rjmp	.+62     	; 0x5aec <main+0x167e>
    5aae:	fe 01       	movw	r30, r28
    5ab0:	e7 5b       	subi	r30, 0xB7	; 183
    5ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ab4:	88 ec       	ldi	r24, 0xC8	; 200
    5ab6:	90 e0       	ldi	r25, 0x00	; 0
    5ab8:	91 83       	std	Z+1, r25	; 0x01
    5aba:	80 83       	st	Z, r24
    5abc:	fe 01       	movw	r30, r28
    5abe:	e7 5b       	subi	r30, 0xB7	; 183
    5ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac2:	80 81       	ld	r24, Z
    5ac4:	91 81       	ldd	r25, Z+1	; 0x01
    5ac6:	01 97       	sbiw	r24, 0x01	; 1
    5ac8:	f1 f7       	brne	.-4      	; 0x5ac6 <main+0x1658>
    5aca:	fe 01       	movw	r30, r28
    5acc:	e7 5b       	subi	r30, 0xB7	; 183
    5ace:	ff 4f       	sbci	r31, 0xFF	; 255
    5ad0:	91 83       	std	Z+1, r25	; 0x01
    5ad2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ad4:	de 01       	movw	r26, r28
    5ad6:	a5 5b       	subi	r26, 0xB5	; 181
    5ad8:	bf 4f       	sbci	r27, 0xFF	; 255
    5ada:	fe 01       	movw	r30, r28
    5adc:	e5 5b       	subi	r30, 0xB5	; 181
    5ade:	ff 4f       	sbci	r31, 0xFF	; 255
    5ae0:	80 81       	ld	r24, Z
    5ae2:	91 81       	ldd	r25, Z+1	; 0x01
    5ae4:	01 97       	sbiw	r24, 0x01	; 1
    5ae6:	11 96       	adiw	r26, 0x01	; 1
    5ae8:	9c 93       	st	X, r25
    5aea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5aec:	fe 01       	movw	r30, r28
    5aee:	e5 5b       	subi	r30, 0xB5	; 181
    5af0:	ff 4f       	sbci	r31, 0xFF	; 255
    5af2:	80 81       	ld	r24, Z
    5af4:	91 81       	ldd	r25, Z+1	; 0x01
    5af6:	00 97       	sbiw	r24, 0x00	; 0
    5af8:	d1 f6       	brne	.-76     	; 0x5aae <main+0x1640>
    5afa:	27 c0       	rjmp	.+78     	; 0x5b4a <main+0x16dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5afc:	8e 01       	movw	r16, r28
    5afe:	05 5b       	subi	r16, 0xB5	; 181
    5b00:	1f 4f       	sbci	r17, 0xFF	; 255
    5b02:	fe 01       	movw	r30, r28
    5b04:	e3 5b       	subi	r30, 0xB3	; 179
    5b06:	ff 4f       	sbci	r31, 0xFF	; 255
    5b08:	60 81       	ld	r22, Z
    5b0a:	71 81       	ldd	r23, Z+1	; 0x01
    5b0c:	82 81       	ldd	r24, Z+2	; 0x02
    5b0e:	93 81       	ldd	r25, Z+3	; 0x03
    5b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b14:	dc 01       	movw	r26, r24
    5b16:	cb 01       	movw	r24, r22
    5b18:	f8 01       	movw	r30, r16
    5b1a:	91 83       	std	Z+1, r25	; 0x01
    5b1c:	80 83       	st	Z, r24
    5b1e:	de 01       	movw	r26, r28
    5b20:	a9 5b       	subi	r26, 0xB9	; 185
    5b22:	bf 4f       	sbci	r27, 0xFF	; 255
    5b24:	fe 01       	movw	r30, r28
    5b26:	e5 5b       	subi	r30, 0xB5	; 181
    5b28:	ff 4f       	sbci	r31, 0xFF	; 255
    5b2a:	80 81       	ld	r24, Z
    5b2c:	91 81       	ldd	r25, Z+1	; 0x01
    5b2e:	8d 93       	st	X+, r24
    5b30:	9c 93       	st	X, r25
    5b32:	fe 01       	movw	r30, r28
    5b34:	e9 5b       	subi	r30, 0xB9	; 185
    5b36:	ff 4f       	sbci	r31, 0xFF	; 255
    5b38:	80 81       	ld	r24, Z
    5b3a:	91 81       	ldd	r25, Z+1	; 0x01
    5b3c:	01 97       	sbiw	r24, 0x01	; 1
    5b3e:	f1 f7       	brne	.-4      	; 0x5b3c <main+0x16ce>
    5b40:	fe 01       	movw	r30, r28
    5b42:	e9 5b       	subi	r30, 0xB9	; 185
    5b44:	ff 4f       	sbci	r31, 0xFF	; 255
    5b46:	91 83       	std	Z+1, r25	; 0x01
    5b48:	80 83       	st	Z, r24

						/* wait 100 ms */
						_delay_ms(100);

						/* Turn off LCD cursor */
						CLCD_voidSendCommand(LCD_CURSOR_OFF);
    5b4a:	8c e0       	ldi	r24, 0x0C	; 12
    5b4c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

						Local_au8Password[i] = KPD_u8GetPressedKey();
    5b50:	fe 01       	movw	r30, r28
    5b52:	e3 50       	subi	r30, 0x03	; 3
    5b54:	ff 4f       	sbci	r31, 0xFF	; 255
    5b56:	80 81       	ld	r24, Z
    5b58:	08 2f       	mov	r16, r24
    5b5a:	10 e0       	ldi	r17, 0x00	; 0
    5b5c:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KPD_u8GetPressedKey>
    5b60:	28 2f       	mov	r18, r24
    5b62:	ce 01       	movw	r24, r28
    5b64:	8f 5f       	subi	r24, 0xFF	; 255
    5b66:	9e 4f       	sbci	r25, 0xFE	; 254
    5b68:	fc 01       	movw	r30, r24
    5b6a:	e0 0f       	add	r30, r16
    5b6c:	f1 1f       	adc	r31, r17
    5b6e:	20 83       	st	Z, r18
					} while (Local_au8Password[i]==KPD_NO_PRESSED_KEY);
    5b70:	fe 01       	movw	r30, r28
    5b72:	e3 50       	subi	r30, 0x03	; 3
    5b74:	ff 4f       	sbci	r31, 0xFF	; 255
    5b76:	80 81       	ld	r24, Z
    5b78:	28 2f       	mov	r18, r24
    5b7a:	30 e0       	ldi	r19, 0x00	; 0
    5b7c:	ce 01       	movw	r24, r28
    5b7e:	8f 5f       	subi	r24, 0xFF	; 255
    5b80:	9e 4f       	sbci	r25, 0xFE	; 254
    5b82:	fc 01       	movw	r30, r24
    5b84:	e2 0f       	add	r30, r18
    5b86:	f3 1f       	adc	r31, r19
    5b88:	80 81       	ld	r24, Z
    5b8a:	8f 3f       	cpi	r24, 0xFF	; 255
    5b8c:	09 f4       	brne	.+2      	; 0x5b90 <main+0x1722>
    5b8e:	20 cf       	rjmp	.-448    	; 0x59d0 <main+0x1562>

					CLCD_voidGoToXY(1,i);
    5b90:	fe 01       	movw	r30, r28
    5b92:	e3 50       	subi	r30, 0x03	; 3
    5b94:	ff 4f       	sbci	r31, 0xFF	; 255
    5b96:	81 e0       	ldi	r24, 0x01	; 1
    5b98:	60 81       	ld	r22, Z
    5b9a:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
					CLCD_voidSendData(Local_au8Password[i]);
    5b9e:	fe 01       	movw	r30, r28
    5ba0:	e3 50       	subi	r30, 0x03	; 3
    5ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ba4:	80 81       	ld	r24, Z
    5ba6:	28 2f       	mov	r18, r24
    5ba8:	30 e0       	ldi	r19, 0x00	; 0
    5baa:	ce 01       	movw	r24, r28
    5bac:	8f 5f       	subi	r24, 0xFF	; 255
    5bae:	9e 4f       	sbci	r25, 0xFE	; 254
    5bb0:	fc 01       	movw	r30, r24
    5bb2:	e2 0f       	add	r30, r18
    5bb4:	f3 1f       	adc	r31, r19
    5bb6:	80 81       	ld	r24, Z
    5bb8:	0e 94 a6 0a 	call	0x154c	; 0x154c <CLCD_voidSendData>
    5bbc:	fe 01       	movw	r30, r28
    5bbe:	ed 5b       	subi	r30, 0xBD	; 189
    5bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    5bc2:	80 e0       	ldi	r24, 0x00	; 0
    5bc4:	90 e0       	ldi	r25, 0x00	; 0
    5bc6:	aa ef       	ldi	r26, 0xFA	; 250
    5bc8:	b3 e4       	ldi	r27, 0x43	; 67
    5bca:	80 83       	st	Z, r24
    5bcc:	91 83       	std	Z+1, r25	; 0x01
    5bce:	a2 83       	std	Z+2, r26	; 0x02
    5bd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bd2:	8e 01       	movw	r16, r28
    5bd4:	01 5c       	subi	r16, 0xC1	; 193
    5bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    5bd8:	fe 01       	movw	r30, r28
    5bda:	ed 5b       	subi	r30, 0xBD	; 189
    5bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    5bde:	60 81       	ld	r22, Z
    5be0:	71 81       	ldd	r23, Z+1	; 0x01
    5be2:	82 81       	ldd	r24, Z+2	; 0x02
    5be4:	93 81       	ldd	r25, Z+3	; 0x03
    5be6:	20 e0       	ldi	r18, 0x00	; 0
    5be8:	30 e0       	ldi	r19, 0x00	; 0
    5bea:	4a ef       	ldi	r20, 0xFA	; 250
    5bec:	54 e4       	ldi	r21, 0x44	; 68
    5bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bf2:	dc 01       	movw	r26, r24
    5bf4:	cb 01       	movw	r24, r22
    5bf6:	f8 01       	movw	r30, r16
    5bf8:	80 83       	st	Z, r24
    5bfa:	91 83       	std	Z+1, r25	; 0x01
    5bfc:	a2 83       	std	Z+2, r26	; 0x02
    5bfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5c00:	fe 01       	movw	r30, r28
    5c02:	ff 96       	adiw	r30, 0x3f	; 63
    5c04:	60 81       	ld	r22, Z
    5c06:	71 81       	ldd	r23, Z+1	; 0x01
    5c08:	82 81       	ldd	r24, Z+2	; 0x02
    5c0a:	93 81       	ldd	r25, Z+3	; 0x03
    5c0c:	20 e0       	ldi	r18, 0x00	; 0
    5c0e:	30 e0       	ldi	r19, 0x00	; 0
    5c10:	40 e8       	ldi	r20, 0x80	; 128
    5c12:	5f e3       	ldi	r21, 0x3F	; 63
    5c14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c18:	88 23       	and	r24, r24
    5c1a:	2c f4       	brge	.+10     	; 0x5c26 <main+0x17b8>
		__ticks = 1;
    5c1c:	81 e0       	ldi	r24, 0x01	; 1
    5c1e:	90 e0       	ldi	r25, 0x00	; 0
    5c20:	9e af       	std	Y+62, r25	; 0x3e
    5c22:	8d af       	std	Y+61, r24	; 0x3d
    5c24:	46 c0       	rjmp	.+140    	; 0x5cb2 <main+0x1844>
	else if (__tmp > 65535)
    5c26:	fe 01       	movw	r30, r28
    5c28:	ff 96       	adiw	r30, 0x3f	; 63
    5c2a:	60 81       	ld	r22, Z
    5c2c:	71 81       	ldd	r23, Z+1	; 0x01
    5c2e:	82 81       	ldd	r24, Z+2	; 0x02
    5c30:	93 81       	ldd	r25, Z+3	; 0x03
    5c32:	20 e0       	ldi	r18, 0x00	; 0
    5c34:	3f ef       	ldi	r19, 0xFF	; 255
    5c36:	4f e7       	ldi	r20, 0x7F	; 127
    5c38:	57 e4       	ldi	r21, 0x47	; 71
    5c3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c3e:	18 16       	cp	r1, r24
    5c40:	64 f5       	brge	.+88     	; 0x5c9a <main+0x182c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c42:	fe 01       	movw	r30, r28
    5c44:	ed 5b       	subi	r30, 0xBD	; 189
    5c46:	ff 4f       	sbci	r31, 0xFF	; 255
    5c48:	60 81       	ld	r22, Z
    5c4a:	71 81       	ldd	r23, Z+1	; 0x01
    5c4c:	82 81       	ldd	r24, Z+2	; 0x02
    5c4e:	93 81       	ldd	r25, Z+3	; 0x03
    5c50:	20 e0       	ldi	r18, 0x00	; 0
    5c52:	30 e0       	ldi	r19, 0x00	; 0
    5c54:	40 e2       	ldi	r20, 0x20	; 32
    5c56:	51 e4       	ldi	r21, 0x41	; 65
    5c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c5c:	dc 01       	movw	r26, r24
    5c5e:	cb 01       	movw	r24, r22
    5c60:	bc 01       	movw	r22, r24
    5c62:	cd 01       	movw	r24, r26
    5c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c68:	dc 01       	movw	r26, r24
    5c6a:	cb 01       	movw	r24, r22
    5c6c:	9e af       	std	Y+62, r25	; 0x3e
    5c6e:	8d af       	std	Y+61, r24	; 0x3d
    5c70:	0f c0       	rjmp	.+30     	; 0x5c90 <main+0x1822>
    5c72:	88 ec       	ldi	r24, 0xC8	; 200
    5c74:	90 e0       	ldi	r25, 0x00	; 0
    5c76:	9c af       	std	Y+60, r25	; 0x3c
    5c78:	8b af       	std	Y+59, r24	; 0x3b
    5c7a:	8b ad       	ldd	r24, Y+59	; 0x3b
    5c7c:	9c ad       	ldd	r25, Y+60	; 0x3c
    5c7e:	01 97       	sbiw	r24, 0x01	; 1
    5c80:	f1 f7       	brne	.-4      	; 0x5c7e <main+0x1810>
    5c82:	9c af       	std	Y+60, r25	; 0x3c
    5c84:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c86:	8d ad       	ldd	r24, Y+61	; 0x3d
    5c88:	9e ad       	ldd	r25, Y+62	; 0x3e
    5c8a:	01 97       	sbiw	r24, 0x01	; 1
    5c8c:	9e af       	std	Y+62, r25	; 0x3e
    5c8e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c90:	8d ad       	ldd	r24, Y+61	; 0x3d
    5c92:	9e ad       	ldd	r25, Y+62	; 0x3e
    5c94:	00 97       	sbiw	r24, 0x00	; 0
    5c96:	69 f7       	brne	.-38     	; 0x5c72 <main+0x1804>
    5c98:	16 c0       	rjmp	.+44     	; 0x5cc6 <main+0x1858>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c9a:	fe 01       	movw	r30, r28
    5c9c:	ff 96       	adiw	r30, 0x3f	; 63
    5c9e:	60 81       	ld	r22, Z
    5ca0:	71 81       	ldd	r23, Z+1	; 0x01
    5ca2:	82 81       	ldd	r24, Z+2	; 0x02
    5ca4:	93 81       	ldd	r25, Z+3	; 0x03
    5ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5caa:	dc 01       	movw	r26, r24
    5cac:	cb 01       	movw	r24, r22
    5cae:	9e af       	std	Y+62, r25	; 0x3e
    5cb0:	8d af       	std	Y+61, r24	; 0x3d
    5cb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    5cb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    5cb6:	9a af       	std	Y+58, r25	; 0x3a
    5cb8:	89 af       	std	Y+57, r24	; 0x39
    5cba:	89 ad       	ldd	r24, Y+57	; 0x39
    5cbc:	9a ad       	ldd	r25, Y+58	; 0x3a
    5cbe:	01 97       	sbiw	r24, 0x01	; 1
    5cc0:	f1 f7       	brne	.-4      	; 0x5cbe <main+0x1850>
    5cc2:	9a af       	std	Y+58, r25	; 0x3a
    5cc4:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(500);
					CLCD_voidGoToXY(1,i);
    5cc6:	fe 01       	movw	r30, r28
    5cc8:	e3 50       	subi	r30, 0x03	; 3
    5cca:	ff 4f       	sbci	r31, 0xFF	; 255
    5ccc:	81 e0       	ldi	r24, 0x01	; 1
    5cce:	60 81       	ld	r22, Z
    5cd0:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
					CLCD_voidSendData('*');
    5cd4:	8a e2       	ldi	r24, 0x2A	; 42
    5cd6:	0e 94 a6 0a 	call	0x154c	; 0x154c <CLCD_voidSendData>
			}
			else if(Local_u8ReadPassword == '2')
			{
				CLCD_voidClearScreen();
				CLCD_voidSendString("Old Password:");
				for( i =0 ; i<=3 ; i++)
    5cda:	de 01       	movw	r26, r28
    5cdc:	a3 50       	subi	r26, 0x03	; 3
    5cde:	bf 4f       	sbci	r27, 0xFF	; 255
    5ce0:	fe 01       	movw	r30, r28
    5ce2:	e3 50       	subi	r30, 0x03	; 3
    5ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ce6:	80 81       	ld	r24, Z
    5ce8:	8f 5f       	subi	r24, 0xFF	; 255
    5cea:	8c 93       	st	X, r24
    5cec:	fe 01       	movw	r30, r28
    5cee:	e3 50       	subi	r30, 0x03	; 3
    5cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf2:	80 81       	ld	r24, Z
    5cf4:	84 30       	cpi	r24, 0x04	; 4
    5cf6:	08 f4       	brcc	.+2      	; 0x5cfa <main+0x188c>
    5cf8:	6b ce       	rjmp	.-810    	; 0x59d0 <main+0x1562>
					CLCD_voidGoToXY(1,i);
					CLCD_voidSendData('*');
				}


				if((EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION1)==Local_au8Password[0]) &&  (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION2)==Local_au8Password[1]) && (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION3)==Local_au8Password[2]) && (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION4)==Local_au8Password[3]) )
    5cfa:	81 e2       	ldi	r24, 0x21	; 33
    5cfc:	90 e0       	ldi	r25, 0x00	; 0
    5cfe:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <EEPROM_u8ReadeData>
    5d02:	fe 01       	movw	r30, r28
    5d04:	ef 5f       	subi	r30, 0xFF	; 255
    5d06:	fe 4f       	sbci	r31, 0xFE	; 254
    5d08:	90 81       	ld	r25, Z
    5d0a:	89 17       	cp	r24, r25
    5d0c:	09 f0       	breq	.+2      	; 0x5d10 <main+0x18a2>
    5d0e:	65 c1       	rjmp	.+714    	; 0x5fda <main+0x1b6c>
    5d10:	82 e2       	ldi	r24, 0x22	; 34
    5d12:	90 e0       	ldi	r25, 0x00	; 0
    5d14:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <EEPROM_u8ReadeData>
    5d18:	fe 01       	movw	r30, r28
    5d1a:	ef 5f       	subi	r30, 0xFF	; 255
    5d1c:	fe 4f       	sbci	r31, 0xFE	; 254
    5d1e:	91 81       	ldd	r25, Z+1	; 0x01
    5d20:	89 17       	cp	r24, r25
    5d22:	09 f0       	breq	.+2      	; 0x5d26 <main+0x18b8>
    5d24:	5a c1       	rjmp	.+692    	; 0x5fda <main+0x1b6c>
    5d26:	83 e2       	ldi	r24, 0x23	; 35
    5d28:	90 e0       	ldi	r25, 0x00	; 0
    5d2a:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <EEPROM_u8ReadeData>
    5d2e:	fe 01       	movw	r30, r28
    5d30:	ef 5f       	subi	r30, 0xFF	; 255
    5d32:	fe 4f       	sbci	r31, 0xFE	; 254
    5d34:	92 81       	ldd	r25, Z+2	; 0x02
    5d36:	89 17       	cp	r24, r25
    5d38:	09 f0       	breq	.+2      	; 0x5d3c <main+0x18ce>
    5d3a:	4f c1       	rjmp	.+670    	; 0x5fda <main+0x1b6c>
    5d3c:	84 e2       	ldi	r24, 0x24	; 36
    5d3e:	90 e0       	ldi	r25, 0x00	; 0
    5d40:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <EEPROM_u8ReadeData>
    5d44:	fe 01       	movw	r30, r28
    5d46:	ef 5f       	subi	r30, 0xFF	; 255
    5d48:	fe 4f       	sbci	r31, 0xFE	; 254
    5d4a:	93 81       	ldd	r25, Z+3	; 0x03
    5d4c:	89 17       	cp	r24, r25
    5d4e:	09 f0       	breq	.+2      	; 0x5d52 <main+0x18e4>
    5d50:	44 c1       	rjmp	.+648    	; 0x5fda <main+0x1b6c>
				{
					CLCD_voidClearScreen();
    5d52:	0e 94 08 11 	call	0x2210	; 0x2210 <CLCD_voidClearScreen>
					/* Print string in LCD */
					CLCD_voidSendString("New Pass : ");
    5d56:	86 e0       	ldi	r24, 0x06	; 6
    5d58:	91 e0       	ldi	r25, 0x01	; 1
    5d5a:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>

					/* Control the position (1,0) and print string in LCD  */
					CLCD_voidGoToXY(1,0);
    5d5e:	81 e0       	ldi	r24, 0x01	; 1
    5d60:	60 e0       	ldi	r22, 0x00	; 0
    5d62:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
					CLCD_voidSendString("Just Numbers");
    5d66:	82 e1       	ldi	r24, 0x12	; 18
    5d68:	91 e0       	ldi	r25, 0x01	; 1
    5d6a:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>

					for( i =0; i<=3 ; i++)
    5d6e:	fe 01       	movw	r30, r28
    5d70:	e3 50       	subi	r30, 0x03	; 3
    5d72:	ff 4f       	sbci	r31, 0xFF	; 255
    5d74:	10 82       	st	Z, r1
    5d76:	29 c1       	rjmp	.+594    	; 0x5fca <main+0x1b5c>
					{

						do
						{
							Local_u8ReadPassword = KPD_u8GetPressedKey();
    5d78:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KPD_u8GetPressedKey>
    5d7c:	fe 01       	movw	r30, r28
    5d7e:	e1 50       	subi	r30, 0x01	; 1
    5d80:	ff 4f       	sbci	r31, 0xFF	; 255
    5d82:	80 83       	st	Z, r24

						} while (Local_u8ReadPassword == KPD_NO_PRESSED_KEY);
    5d84:	fe 01       	movw	r30, r28
    5d86:	e1 50       	subi	r30, 0x01	; 1
    5d88:	ff 4f       	sbci	r31, 0xFF	; 255
    5d8a:	80 81       	ld	r24, Z
    5d8c:	8f 3f       	cpi	r24, 0xFF	; 255
    5d8e:	a1 f3       	breq	.-24     	; 0x5d78 <main+0x190a>

						CLCD_voidGoToXY(0,10+i);
    5d90:	fe 01       	movw	r30, r28
    5d92:	e3 50       	subi	r30, 0x03	; 3
    5d94:	ff 4f       	sbci	r31, 0xFF	; 255
    5d96:	80 81       	ld	r24, Z
    5d98:	98 2f       	mov	r25, r24
    5d9a:	96 5f       	subi	r25, 0xF6	; 246
    5d9c:	80 e0       	ldi	r24, 0x00	; 0
    5d9e:	69 2f       	mov	r22, r25
    5da0:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
						/* Turn on LCD cursor */
						CLCD_voidSendCommand(LCD_CURSOR_ON);
    5da4:	8e e0       	ldi	r24, 0x0E	; 14
    5da6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
    5daa:	80 e0       	ldi	r24, 0x00	; 0
    5dac:	90 e0       	ldi	r25, 0x00	; 0
    5dae:	a8 ec       	ldi	r26, 0xC8	; 200
    5db0:	b2 e4       	ldi	r27, 0x42	; 66
    5db2:	8d ab       	std	Y+53, r24	; 0x35
    5db4:	9e ab       	std	Y+54, r25	; 0x36
    5db6:	af ab       	std	Y+55, r26	; 0x37
    5db8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5dba:	6d a9       	ldd	r22, Y+53	; 0x35
    5dbc:	7e a9       	ldd	r23, Y+54	; 0x36
    5dbe:	8f a9       	ldd	r24, Y+55	; 0x37
    5dc0:	98 ad       	ldd	r25, Y+56	; 0x38
    5dc2:	20 e0       	ldi	r18, 0x00	; 0
    5dc4:	30 e0       	ldi	r19, 0x00	; 0
    5dc6:	4a ef       	ldi	r20, 0xFA	; 250
    5dc8:	54 e4       	ldi	r21, 0x44	; 68
    5dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5dce:	dc 01       	movw	r26, r24
    5dd0:	cb 01       	movw	r24, r22
    5dd2:	89 ab       	std	Y+49, r24	; 0x31
    5dd4:	9a ab       	std	Y+50, r25	; 0x32
    5dd6:	ab ab       	std	Y+51, r26	; 0x33
    5dd8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5dda:	69 a9       	ldd	r22, Y+49	; 0x31
    5ddc:	7a a9       	ldd	r23, Y+50	; 0x32
    5dde:	8b a9       	ldd	r24, Y+51	; 0x33
    5de0:	9c a9       	ldd	r25, Y+52	; 0x34
    5de2:	20 e0       	ldi	r18, 0x00	; 0
    5de4:	30 e0       	ldi	r19, 0x00	; 0
    5de6:	40 e8       	ldi	r20, 0x80	; 128
    5de8:	5f e3       	ldi	r21, 0x3F	; 63
    5dea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5dee:	88 23       	and	r24, r24
    5df0:	2c f4       	brge	.+10     	; 0x5dfc <main+0x198e>
		__ticks = 1;
    5df2:	81 e0       	ldi	r24, 0x01	; 1
    5df4:	90 e0       	ldi	r25, 0x00	; 0
    5df6:	98 ab       	std	Y+48, r25	; 0x30
    5df8:	8f a7       	std	Y+47, r24	; 0x2f
    5dfa:	3f c0       	rjmp	.+126    	; 0x5e7a <main+0x1a0c>
	else if (__tmp > 65535)
    5dfc:	69 a9       	ldd	r22, Y+49	; 0x31
    5dfe:	7a a9       	ldd	r23, Y+50	; 0x32
    5e00:	8b a9       	ldd	r24, Y+51	; 0x33
    5e02:	9c a9       	ldd	r25, Y+52	; 0x34
    5e04:	20 e0       	ldi	r18, 0x00	; 0
    5e06:	3f ef       	ldi	r19, 0xFF	; 255
    5e08:	4f e7       	ldi	r20, 0x7F	; 127
    5e0a:	57 e4       	ldi	r21, 0x47	; 71
    5e0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5e10:	18 16       	cp	r1, r24
    5e12:	4c f5       	brge	.+82     	; 0x5e66 <main+0x19f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e14:	6d a9       	ldd	r22, Y+53	; 0x35
    5e16:	7e a9       	ldd	r23, Y+54	; 0x36
    5e18:	8f a9       	ldd	r24, Y+55	; 0x37
    5e1a:	98 ad       	ldd	r25, Y+56	; 0x38
    5e1c:	20 e0       	ldi	r18, 0x00	; 0
    5e1e:	30 e0       	ldi	r19, 0x00	; 0
    5e20:	40 e2       	ldi	r20, 0x20	; 32
    5e22:	51 e4       	ldi	r21, 0x41	; 65
    5e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e28:	dc 01       	movw	r26, r24
    5e2a:	cb 01       	movw	r24, r22
    5e2c:	bc 01       	movw	r22, r24
    5e2e:	cd 01       	movw	r24, r26
    5e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e34:	dc 01       	movw	r26, r24
    5e36:	cb 01       	movw	r24, r22
    5e38:	98 ab       	std	Y+48, r25	; 0x30
    5e3a:	8f a7       	std	Y+47, r24	; 0x2f
    5e3c:	0f c0       	rjmp	.+30     	; 0x5e5c <main+0x19ee>
    5e3e:	88 ec       	ldi	r24, 0xC8	; 200
    5e40:	90 e0       	ldi	r25, 0x00	; 0
    5e42:	9e a7       	std	Y+46, r25	; 0x2e
    5e44:	8d a7       	std	Y+45, r24	; 0x2d
    5e46:	8d a5       	ldd	r24, Y+45	; 0x2d
    5e48:	9e a5       	ldd	r25, Y+46	; 0x2e
    5e4a:	01 97       	sbiw	r24, 0x01	; 1
    5e4c:	f1 f7       	brne	.-4      	; 0x5e4a <main+0x19dc>
    5e4e:	9e a7       	std	Y+46, r25	; 0x2e
    5e50:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e52:	8f a5       	ldd	r24, Y+47	; 0x2f
    5e54:	98 a9       	ldd	r25, Y+48	; 0x30
    5e56:	01 97       	sbiw	r24, 0x01	; 1
    5e58:	98 ab       	std	Y+48, r25	; 0x30
    5e5a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5e5e:	98 a9       	ldd	r25, Y+48	; 0x30
    5e60:	00 97       	sbiw	r24, 0x00	; 0
    5e62:	69 f7       	brne	.-38     	; 0x5e3e <main+0x19d0>
    5e64:	14 c0       	rjmp	.+40     	; 0x5e8e <main+0x1a20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e66:	69 a9       	ldd	r22, Y+49	; 0x31
    5e68:	7a a9       	ldd	r23, Y+50	; 0x32
    5e6a:	8b a9       	ldd	r24, Y+51	; 0x33
    5e6c:	9c a9       	ldd	r25, Y+52	; 0x34
    5e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e72:	dc 01       	movw	r26, r24
    5e74:	cb 01       	movw	r24, r22
    5e76:	98 ab       	std	Y+48, r25	; 0x30
    5e78:	8f a7       	std	Y+47, r24	; 0x2f
    5e7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    5e7c:	98 a9       	ldd	r25, Y+48	; 0x30
    5e7e:	9c a7       	std	Y+44, r25	; 0x2c
    5e80:	8b a7       	std	Y+43, r24	; 0x2b
    5e82:	8b a5       	ldd	r24, Y+43	; 0x2b
    5e84:	9c a5       	ldd	r25, Y+44	; 0x2c
    5e86:	01 97       	sbiw	r24, 0x01	; 1
    5e88:	f1 f7       	brne	.-4      	; 0x5e86 <main+0x1a18>
    5e8a:	9c a7       	std	Y+44, r25	; 0x2c
    5e8c:	8b a7       	std	Y+43, r24	; 0x2b

						/* wait 100 ms */
						_delay_ms(100);

						/* Turn off LCD cursor */
						CLCD_voidSendCommand(LCD_CURSOR_OFF);
    5e8e:	8c e0       	ldi	r24, 0x0C	; 12
    5e90:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

						CLCD_voidSendData(Local_u8ReadPassword);
    5e94:	fe 01       	movw	r30, r28
    5e96:	e1 50       	subi	r30, 0x01	; 1
    5e98:	ff 4f       	sbci	r31, 0xFF	; 255
    5e9a:	80 81       	ld	r24, Z
    5e9c:	0e 94 a6 0a 	call	0x154c	; 0x154c <CLCD_voidSendData>
    5ea0:	80 e0       	ldi	r24, 0x00	; 0
    5ea2:	90 e0       	ldi	r25, 0x00	; 0
    5ea4:	aa ef       	ldi	r26, 0xFA	; 250
    5ea6:	b3 e4       	ldi	r27, 0x43	; 67
    5ea8:	8f a3       	std	Y+39, r24	; 0x27
    5eaa:	98 a7       	std	Y+40, r25	; 0x28
    5eac:	a9 a7       	std	Y+41, r26	; 0x29
    5eae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5eb0:	6f a1       	ldd	r22, Y+39	; 0x27
    5eb2:	78 a5       	ldd	r23, Y+40	; 0x28
    5eb4:	89 a5       	ldd	r24, Y+41	; 0x29
    5eb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    5eb8:	20 e0       	ldi	r18, 0x00	; 0
    5eba:	30 e0       	ldi	r19, 0x00	; 0
    5ebc:	4a ef       	ldi	r20, 0xFA	; 250
    5ebe:	54 e4       	ldi	r21, 0x44	; 68
    5ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ec4:	dc 01       	movw	r26, r24
    5ec6:	cb 01       	movw	r24, r22
    5ec8:	8b a3       	std	Y+35, r24	; 0x23
    5eca:	9c a3       	std	Y+36, r25	; 0x24
    5ecc:	ad a3       	std	Y+37, r26	; 0x25
    5ece:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5ed0:	6b a1       	ldd	r22, Y+35	; 0x23
    5ed2:	7c a1       	ldd	r23, Y+36	; 0x24
    5ed4:	8d a1       	ldd	r24, Y+37	; 0x25
    5ed6:	9e a1       	ldd	r25, Y+38	; 0x26
    5ed8:	20 e0       	ldi	r18, 0x00	; 0
    5eda:	30 e0       	ldi	r19, 0x00	; 0
    5edc:	40 e8       	ldi	r20, 0x80	; 128
    5ede:	5f e3       	ldi	r21, 0x3F	; 63
    5ee0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ee4:	88 23       	and	r24, r24
    5ee6:	2c f4       	brge	.+10     	; 0x5ef2 <main+0x1a84>
		__ticks = 1;
    5ee8:	81 e0       	ldi	r24, 0x01	; 1
    5eea:	90 e0       	ldi	r25, 0x00	; 0
    5eec:	9a a3       	std	Y+34, r25	; 0x22
    5eee:	89 a3       	std	Y+33, r24	; 0x21
    5ef0:	3f c0       	rjmp	.+126    	; 0x5f70 <main+0x1b02>
	else if (__tmp > 65535)
    5ef2:	6b a1       	ldd	r22, Y+35	; 0x23
    5ef4:	7c a1       	ldd	r23, Y+36	; 0x24
    5ef6:	8d a1       	ldd	r24, Y+37	; 0x25
    5ef8:	9e a1       	ldd	r25, Y+38	; 0x26
    5efa:	20 e0       	ldi	r18, 0x00	; 0
    5efc:	3f ef       	ldi	r19, 0xFF	; 255
    5efe:	4f e7       	ldi	r20, 0x7F	; 127
    5f00:	57 e4       	ldi	r21, 0x47	; 71
    5f02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5f06:	18 16       	cp	r1, r24
    5f08:	4c f5       	brge	.+82     	; 0x5f5c <main+0x1aee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f0a:	6f a1       	ldd	r22, Y+39	; 0x27
    5f0c:	78 a5       	ldd	r23, Y+40	; 0x28
    5f0e:	89 a5       	ldd	r24, Y+41	; 0x29
    5f10:	9a a5       	ldd	r25, Y+42	; 0x2a
    5f12:	20 e0       	ldi	r18, 0x00	; 0
    5f14:	30 e0       	ldi	r19, 0x00	; 0
    5f16:	40 e2       	ldi	r20, 0x20	; 32
    5f18:	51 e4       	ldi	r21, 0x41	; 65
    5f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f1e:	dc 01       	movw	r26, r24
    5f20:	cb 01       	movw	r24, r22
    5f22:	bc 01       	movw	r22, r24
    5f24:	cd 01       	movw	r24, r26
    5f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f2a:	dc 01       	movw	r26, r24
    5f2c:	cb 01       	movw	r24, r22
    5f2e:	9a a3       	std	Y+34, r25	; 0x22
    5f30:	89 a3       	std	Y+33, r24	; 0x21
    5f32:	0f c0       	rjmp	.+30     	; 0x5f52 <main+0x1ae4>
    5f34:	88 ec       	ldi	r24, 0xC8	; 200
    5f36:	90 e0       	ldi	r25, 0x00	; 0
    5f38:	98 a3       	std	Y+32, r25	; 0x20
    5f3a:	8f 8f       	std	Y+31, r24	; 0x1f
    5f3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5f3e:	98 a1       	ldd	r25, Y+32	; 0x20
    5f40:	01 97       	sbiw	r24, 0x01	; 1
    5f42:	f1 f7       	brne	.-4      	; 0x5f40 <main+0x1ad2>
    5f44:	98 a3       	std	Y+32, r25	; 0x20
    5f46:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f48:	89 a1       	ldd	r24, Y+33	; 0x21
    5f4a:	9a a1       	ldd	r25, Y+34	; 0x22
    5f4c:	01 97       	sbiw	r24, 0x01	; 1
    5f4e:	9a a3       	std	Y+34, r25	; 0x22
    5f50:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f52:	89 a1       	ldd	r24, Y+33	; 0x21
    5f54:	9a a1       	ldd	r25, Y+34	; 0x22
    5f56:	00 97       	sbiw	r24, 0x00	; 0
    5f58:	69 f7       	brne	.-38     	; 0x5f34 <main+0x1ac6>
    5f5a:	14 c0       	rjmp	.+40     	; 0x5f84 <main+0x1b16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f5c:	6b a1       	ldd	r22, Y+35	; 0x23
    5f5e:	7c a1       	ldd	r23, Y+36	; 0x24
    5f60:	8d a1       	ldd	r24, Y+37	; 0x25
    5f62:	9e a1       	ldd	r25, Y+38	; 0x26
    5f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f68:	dc 01       	movw	r26, r24
    5f6a:	cb 01       	movw	r24, r22
    5f6c:	9a a3       	std	Y+34, r25	; 0x22
    5f6e:	89 a3       	std	Y+33, r24	; 0x21
    5f70:	89 a1       	ldd	r24, Y+33	; 0x21
    5f72:	9a a1       	ldd	r25, Y+34	; 0x22
    5f74:	9e 8f       	std	Y+30, r25	; 0x1e
    5f76:	8d 8f       	std	Y+29, r24	; 0x1d
    5f78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5f7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5f7c:	01 97       	sbiw	r24, 0x01	; 1
    5f7e:	f1 f7       	brne	.-4      	; 0x5f7c <main+0x1b0e>
    5f80:	9e 8f       	std	Y+30, r25	; 0x1e
    5f82:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(500);
						CLCD_voidGoToXY(0,10+i);
    5f84:	fe 01       	movw	r30, r28
    5f86:	e3 50       	subi	r30, 0x03	; 3
    5f88:	ff 4f       	sbci	r31, 0xFF	; 255
    5f8a:	80 81       	ld	r24, Z
    5f8c:	98 2f       	mov	r25, r24
    5f8e:	96 5f       	subi	r25, 0xF6	; 246
    5f90:	80 e0       	ldi	r24, 0x00	; 0
    5f92:	69 2f       	mov	r22, r25
    5f94:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
						CLCD_voidSendData('*');
    5f98:	8a e2       	ldi	r24, 0x2A	; 42
    5f9a:	0e 94 a6 0a 	call	0x154c	; 0x154c <CLCD_voidSendData>
						EEPROM_enuWriteData(EEPROM_PASSWORD_LOCATION1+i,Local_u8ReadPassword);
    5f9e:	fe 01       	movw	r30, r28
    5fa0:	e3 50       	subi	r30, 0x03	; 3
    5fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    5fa4:	80 81       	ld	r24, Z
    5fa6:	88 2f       	mov	r24, r24
    5fa8:	90 e0       	ldi	r25, 0x00	; 0
    5faa:	81 96       	adiw	r24, 0x21	; 33
    5fac:	fe 01       	movw	r30, r28
    5fae:	e1 50       	subi	r30, 0x01	; 1
    5fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    5fb2:	60 81       	ld	r22, Z
    5fb4:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <EEPROM_enuWriteData>

					/* Control the position (1,0) and print string in LCD  */
					CLCD_voidGoToXY(1,0);
					CLCD_voidSendString("Just Numbers");

					for( i =0; i<=3 ; i++)
    5fb8:	de 01       	movw	r26, r28
    5fba:	a3 50       	subi	r26, 0x03	; 3
    5fbc:	bf 4f       	sbci	r27, 0xFF	; 255
    5fbe:	fe 01       	movw	r30, r28
    5fc0:	e3 50       	subi	r30, 0x03	; 3
    5fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    5fc4:	80 81       	ld	r24, Z
    5fc6:	8f 5f       	subi	r24, 0xFF	; 255
    5fc8:	8c 93       	st	X, r24
    5fca:	fe 01       	movw	r30, r28
    5fcc:	e3 50       	subi	r30, 0x03	; 3
    5fce:	ff 4f       	sbci	r31, 0xFF	; 255
    5fd0:	80 81       	ld	r24, Z
    5fd2:	84 30       	cpi	r24, 0x04	; 4
    5fd4:	08 f4       	brcc	.+2      	; 0x5fd8 <main+0x1b6a>
    5fd6:	d0 ce       	rjmp	.-608    	; 0x5d78 <main+0x190a>
    5fd8:	f7 c0       	rjmp	.+494    	; 0x61c8 <main+0x1d5a>
						EEPROM_enuWriteData(EEPROM_PASSWORD_LOCATION1+i,Local_u8ReadPassword);
					}
				}
				else
				{
					CLCD_voidClearScreen();
    5fda:	0e 94 08 11 	call	0x2210	; 0x2210 <CLCD_voidClearScreen>

					/* Control the position (0,1) and print string in LCD  */
					CLCD_voidGoToXY(0,1);
    5fde:	80 e0       	ldi	r24, 0x00	; 0
    5fe0:	61 e0       	ldi	r22, 0x01	; 1
    5fe2:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
					CLCD_voidSendString("Wrong Password");
    5fe6:	8f ec       	ldi	r24, 0xCF	; 207
    5fe8:	90 e0       	ldi	r25, 0x00	; 0
    5fea:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>
    5fee:	80 e0       	ldi	r24, 0x00	; 0
    5ff0:	90 e0       	ldi	r25, 0x00	; 0
    5ff2:	aa ef       	ldi	r26, 0xFA	; 250
    5ff4:	b3 e4       	ldi	r27, 0x43	; 67
    5ff6:	89 8f       	std	Y+25, r24	; 0x19
    5ff8:	9a 8f       	std	Y+26, r25	; 0x1a
    5ffa:	ab 8f       	std	Y+27, r26	; 0x1b
    5ffc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ffe:	69 8d       	ldd	r22, Y+25	; 0x19
    6000:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6002:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6004:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6006:	20 e0       	ldi	r18, 0x00	; 0
    6008:	30 e0       	ldi	r19, 0x00	; 0
    600a:	4a ef       	ldi	r20, 0xFA	; 250
    600c:	54 e4       	ldi	r21, 0x44	; 68
    600e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6012:	dc 01       	movw	r26, r24
    6014:	cb 01       	movw	r24, r22
    6016:	8d 8b       	std	Y+21, r24	; 0x15
    6018:	9e 8b       	std	Y+22, r25	; 0x16
    601a:	af 8b       	std	Y+23, r26	; 0x17
    601c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    601e:	6d 89       	ldd	r22, Y+21	; 0x15
    6020:	7e 89       	ldd	r23, Y+22	; 0x16
    6022:	8f 89       	ldd	r24, Y+23	; 0x17
    6024:	98 8d       	ldd	r25, Y+24	; 0x18
    6026:	20 e0       	ldi	r18, 0x00	; 0
    6028:	30 e0       	ldi	r19, 0x00	; 0
    602a:	40 e8       	ldi	r20, 0x80	; 128
    602c:	5f e3       	ldi	r21, 0x3F	; 63
    602e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6032:	88 23       	and	r24, r24
    6034:	2c f4       	brge	.+10     	; 0x6040 <main+0x1bd2>
		__ticks = 1;
    6036:	81 e0       	ldi	r24, 0x01	; 1
    6038:	90 e0       	ldi	r25, 0x00	; 0
    603a:	9c 8b       	std	Y+20, r25	; 0x14
    603c:	8b 8b       	std	Y+19, r24	; 0x13
    603e:	3f c0       	rjmp	.+126    	; 0x60be <main+0x1c50>
	else if (__tmp > 65535)
    6040:	6d 89       	ldd	r22, Y+21	; 0x15
    6042:	7e 89       	ldd	r23, Y+22	; 0x16
    6044:	8f 89       	ldd	r24, Y+23	; 0x17
    6046:	98 8d       	ldd	r25, Y+24	; 0x18
    6048:	20 e0       	ldi	r18, 0x00	; 0
    604a:	3f ef       	ldi	r19, 0xFF	; 255
    604c:	4f e7       	ldi	r20, 0x7F	; 127
    604e:	57 e4       	ldi	r21, 0x47	; 71
    6050:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6054:	18 16       	cp	r1, r24
    6056:	4c f5       	brge	.+82     	; 0x60aa <main+0x1c3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6058:	69 8d       	ldd	r22, Y+25	; 0x19
    605a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    605c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    605e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6060:	20 e0       	ldi	r18, 0x00	; 0
    6062:	30 e0       	ldi	r19, 0x00	; 0
    6064:	40 e2       	ldi	r20, 0x20	; 32
    6066:	51 e4       	ldi	r21, 0x41	; 65
    6068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    606c:	dc 01       	movw	r26, r24
    606e:	cb 01       	movw	r24, r22
    6070:	bc 01       	movw	r22, r24
    6072:	cd 01       	movw	r24, r26
    6074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6078:	dc 01       	movw	r26, r24
    607a:	cb 01       	movw	r24, r22
    607c:	9c 8b       	std	Y+20, r25	; 0x14
    607e:	8b 8b       	std	Y+19, r24	; 0x13
    6080:	0f c0       	rjmp	.+30     	; 0x60a0 <main+0x1c32>
    6082:	88 ec       	ldi	r24, 0xC8	; 200
    6084:	90 e0       	ldi	r25, 0x00	; 0
    6086:	9a 8b       	std	Y+18, r25	; 0x12
    6088:	89 8b       	std	Y+17, r24	; 0x11
    608a:	89 89       	ldd	r24, Y+17	; 0x11
    608c:	9a 89       	ldd	r25, Y+18	; 0x12
    608e:	01 97       	sbiw	r24, 0x01	; 1
    6090:	f1 f7       	brne	.-4      	; 0x608e <main+0x1c20>
    6092:	9a 8b       	std	Y+18, r25	; 0x12
    6094:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6096:	8b 89       	ldd	r24, Y+19	; 0x13
    6098:	9c 89       	ldd	r25, Y+20	; 0x14
    609a:	01 97       	sbiw	r24, 0x01	; 1
    609c:	9c 8b       	std	Y+20, r25	; 0x14
    609e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60a0:	8b 89       	ldd	r24, Y+19	; 0x13
    60a2:	9c 89       	ldd	r25, Y+20	; 0x14
    60a4:	00 97       	sbiw	r24, 0x00	; 0
    60a6:	69 f7       	brne	.-38     	; 0x6082 <main+0x1c14>
    60a8:	14 c0       	rjmp	.+40     	; 0x60d2 <main+0x1c64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60aa:	6d 89       	ldd	r22, Y+21	; 0x15
    60ac:	7e 89       	ldd	r23, Y+22	; 0x16
    60ae:	8f 89       	ldd	r24, Y+23	; 0x17
    60b0:	98 8d       	ldd	r25, Y+24	; 0x18
    60b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60b6:	dc 01       	movw	r26, r24
    60b8:	cb 01       	movw	r24, r22
    60ba:	9c 8b       	std	Y+20, r25	; 0x14
    60bc:	8b 8b       	std	Y+19, r24	; 0x13
    60be:	8b 89       	ldd	r24, Y+19	; 0x13
    60c0:	9c 89       	ldd	r25, Y+20	; 0x14
    60c2:	98 8b       	std	Y+16, r25	; 0x10
    60c4:	8f 87       	std	Y+15, r24	; 0x0f
    60c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    60c8:	98 89       	ldd	r25, Y+16	; 0x10
    60ca:	01 97       	sbiw	r24, 0x01	; 1
    60cc:	f1 f7       	brne	.-4      	; 0x60ca <main+0x1c5c>
    60ce:	98 8b       	std	Y+16, r25	; 0x10
    60d0:	8f 87       	std	Y+15, r24	; 0x0f

					/* wait 500 ms */
					_delay_ms(500);

					/* Clear LCD */
					CLCD_voidClearScreen();
    60d2:	0e 94 08 11 	call	0x2210	; 0x2210 <CLCD_voidClearScreen>
    60d6:	78 c0       	rjmp	.+240    	; 0x61c8 <main+0x1d5a>
				}
			}
			else
			{
				CLCD_voidClearScreen();
    60d8:	0e 94 08 11 	call	0x2210	; 0x2210 <CLCD_voidClearScreen>
				CLCD_voidSendString("Invalid Input");
    60dc:	8f e1       	ldi	r24, 0x1F	; 31
    60de:	91 e0       	ldi	r25, 0x01	; 1
    60e0:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>
    60e4:	80 e0       	ldi	r24, 0x00	; 0
    60e6:	90 e0       	ldi	r25, 0x00	; 0
    60e8:	aa e7       	ldi	r26, 0x7A	; 122
    60ea:	b4 e4       	ldi	r27, 0x44	; 68
    60ec:	8b 87       	std	Y+11, r24	; 0x0b
    60ee:	9c 87       	std	Y+12, r25	; 0x0c
    60f0:	ad 87       	std	Y+13, r26	; 0x0d
    60f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    60f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    60f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    60fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    60fc:	20 e0       	ldi	r18, 0x00	; 0
    60fe:	30 e0       	ldi	r19, 0x00	; 0
    6100:	4a ef       	ldi	r20, 0xFA	; 250
    6102:	54 e4       	ldi	r21, 0x44	; 68
    6104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6108:	dc 01       	movw	r26, r24
    610a:	cb 01       	movw	r24, r22
    610c:	8f 83       	std	Y+7, r24	; 0x07
    610e:	98 87       	std	Y+8, r25	; 0x08
    6110:	a9 87       	std	Y+9, r26	; 0x09
    6112:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6114:	6f 81       	ldd	r22, Y+7	; 0x07
    6116:	78 85       	ldd	r23, Y+8	; 0x08
    6118:	89 85       	ldd	r24, Y+9	; 0x09
    611a:	9a 85       	ldd	r25, Y+10	; 0x0a
    611c:	20 e0       	ldi	r18, 0x00	; 0
    611e:	30 e0       	ldi	r19, 0x00	; 0
    6120:	40 e8       	ldi	r20, 0x80	; 128
    6122:	5f e3       	ldi	r21, 0x3F	; 63
    6124:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6128:	88 23       	and	r24, r24
    612a:	2c f4       	brge	.+10     	; 0x6136 <main+0x1cc8>
		__ticks = 1;
    612c:	81 e0       	ldi	r24, 0x01	; 1
    612e:	90 e0       	ldi	r25, 0x00	; 0
    6130:	9e 83       	std	Y+6, r25	; 0x06
    6132:	8d 83       	std	Y+5, r24	; 0x05
    6134:	3f c0       	rjmp	.+126    	; 0x61b4 <main+0x1d46>
	else if (__tmp > 65535)
    6136:	6f 81       	ldd	r22, Y+7	; 0x07
    6138:	78 85       	ldd	r23, Y+8	; 0x08
    613a:	89 85       	ldd	r24, Y+9	; 0x09
    613c:	9a 85       	ldd	r25, Y+10	; 0x0a
    613e:	20 e0       	ldi	r18, 0x00	; 0
    6140:	3f ef       	ldi	r19, 0xFF	; 255
    6142:	4f e7       	ldi	r20, 0x7F	; 127
    6144:	57 e4       	ldi	r21, 0x47	; 71
    6146:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    614a:	18 16       	cp	r1, r24
    614c:	4c f5       	brge	.+82     	; 0x61a0 <main+0x1d32>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    614e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6150:	7c 85       	ldd	r23, Y+12	; 0x0c
    6152:	8d 85       	ldd	r24, Y+13	; 0x0d
    6154:	9e 85       	ldd	r25, Y+14	; 0x0e
    6156:	20 e0       	ldi	r18, 0x00	; 0
    6158:	30 e0       	ldi	r19, 0x00	; 0
    615a:	40 e2       	ldi	r20, 0x20	; 32
    615c:	51 e4       	ldi	r21, 0x41	; 65
    615e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6162:	dc 01       	movw	r26, r24
    6164:	cb 01       	movw	r24, r22
    6166:	bc 01       	movw	r22, r24
    6168:	cd 01       	movw	r24, r26
    616a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    616e:	dc 01       	movw	r26, r24
    6170:	cb 01       	movw	r24, r22
    6172:	9e 83       	std	Y+6, r25	; 0x06
    6174:	8d 83       	std	Y+5, r24	; 0x05
    6176:	0f c0       	rjmp	.+30     	; 0x6196 <main+0x1d28>
    6178:	88 ec       	ldi	r24, 0xC8	; 200
    617a:	90 e0       	ldi	r25, 0x00	; 0
    617c:	9c 83       	std	Y+4, r25	; 0x04
    617e:	8b 83       	std	Y+3, r24	; 0x03
    6180:	8b 81       	ldd	r24, Y+3	; 0x03
    6182:	9c 81       	ldd	r25, Y+4	; 0x04
    6184:	01 97       	sbiw	r24, 0x01	; 1
    6186:	f1 f7       	brne	.-4      	; 0x6184 <main+0x1d16>
    6188:	9c 83       	std	Y+4, r25	; 0x04
    618a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    618c:	8d 81       	ldd	r24, Y+5	; 0x05
    618e:	9e 81       	ldd	r25, Y+6	; 0x06
    6190:	01 97       	sbiw	r24, 0x01	; 1
    6192:	9e 83       	std	Y+6, r25	; 0x06
    6194:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6196:	8d 81       	ldd	r24, Y+5	; 0x05
    6198:	9e 81       	ldd	r25, Y+6	; 0x06
    619a:	00 97       	sbiw	r24, 0x00	; 0
    619c:	69 f7       	brne	.-38     	; 0x6178 <main+0x1d0a>
    619e:	14 c0       	rjmp	.+40     	; 0x61c8 <main+0x1d5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61a0:	6f 81       	ldd	r22, Y+7	; 0x07
    61a2:	78 85       	ldd	r23, Y+8	; 0x08
    61a4:	89 85       	ldd	r24, Y+9	; 0x09
    61a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    61a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61ac:	dc 01       	movw	r26, r24
    61ae:	cb 01       	movw	r24, r22
    61b0:	9e 83       	std	Y+6, r25	; 0x06
    61b2:	8d 83       	std	Y+5, r24	; 0x05
    61b4:	8d 81       	ldd	r24, Y+5	; 0x05
    61b6:	9e 81       	ldd	r25, Y+6	; 0x06
    61b8:	9a 83       	std	Y+2, r25	; 0x02
    61ba:	89 83       	std	Y+1, r24	; 0x01
    61bc:	89 81       	ldd	r24, Y+1	; 0x01
    61be:	9a 81       	ldd	r25, Y+2	; 0x02
    61c0:	01 97       	sbiw	r24, 0x01	; 1
    61c2:	f1 f7       	brne	.-4      	; 0x61c0 <main+0x1d52>
    61c4:	9a 83       	std	Y+2, r25	; 0x02
    61c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

	/********************************** Still in Infinty Loop *****************************************/
	for(;;)
	{
		while(Local_u8Flag == 0)
    61c8:	fe 01       	movw	r30, r28
    61ca:	e0 50       	subi	r30, 0x00	; 0
    61cc:	ff 4f       	sbci	r31, 0xFF	; 255
    61ce:	80 81       	ld	r24, Z
    61d0:	88 23       	and	r24, r24
    61d2:	11 f4       	brne	.+4      	; 0x61d8 <main+0x1d6a>
    61d4:	0c 94 3d 24 	jmp	0x487a	; 0x487a <main+0x40c>
    61d8:	f7 cf       	rjmp	.-18     	; 0x61c8 <main+0x1d5a>

000061da <FUNC_voidCallBack>:
}


/* Function Implementation */
void FUNC_voidCallBack(void)
{
    61da:	df 93       	push	r29
    61dc:	cf 93       	push	r28
    61de:	00 d0       	rcall	.+0      	; 0x61e0 <FUNC_voidCallBack+0x6>
    61e0:	cd b7       	in	r28, 0x3d	; 61
    61e2:	de b7       	in	r29, 0x3e	; 62
	/* Receive data from Master MCU */
	SPI_VALUE = SPI_u8ReceiveByte();
    61e4:	0e 94 03 19 	call	0x3206	; 0x3206 <SPI_u8ReceiveByte>
    61e8:	80 93 64 01 	sts	0x0164, r24

	switch (SPI_VALUE)
    61ec:	80 91 64 01 	lds	r24, 0x0164
    61f0:	28 2f       	mov	r18, r24
    61f2:	30 e0       	ldi	r19, 0x00	; 0
    61f4:	3a 83       	std	Y+2, r19	; 0x02
    61f6:	29 83       	std	Y+1, r18	; 0x01
    61f8:	89 81       	ldd	r24, Y+1	; 0x01
    61fa:	9a 81       	ldd	r25, Y+2	; 0x02
    61fc:	8a 35       	cpi	r24, 0x5A	; 90
    61fe:	91 05       	cpc	r25, r1
    6200:	09 f4       	brne	.+2      	; 0x6204 <FUNC_voidCallBack+0x2a>
    6202:	50 c0       	rjmp	.+160    	; 0x62a4 <FUNC_voidCallBack+0xca>
    6204:	29 81       	ldd	r18, Y+1	; 0x01
    6206:	3a 81       	ldd	r19, Y+2	; 0x02
    6208:	2b 35       	cpi	r18, 0x5B	; 91
    620a:	31 05       	cpc	r19, r1
    620c:	64 f4       	brge	.+24     	; 0x6226 <FUNC_voidCallBack+0x4c>
    620e:	89 81       	ldd	r24, Y+1	; 0x01
    6210:	9a 81       	ldd	r25, Y+2	; 0x02
    6212:	88 34       	cpi	r24, 0x48	; 72
    6214:	91 05       	cpc	r25, r1
    6216:	c1 f0       	breq	.+48     	; 0x6248 <FUNC_voidCallBack+0x6e>
    6218:	29 81       	ldd	r18, Y+1	; 0x01
    621a:	3a 81       	ldd	r19, Y+2	; 0x02
    621c:	29 35       	cpi	r18, 0x59	; 89
    621e:	31 05       	cpc	r19, r1
    6220:	09 f4       	brne	.+2      	; 0x6224 <FUNC_voidCallBack+0x4a>
    6222:	4c c0       	rjmp	.+152    	; 0x62bc <FUNC_voidCallBack+0xe2>
    6224:	56 c0       	rjmp	.+172    	; 0x62d2 <FUNC_voidCallBack+0xf8>
    6226:	89 81       	ldd	r24, Y+1	; 0x01
    6228:	9a 81       	ldd	r25, Y+2	; 0x02
    622a:	89 37       	cpi	r24, 0x79	; 121
    622c:	91 05       	cpc	r25, r1
    622e:	09 f4       	brne	.+2      	; 0x6232 <FUNC_voidCallBack+0x58>
    6230:	4b c0       	rjmp	.+150    	; 0x62c8 <FUNC_voidCallBack+0xee>
    6232:	29 81       	ldd	r18, Y+1	; 0x01
    6234:	3a 81       	ldd	r19, Y+2	; 0x02
    6236:	2a 37       	cpi	r18, 0x7A	; 122
    6238:	31 05       	cpc	r19, r1
    623a:	d1 f1       	breq	.+116    	; 0x62b0 <FUNC_voidCallBack+0xd6>
    623c:	89 81       	ldd	r24, Y+1	; 0x01
    623e:	9a 81       	ldd	r25, Y+2	; 0x02
    6240:	88 36       	cpi	r24, 0x68	; 104
    6242:	91 05       	cpc	r25, r1
    6244:	c1 f0       	breq	.+48     	; 0x6276 <FUNC_voidCallBack+0x9c>
    6246:	45 c0       	rjmp	.+138    	; 0x62d2 <FUNC_voidCallBack+0xf8>
	{
	case 'H':
		SERVO_voidTimer1ServoSetAngleOCR1A(0);
    6248:	60 e0       	ldi	r22, 0x00	; 0
    624a:	70 e0       	ldi	r23, 0x00	; 0
    624c:	80 e0       	ldi	r24, 0x00	; 0
    624e:	90 e0       	ldi	r25, 0x00	; 0
    6250:	0e 94 b2 19 	call	0x3364	; 0x3364 <SERVO_voidTimer1ServoSetAngleOCR1A>
		SERVO_voidTimer1ServoSetAngleOCR1B(180);
    6254:	64 eb       	ldi	r22, 0xB4	; 180
    6256:	70 e0       	ldi	r23, 0x00	; 0
    6258:	80 e0       	ldi	r24, 0x00	; 0
    625a:	90 e0       	ldi	r25, 0x00	; 0
    625c:	0e 94 0d 1a 	call	0x341a	; 0x341a <SERVO_voidTimer1ServoSetAngleOCR1B>
		DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN0,DIO_u8PIN_HIGH);
    6260:	83 e0       	ldi	r24, 0x03	; 3
    6262:	60 e0       	ldi	r22, 0x00	; 0
    6264:	41 e0       	ldi	r20, 0x01	; 1
    6266:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_LOW);
    626a:	83 e0       	ldi	r24, 0x03	; 3
    626c:	61 e0       	ldi	r22, 0x01	; 1
    626e:	40 e0       	ldi	r20, 0x00	; 0
    6270:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
    6274:	2e c0       	rjmp	.+92     	; 0x62d2 <FUNC_voidCallBack+0xf8>
		break;

	case 'h':
		SERVO_voidTimer1ServoSetAngleOCR1A(90);
    6276:	6a e5       	ldi	r22, 0x5A	; 90
    6278:	70 e0       	ldi	r23, 0x00	; 0
    627a:	80 e0       	ldi	r24, 0x00	; 0
    627c:	90 e0       	ldi	r25, 0x00	; 0
    627e:	0e 94 b2 19 	call	0x3364	; 0x3364 <SERVO_voidTimer1ServoSetAngleOCR1A>
		SERVO_voidTimer1ServoSetAngleOCR1B(90);
    6282:	6a e5       	ldi	r22, 0x5A	; 90
    6284:	70 e0       	ldi	r23, 0x00	; 0
    6286:	80 e0       	ldi	r24, 0x00	; 0
    6288:	90 e0       	ldi	r25, 0x00	; 0
    628a:	0e 94 0d 1a 	call	0x341a	; 0x341a <SERVO_voidTimer1ServoSetAngleOCR1B>
		DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN0,DIO_u8PIN_LOW);
    628e:	83 e0       	ldi	r24, 0x03	; 3
    6290:	60 e0       	ldi	r22, 0x00	; 0
    6292:	40 e0       	ldi	r20, 0x00	; 0
    6294:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_HIGH);
    6298:	83 e0       	ldi	r24, 0x03	; 3
    629a:	61 e0       	ldi	r22, 0x01	; 1
    629c:	41 e0       	ldi	r20, 0x01	; 1
    629e:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
    62a2:	17 c0       	rjmp	.+46     	; 0x62d2 <FUNC_voidCallBack+0xf8>
		break;

	case 'Z': DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN7,DIO_u8PIN_HIGH); break;
    62a4:	83 e0       	ldi	r24, 0x03	; 3
    62a6:	67 e0       	ldi	r22, 0x07	; 7
    62a8:	41 e0       	ldi	r20, 0x01	; 1
    62aa:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
    62ae:	11 c0       	rjmp	.+34     	; 0x62d2 <FUNC_voidCallBack+0xf8>

	case 'z': DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN7,DIO_u8PIN_LOW);  break;
    62b0:	83 e0       	ldi	r24, 0x03	; 3
    62b2:	67 e0       	ldi	r22, 0x07	; 7
    62b4:	40 e0       	ldi	r20, 0x00	; 0
    62b6:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
    62ba:	0b c0       	rjmp	.+22     	; 0x62d2 <FUNC_voidCallBack+0xf8>

	case 'Y': DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN6,DIO_u8PIN_HIGH); break;
    62bc:	83 e0       	ldi	r24, 0x03	; 3
    62be:	66 e0       	ldi	r22, 0x06	; 6
    62c0:	41 e0       	ldi	r20, 0x01	; 1
    62c2:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
    62c6:	05 c0       	rjmp	.+10     	; 0x62d2 <FUNC_voidCallBack+0xf8>

	case 'y': DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN6,DIO_u8PIN_LOW); break;
    62c8:	83 e0       	ldi	r24, 0x03	; 3
    62ca:	66 e0       	ldi	r22, 0x06	; 6
    62cc:	40 e0       	ldi	r20, 0x00	; 0
    62ce:	0e 94 74 13 	call	0x26e8	; 0x26e8 <DIO_u8SetPinValue>
	}
}
    62d2:	0f 90       	pop	r0
    62d4:	0f 90       	pop	r0
    62d6:	cf 91       	pop	r28
    62d8:	df 91       	pop	r29
    62da:	08 95       	ret

000062dc <__mulsi3>:
    62dc:	62 9f       	mul	r22, r18
    62de:	d0 01       	movw	r26, r0
    62e0:	73 9f       	mul	r23, r19
    62e2:	f0 01       	movw	r30, r0
    62e4:	82 9f       	mul	r24, r18
    62e6:	e0 0d       	add	r30, r0
    62e8:	f1 1d       	adc	r31, r1
    62ea:	64 9f       	mul	r22, r20
    62ec:	e0 0d       	add	r30, r0
    62ee:	f1 1d       	adc	r31, r1
    62f0:	92 9f       	mul	r25, r18
    62f2:	f0 0d       	add	r31, r0
    62f4:	83 9f       	mul	r24, r19
    62f6:	f0 0d       	add	r31, r0
    62f8:	74 9f       	mul	r23, r20
    62fa:	f0 0d       	add	r31, r0
    62fc:	65 9f       	mul	r22, r21
    62fe:	f0 0d       	add	r31, r0
    6300:	99 27       	eor	r25, r25
    6302:	72 9f       	mul	r23, r18
    6304:	b0 0d       	add	r27, r0
    6306:	e1 1d       	adc	r30, r1
    6308:	f9 1f       	adc	r31, r25
    630a:	63 9f       	mul	r22, r19
    630c:	b0 0d       	add	r27, r0
    630e:	e1 1d       	adc	r30, r1
    6310:	f9 1f       	adc	r31, r25
    6312:	bd 01       	movw	r22, r26
    6314:	cf 01       	movw	r24, r30
    6316:	11 24       	eor	r1, r1
    6318:	08 95       	ret

0000631a <__udivmodhi4>:
    631a:	aa 1b       	sub	r26, r26
    631c:	bb 1b       	sub	r27, r27
    631e:	51 e1       	ldi	r21, 0x11	; 17
    6320:	07 c0       	rjmp	.+14     	; 0x6330 <__udivmodhi4_ep>

00006322 <__udivmodhi4_loop>:
    6322:	aa 1f       	adc	r26, r26
    6324:	bb 1f       	adc	r27, r27
    6326:	a6 17       	cp	r26, r22
    6328:	b7 07       	cpc	r27, r23
    632a:	10 f0       	brcs	.+4      	; 0x6330 <__udivmodhi4_ep>
    632c:	a6 1b       	sub	r26, r22
    632e:	b7 0b       	sbc	r27, r23

00006330 <__udivmodhi4_ep>:
    6330:	88 1f       	adc	r24, r24
    6332:	99 1f       	adc	r25, r25
    6334:	5a 95       	dec	r21
    6336:	a9 f7       	brne	.-22     	; 0x6322 <__udivmodhi4_loop>
    6338:	80 95       	com	r24
    633a:	90 95       	com	r25
    633c:	bc 01       	movw	r22, r24
    633e:	cd 01       	movw	r24, r26
    6340:	08 95       	ret

00006342 <__divmodhi4>:
    6342:	97 fb       	bst	r25, 7
    6344:	09 2e       	mov	r0, r25
    6346:	07 26       	eor	r0, r23
    6348:	0a d0       	rcall	.+20     	; 0x635e <__divmodhi4_neg1>
    634a:	77 fd       	sbrc	r23, 7
    634c:	04 d0       	rcall	.+8      	; 0x6356 <__divmodhi4_neg2>
    634e:	e5 df       	rcall	.-54     	; 0x631a <__udivmodhi4>
    6350:	06 d0       	rcall	.+12     	; 0x635e <__divmodhi4_neg1>
    6352:	00 20       	and	r0, r0
    6354:	1a f4       	brpl	.+6      	; 0x635c <__divmodhi4_exit>

00006356 <__divmodhi4_neg2>:
    6356:	70 95       	com	r23
    6358:	61 95       	neg	r22
    635a:	7f 4f       	sbci	r23, 0xFF	; 255

0000635c <__divmodhi4_exit>:
    635c:	08 95       	ret

0000635e <__divmodhi4_neg1>:
    635e:	f6 f7       	brtc	.-4      	; 0x635c <__divmodhi4_exit>
    6360:	90 95       	com	r25
    6362:	81 95       	neg	r24
    6364:	9f 4f       	sbci	r25, 0xFF	; 255
    6366:	08 95       	ret

00006368 <__udivmodsi4>:
    6368:	a1 e2       	ldi	r26, 0x21	; 33
    636a:	1a 2e       	mov	r1, r26
    636c:	aa 1b       	sub	r26, r26
    636e:	bb 1b       	sub	r27, r27
    6370:	fd 01       	movw	r30, r26
    6372:	0d c0       	rjmp	.+26     	; 0x638e <__udivmodsi4_ep>

00006374 <__udivmodsi4_loop>:
    6374:	aa 1f       	adc	r26, r26
    6376:	bb 1f       	adc	r27, r27
    6378:	ee 1f       	adc	r30, r30
    637a:	ff 1f       	adc	r31, r31
    637c:	a2 17       	cp	r26, r18
    637e:	b3 07       	cpc	r27, r19
    6380:	e4 07       	cpc	r30, r20
    6382:	f5 07       	cpc	r31, r21
    6384:	20 f0       	brcs	.+8      	; 0x638e <__udivmodsi4_ep>
    6386:	a2 1b       	sub	r26, r18
    6388:	b3 0b       	sbc	r27, r19
    638a:	e4 0b       	sbc	r30, r20
    638c:	f5 0b       	sbc	r31, r21

0000638e <__udivmodsi4_ep>:
    638e:	66 1f       	adc	r22, r22
    6390:	77 1f       	adc	r23, r23
    6392:	88 1f       	adc	r24, r24
    6394:	99 1f       	adc	r25, r25
    6396:	1a 94       	dec	r1
    6398:	69 f7       	brne	.-38     	; 0x6374 <__udivmodsi4_loop>
    639a:	60 95       	com	r22
    639c:	70 95       	com	r23
    639e:	80 95       	com	r24
    63a0:	90 95       	com	r25
    63a2:	9b 01       	movw	r18, r22
    63a4:	ac 01       	movw	r20, r24
    63a6:	bd 01       	movw	r22, r26
    63a8:	cf 01       	movw	r24, r30
    63aa:	08 95       	ret

000063ac <__divmodsi4>:
    63ac:	97 fb       	bst	r25, 7
    63ae:	09 2e       	mov	r0, r25
    63b0:	05 26       	eor	r0, r21
    63b2:	0e d0       	rcall	.+28     	; 0x63d0 <__divmodsi4_neg1>
    63b4:	57 fd       	sbrc	r21, 7
    63b6:	04 d0       	rcall	.+8      	; 0x63c0 <__divmodsi4_neg2>
    63b8:	d7 df       	rcall	.-82     	; 0x6368 <__udivmodsi4>
    63ba:	0a d0       	rcall	.+20     	; 0x63d0 <__divmodsi4_neg1>
    63bc:	00 1c       	adc	r0, r0
    63be:	38 f4       	brcc	.+14     	; 0x63ce <__divmodsi4_exit>

000063c0 <__divmodsi4_neg2>:
    63c0:	50 95       	com	r21
    63c2:	40 95       	com	r20
    63c4:	30 95       	com	r19
    63c6:	21 95       	neg	r18
    63c8:	3f 4f       	sbci	r19, 0xFF	; 255
    63ca:	4f 4f       	sbci	r20, 0xFF	; 255
    63cc:	5f 4f       	sbci	r21, 0xFF	; 255

000063ce <__divmodsi4_exit>:
    63ce:	08 95       	ret

000063d0 <__divmodsi4_neg1>:
    63d0:	f6 f7       	brtc	.-4      	; 0x63ce <__divmodsi4_exit>
    63d2:	90 95       	com	r25
    63d4:	80 95       	com	r24
    63d6:	70 95       	com	r23
    63d8:	61 95       	neg	r22
    63da:	7f 4f       	sbci	r23, 0xFF	; 255
    63dc:	8f 4f       	sbci	r24, 0xFF	; 255
    63de:	9f 4f       	sbci	r25, 0xFF	; 255
    63e0:	08 95       	ret

000063e2 <__prologue_saves__>:
    63e2:	2f 92       	push	r2
    63e4:	3f 92       	push	r3
    63e6:	4f 92       	push	r4
    63e8:	5f 92       	push	r5
    63ea:	6f 92       	push	r6
    63ec:	7f 92       	push	r7
    63ee:	8f 92       	push	r8
    63f0:	9f 92       	push	r9
    63f2:	af 92       	push	r10
    63f4:	bf 92       	push	r11
    63f6:	cf 92       	push	r12
    63f8:	df 92       	push	r13
    63fa:	ef 92       	push	r14
    63fc:	ff 92       	push	r15
    63fe:	0f 93       	push	r16
    6400:	1f 93       	push	r17
    6402:	cf 93       	push	r28
    6404:	df 93       	push	r29
    6406:	cd b7       	in	r28, 0x3d	; 61
    6408:	de b7       	in	r29, 0x3e	; 62
    640a:	ca 1b       	sub	r28, r26
    640c:	db 0b       	sbc	r29, r27
    640e:	0f b6       	in	r0, 0x3f	; 63
    6410:	f8 94       	cli
    6412:	de bf       	out	0x3e, r29	; 62
    6414:	0f be       	out	0x3f, r0	; 63
    6416:	cd bf       	out	0x3d, r28	; 61
    6418:	09 94       	ijmp

0000641a <__epilogue_restores__>:
    641a:	2a 88       	ldd	r2, Y+18	; 0x12
    641c:	39 88       	ldd	r3, Y+17	; 0x11
    641e:	48 88       	ldd	r4, Y+16	; 0x10
    6420:	5f 84       	ldd	r5, Y+15	; 0x0f
    6422:	6e 84       	ldd	r6, Y+14	; 0x0e
    6424:	7d 84       	ldd	r7, Y+13	; 0x0d
    6426:	8c 84       	ldd	r8, Y+12	; 0x0c
    6428:	9b 84       	ldd	r9, Y+11	; 0x0b
    642a:	aa 84       	ldd	r10, Y+10	; 0x0a
    642c:	b9 84       	ldd	r11, Y+9	; 0x09
    642e:	c8 84       	ldd	r12, Y+8	; 0x08
    6430:	df 80       	ldd	r13, Y+7	; 0x07
    6432:	ee 80       	ldd	r14, Y+6	; 0x06
    6434:	fd 80       	ldd	r15, Y+5	; 0x05
    6436:	0c 81       	ldd	r16, Y+4	; 0x04
    6438:	1b 81       	ldd	r17, Y+3	; 0x03
    643a:	aa 81       	ldd	r26, Y+2	; 0x02
    643c:	b9 81       	ldd	r27, Y+1	; 0x01
    643e:	ce 0f       	add	r28, r30
    6440:	d1 1d       	adc	r29, r1
    6442:	0f b6       	in	r0, 0x3f	; 63
    6444:	f8 94       	cli
    6446:	de bf       	out	0x3e, r29	; 62
    6448:	0f be       	out	0x3f, r0	; 63
    644a:	cd bf       	out	0x3d, r28	; 61
    644c:	ed 01       	movw	r28, r26
    644e:	08 95       	ret

00006450 <itoa>:
    6450:	fb 01       	movw	r30, r22
    6452:	9f 01       	movw	r18, r30
    6454:	e8 94       	clt
    6456:	42 30       	cpi	r20, 0x02	; 2
    6458:	c4 f0       	brlt	.+48     	; 0x648a <itoa+0x3a>
    645a:	45 32       	cpi	r20, 0x25	; 37
    645c:	b4 f4       	brge	.+44     	; 0x648a <itoa+0x3a>
    645e:	4a 30       	cpi	r20, 0x0A	; 10
    6460:	29 f4       	brne	.+10     	; 0x646c <itoa+0x1c>
    6462:	97 fb       	bst	r25, 7
    6464:	1e f4       	brtc	.+6      	; 0x646c <itoa+0x1c>
    6466:	90 95       	com	r25
    6468:	81 95       	neg	r24
    646a:	9f 4f       	sbci	r25, 0xFF	; 255
    646c:	64 2f       	mov	r22, r20
    646e:	77 27       	eor	r23, r23
    6470:	0e 94 8d 31 	call	0x631a	; 0x631a <__udivmodhi4>
    6474:	80 5d       	subi	r24, 0xD0	; 208
    6476:	8a 33       	cpi	r24, 0x3A	; 58
    6478:	0c f0       	brlt	.+2      	; 0x647c <itoa+0x2c>
    647a:	89 5d       	subi	r24, 0xD9	; 217
    647c:	81 93       	st	Z+, r24
    647e:	cb 01       	movw	r24, r22
    6480:	00 97       	sbiw	r24, 0x00	; 0
    6482:	a1 f7       	brne	.-24     	; 0x646c <itoa+0x1c>
    6484:	16 f4       	brtc	.+4      	; 0x648a <itoa+0x3a>
    6486:	5d e2       	ldi	r21, 0x2D	; 45
    6488:	51 93       	st	Z+, r21
    648a:	10 82       	st	Z, r1
    648c:	c9 01       	movw	r24, r18
    648e:	0c 94 49 32 	jmp	0x6492	; 0x6492 <strrev>

00006492 <strrev>:
    6492:	dc 01       	movw	r26, r24
    6494:	fc 01       	movw	r30, r24
    6496:	67 2f       	mov	r22, r23
    6498:	71 91       	ld	r23, Z+
    649a:	77 23       	and	r23, r23
    649c:	e1 f7       	brne	.-8      	; 0x6496 <strrev+0x4>
    649e:	32 97       	sbiw	r30, 0x02	; 2
    64a0:	04 c0       	rjmp	.+8      	; 0x64aa <strrev+0x18>
    64a2:	7c 91       	ld	r23, X
    64a4:	6d 93       	st	X+, r22
    64a6:	70 83       	st	Z, r23
    64a8:	62 91       	ld	r22, -Z
    64aa:	ae 17       	cp	r26, r30
    64ac:	bf 07       	cpc	r27, r31
    64ae:	c8 f3       	brcs	.-14     	; 0x64a2 <strrev+0x10>
    64b0:	08 95       	ret

000064b2 <_exit>:
    64b2:	f8 94       	cli

000064b4 <__stop_program>:
    64b4:	ff cf       	rjmp	.-2      	; 0x64b4 <__stop_program>
