
Smart_Home_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000579a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  0000579a  0000582e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  0080018c  0080018c  0000595a  2**0
                  ALLOC
  3 .stab         00004aac  00000000  00000000  0000595c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c88  00000000  00000000  0000a408  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000c230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000c422  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000e82d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000fbb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00010d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00010f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00011242  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011bb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__vector_4>
      14:	0c 94 3f 1d 	jmp	0x3a7e	; 0x3a7e <__vector_5>
      18:	0c 94 a5 23 	jmp	0x474a	; 0x474a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <__vector_10>
      2c:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f7 e5       	ldi	r31, 0x57	; 87
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3d       	cpi	r26, 0xD0	; 208
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 32 26 	call	0x4c64	; 0x4c64 <main>
      8a:	0c 94 cb 2b 	jmp	0x5796	; 0x5796 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 63 2b 	jmp	0x56c6	; 0x56c6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e8       	ldi	r26, 0x84	; 132
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7f 2b 	jmp	0x56fe	; 0x56fe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6f 2b 	jmp	0x56de	; 0x56de <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8b 2b 	jmp	0x5716	; 0x5716 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6f 2b 	jmp	0x56de	; 0x56de <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8b 2b 	jmp	0x5716	; 0x5716 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 63 2b 	jmp	0x56c6	; 0x56c6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 e8       	ldi	r24, 0x84	; 132
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7f 2b 	jmp	0x56fe	; 0x56fe <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6b 2b 	jmp	0x56d6	; 0x56d6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e8       	ldi	r22, 0x84	; 132
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 87 2b 	jmp	0x570e	; 0x570e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6f 2b 	jmp	0x56de	; 0x56de <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8b 2b 	jmp	0x5716	; 0x5716 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6f 2b 	jmp	0x56de	; 0x56de <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8b 2b 	jmp	0x5716	; 0x5716 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6f 2b 	jmp	0x56de	; 0x56de <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8b 2b 	jmp	0x5716	; 0x5716 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 73 2b 	jmp	0x56e6	; 0x56e6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 8f 2b 	jmp	0x571e	; 0x571e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 6b 2b 	jmp	0x56d6	; 0x56d6 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 87 2b 	jmp	0x570e	; 0x570e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e4 57       	subi	r30, 0x74	; 116
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_voidInit>:
static u8 ADC_u8ChainConversionIndex;			/*Global variable to carry the current conversion index*/
static u8 ADC_u8BusyState= IDLE;
static u8 ADC_u8ISRSource;

void ADC_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
#if VRS == AREF
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);

#elif VRS == AVCC
	SET_BIT(ADMUX,ADMUX_REFS0);
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 77       	andi	r24, 0x7F	; 127
     e50:	8c 93       	st	X, r24
	/*Select Resolution*/
#if Resolution == _8_Bits
	SET_BIT(ADMUX,ADMUX_ADLAR);

#elif  Resolution == _10_Bits
	CLR_BIT(ADMUX,ADMUX_ADLAR);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7d       	andi	r24, 0xDF	; 223
     e5e:	8c 93       	st	X, r24
#else
#error "Wrong Resolution configuration option"
#endif

	/*Set Prescaler*/
	ADMUX &= 0b11111000;
     e60:	a7 e2       	ldi	r26, 0x27	; 39
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e7 e2       	ldi	r30, 0x27	; 39
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 7f       	andi	r24, 0xF8	; 248
     e6c:	8c 93       	st	X, r24
	ADMUX |= PrescalerSelections;
     e6e:	a7 e2       	ldi	r26, 0x27	; 39
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e7 e2       	ldi	r30, 0x27	; 39
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	87 60       	ori	r24, 0x07	; 7
     e7a:	8c 93       	st	X, r24

	/*Enable peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 68       	ori	r24, 0x80	; 128
     e88:	8c 93       	st	X, r24


}
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <ADC_u8GetChannelReading>:

u16 ADC_u8GetChannelReading(u8 Copy_u8Channel)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	89 83       	std	Y+1, r24	; 0x01
	/*Clear the MUX bits in ADMUX register*/
	ADMUX &= 0b11100000;
     e9c:	a7 e2       	ldi	r26, 0x27	; 39
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e7 e2       	ldi	r30, 0x27	; 39
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	80 7e       	andi	r24, 0xE0	; 224
     ea8:	8c 93       	st	X, r24

	/*Set the required channel into MUX bits*/
	ADMUX |= Copy_u8Channel;
     eaa:	a7 e2       	ldi	r26, 0x27	; 39
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e7 e2       	ldi	r30, 0x27	; 39
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	90 81       	ld	r25, Z
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	89 2b       	or	r24, r25
     eb8:	8c 93       	st	X, r24

	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
     eba:	a6 e2       	ldi	r26, 0x26	; 38
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e6 e2       	ldi	r30, 0x26	; 38
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	80 64       	ori	r24, 0x40	; 64
     ec6:	8c 93       	st	X, r24

	/*Polling (busy waiting) until the conversion complete flag is set*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF))==0);
     ec8:	e6 e2       	ldi	r30, 0x26	; 38
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	82 95       	swap	r24
     ed0:	8f 70       	andi	r24, 0x0F	; 15
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	81 70       	andi	r24, 0x01	; 1
     ed8:	90 70       	andi	r25, 0x00	; 0
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	a9 f3       	breq	.-22     	; 0xec8 <ADC_u8GetChannelReading+0x38>

	/*Clear the conversion complete flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
     ede:	a6 e2       	ldi	r26, 0x26	; 38
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e6 e2       	ldi	r30, 0x26	; 38
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 61       	ori	r24, 0x10	; 16
     eea:	8c 93       	st	X, r24
	/*Return the reading*/
#if Resolution == _8_Bits
	return ADCH;

#elif Resolution == _10_Bits
	return ADC;
     eec:	e4 e2       	ldi	r30, 0x24	; 36
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	91 81       	ldd	r25, Z+1	; 0x01

#endif
}
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <ADC_u8StartConversionSynch>:


u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel, u8* Copy_pu8Reading)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	28 97       	sbiw	r28, 0x08	; 8
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	8e 83       	std	Y+6, r24	; 0x06
     f12:	78 87       	std	Y+8, r23	; 0x08
     f14:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
     f16:	1a 82       	std	Y+2, r1	; 0x02
     f18:	1b 82       	std	Y+3, r1	; 0x03
     f1a:	1c 82       	std	Y+4, r1	; 0x04
     f1c:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState=OK;
     f1e:	19 82       	std	Y+1, r1	; 0x01
	if (ADC_u8BusyState == IDLE)
     f20:	80 91 96 01 	lds	r24, 0x0196
     f24:	88 23       	and	r24, r24
     f26:	09 f0       	breq	.+2      	; 0xf2a <ADC_u8StartConversionSynch+0x2e>
     f28:	5c c0       	rjmp	.+184    	; 0xfe2 <ADC_u8StartConversionSynch+0xe6>
	{
		/*ADC is now busy*/
		ADC_u8BusyState= BUSY;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	80 93 96 01 	sts	0x0196, r24

		/*Clear the MUX bits in ADMUX register*/
		ADMUX &= 0b11100000;
     f30:	a7 e2       	ldi	r26, 0x27	; 39
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e7 e2       	ldi	r30, 0x27	; 39
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	80 7e       	andi	r24, 0xE0	; 224
     f3c:	8c 93       	st	X, r24

		/*Set the required channel into the MUX bits*/
		ADMUX|= Copy_u8Channel;
     f3e:	a7 e2       	ldi	r26, 0x27	; 39
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e7 e2       	ldi	r30, 0x27	; 39
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	90 81       	ld	r25, Z
     f48:	8e 81       	ldd	r24, Y+6	; 0x06
     f4a:	89 2b       	or	r24, r25
     f4c:	8c 93       	st	X, r24

		/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     f4e:	a6 e2       	ldi	r26, 0x26	; 38
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e6 e2       	ldi	r30, 0x26	; 38
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	80 64       	ori	r24, 0x40	; 64
     f5a:	8c 93       	st	X, r24
     f5c:	0b c0       	rjmp	.+22     	; 0xf74 <ADC_u8StartConversionSynch+0x78>

		/*Polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0)  && (Local_u32Counter != ADC_u32TIMEOUT ) )
		{
			Local_u32Counter++;
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	9b 81       	ldd	r25, Y+3	; 0x03
     f62:	ac 81       	ldd	r26, Y+4	; 0x04
     f64:	bd 81       	ldd	r27, Y+5	; 0x05
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	a1 1d       	adc	r26, r1
     f6a:	b1 1d       	adc	r27, r1
     f6c:	8a 83       	std	Y+2, r24	; 0x02
     f6e:	9b 83       	std	Y+3, r25	; 0x03
     f70:	ac 83       	std	Y+4, r26	; 0x04
     f72:	bd 83       	std	Y+5, r27	; 0x05

		/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		/*Polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0)  && (Local_u32Counter != ADC_u32TIMEOUT ) )
     f74:	e6 e2       	ldi	r30, 0x26	; 38
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	82 95       	swap	r24
     f7c:	8f 70       	andi	r24, 0x0F	; 15
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	81 70       	andi	r24, 0x01	; 1
     f84:	90 70       	andi	r25, 0x00	; 0
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	61 f4       	brne	.+24     	; 0xfa2 <ADC_u8StartConversionSynch+0xa6>
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	9b 81       	ldd	r25, Y+3	; 0x03
     f8e:	ac 81       	ldd	r26, Y+4	; 0x04
     f90:	bd 81       	ldd	r27, Y+5	; 0x05
     f92:	80 35       	cpi	r24, 0x50	; 80
     f94:	23 ec       	ldi	r18, 0xC3	; 195
     f96:	92 07       	cpc	r25, r18
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	a2 07       	cpc	r26, r18
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	b2 07       	cpc	r27, r18
     fa0:	f1 f6       	brne	.-68     	; 0xf5e <ADC_u8StartConversionSynch+0x62>
		{
			Local_u32Counter++;
		}
		if(Local_u32Counter== ADC_u32TIMEOUT)
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	9b 81       	ldd	r25, Y+3	; 0x03
     fa6:	ac 81       	ldd	r26, Y+4	; 0x04
     fa8:	bd 81       	ldd	r27, Y+5	; 0x05
     faa:	80 35       	cpi	r24, 0x50	; 80
     fac:	23 ec       	ldi	r18, 0xC3	; 195
     fae:	92 07       	cpc	r25, r18
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	a2 07       	cpc	r26, r18
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	b2 07       	cpc	r27, r18
     fb8:	19 f4       	brne	.+6      	; 0xfc0 <ADC_u8StartConversionSynch+0xc4>
		{
			/*Loop is broken because the timeout is reached*/
			Local_u8ErrorState=NOK;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	89 83       	std	Y+1, r24	; 0x01
     fbe:	13 c0       	rjmp	.+38     	; 0xfe6 <ADC_u8StartConversionSynch+0xea>
		}
		else
		{
			/* Loop is broken because flag is raised */
			/*clear the conversion complete flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
     fc0:	a6 e2       	ldi	r26, 0x26	; 38
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e6 e2       	ldi	r30, 0x26	; 38
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	80 61       	ori	r24, 0x10	; 16
     fcc:	8c 93       	st	X, r24
			/*Return the reading*/
#if Resolution == _8_Bits
			*Copy_pu8Reading = ADCH;

#elif Resolution == _10_Bits
			*Copy_pu8Reading =  ADC;
     fce:	e4 e2       	ldi	r30, 0x24	; 36
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	91 81       	ldd	r25, Z+1	; 0x01
     fd6:	ef 81       	ldd	r30, Y+7	; 0x07
     fd8:	f8 85       	ldd	r31, Y+8	; 0x08
     fda:	80 83       	st	Z, r24

#endif

			/*ADC is finished, return it to IDLE*/
			ADC_u8BusyState= IDLE;
     fdc:	10 92 96 01 	sts	0x0196, r1
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <ADC_u8StartConversionSynch+0xea>
		}
	}
	else
	{
		Local_u8ErrorState= BUSY;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe8:	28 96       	adiw	r28, 0x08	; 8
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u8* Copy_pu8Reading, void(*Copy_pvNotificationFunc)(void))
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <ADC_u8StartConversionAsynch+0x6>
    1000:	00 d0       	rcall	.+0      	; 0x1002 <ADC_u8StartConversionAsynch+0x8>
    1002:	00 d0       	rcall	.+0      	; 0x1004 <ADC_u8StartConversionAsynch+0xa>
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	8a 83       	std	Y+2, r24	; 0x02
    100a:	7c 83       	std	Y+4, r23	; 0x04
    100c:	6b 83       	std	Y+3, r22	; 0x03
    100e:	5e 83       	std	Y+6, r21	; 0x06
    1010:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_uErrorState=OK;
    1012:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState== IDLE)
    1014:	80 91 96 01 	lds	r24, 0x0196
    1018:	88 23       	and	r24, r24
    101a:	d1 f5       	brne	.+116    	; 0x1090 <ADC_u8StartConversionAsynch+0x96>
	{
		if((Copy_pu8Reading == NULL) || (Copy_pvNotificationFunc == NULL))
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	00 97       	sbiw	r24, 0x00	; 0
    1022:	21 f0       	breq	.+8      	; 0x102c <ADC_u8StartConversionAsynch+0x32>
    1024:	8d 81       	ldd	r24, Y+5	; 0x05
    1026:	9e 81       	ldd	r25, Y+6	; 0x06
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	19 f4       	brne	.+6      	; 0x1032 <ADC_u8StartConversionAsynch+0x38>
		{
			Local_uErrorState= NULL_POINTER;
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	31 c0       	rjmp	.+98     	; 0x1094 <ADC_u8StartConversionAsynch+0x9a>
		}
		else
		{
			/*make ADC busy in order not to work until being idle*/
			ADC_u8BusyState= BUSY;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	80 93 96 01 	sts	0x0196, r24

			/*Make ISR Source : Chain Asynchronous*/
			ADC_u8ISRSource = SingleChannelAsynch;
    1038:	10 92 98 01 	sts	0x0198, r1


			/*Initialize the reading variable globally*/
			ADC_pu8Reading = Copy_pu8Reading;
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	90 93 8d 01 	sts	0x018D, r25
    1044:	80 93 8c 01 	sts	0x018C, r24

			/*Initialize the callback notification function globally*/
			ADC_pvCallBackNotificationFunc= Copy_pvNotificationFunc;
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	9e 81       	ldd	r25, Y+6	; 0x06
    104c:	90 93 8f 01 	sts	0x018F, r25
    1050:	80 93 8e 01 	sts	0x018E, r24

			/*Clear the MUX bits in ADMUX register*/
			ADMUX &= 0b11100000;
    1054:	a7 e2       	ldi	r26, 0x27	; 39
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e7 e2       	ldi	r30, 0x27	; 39
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	80 7e       	andi	r24, 0xE0	; 224
    1060:	8c 93       	st	X, r24

			/*Set the required channel into the MUX bits*/
			ADMUX|= Copy_u8Channel;
    1062:	a7 e2       	ldi	r26, 0x27	; 39
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e7 e2       	ldi	r30, 0x27	; 39
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	90 81       	ld	r25, Z
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	89 2b       	or	r24, r25
    1070:	8c 93       	st	X, r24

			/*Start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    1072:	a6 e2       	ldi	r26, 0x26	; 38
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e6 e2       	ldi	r30, 0x26	; 38
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	80 64       	ori	r24, 0x40	; 64
    107e:	8c 93       	st	X, r24

			/*ADC interrupt enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
    1080:	a6 e2       	ldi	r26, 0x26	; 38
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e6 e2       	ldi	r30, 0x26	; 38
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	88 60       	ori	r24, 0x08	; 8
    108c:	8c 93       	st	X, r24
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <ADC_u8StartConversionAsynch+0x9a>
		}
	}
	else
	{
		Local_uErrorState= BUSY;
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_uErrorState;
    1094:	89 81       	ldd	r24, Y+1	; 0x01
}
    1096:	26 96       	adiw	r28, 0x06	; 6
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <ADC_u8StartChainAsynch>:

u8 ADC_u8StartChainAsynch(Chain_t * Copy_Chain)
{
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <ADC_u8StartChainAsynch+0x6>
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <ADC_u8StartChainAsynch+0x8>
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	9b 83       	std	Y+3, r25	; 0x03
    10b6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    10b8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Chain == NULL)
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	9b 81       	ldd	r25, Y+3	; 0x03
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	29 f4       	brne	.+10     	; 0x10cc <ADC_u8StartChainAsynch+0x24>
	{
		return Local_u8ErrorState = NULL_POINTER;
    10c2:	82 e0       	ldi	r24, 0x02	; 2
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	8c 83       	std	Y+4, r24	; 0x04
    10ca:	5a c0       	rjmp	.+180    	; 0x1180 <ADC_u8StartChainAsynch+0xd8>
	}
	else
	{
		if(ADC_u8BusyState == IDLE)
    10cc:	80 91 96 01 	lds	r24, 0x0196
    10d0:	88 23       	and	r24, r24
    10d2:	21 f4       	brne	.+8      	; 0x10dc <ADC_u8StartChainAsynch+0x34>
		{
			ADC_u8BusyState = BUSY;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	80 93 96 01 	sts	0x0196, r24
    10da:	50 c0       	rjmp	.+160    	; 0x117c <ADC_u8StartChainAsynch+0xd4>
		}
		else
		{
			/*ADC is now busy*/
			Local_u8ErrorState = BUSY;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	89 83       	std	Y+1, r24	; 0x01

			/*MakIe ISR Source: Single channel asynchronous*/
			ADC_u8ISRSource = ChainAsynch;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	80 93 98 01 	sts	0x0198, r24

			/*Initialize Chain channel Array*/
			ADC_pu8ChainChannelArr = Copy_Chain->Channel;
    10e6:	ea 81       	ldd	r30, Y+2	; 0x02
    10e8:	fb 81       	ldd	r31, Y+3	; 0x03
    10ea:	80 81       	ld	r24, Z
    10ec:	91 81       	ldd	r25, Z+1	; 0x01
    10ee:	90 93 91 01 	sts	0x0191, r25
    10f2:	80 93 90 01 	sts	0x0190, r24

			/*Initialize Result Array*/
			ADC_pu16ChainResultArr = Copy_Chain->Result;
    10f6:	ea 81       	ldd	r30, Y+2	; 0x02
    10f8:	fb 81       	ldd	r31, Y+3	; 0x03
    10fa:	82 81       	ldd	r24, Z+2	; 0x02
    10fc:	93 81       	ldd	r25, Z+3	; 0x03
    10fe:	90 93 95 01 	sts	0x0195, r25
    1102:	80 93 94 01 	sts	0x0194, r24

			/*Initialize Chain Size*/
			ADC_pu8Size = Copy_Chain->Size;
    1106:	ea 81       	ldd	r30, Y+2	; 0x02
    1108:	fb 81       	ldd	r31, Y+3	; 0x03
    110a:	84 81       	ldd	r24, Z+4	; 0x04
    110c:	88 2f       	mov	r24, r24
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	90 93 93 01 	sts	0x0193, r25
    1114:	80 93 92 01 	sts	0x0192, r24

			/*Initialize Notification function*/
			ADC_pvCallBackNotificationFunc = Copy_Chain->NotificationFunc;
    1118:	ea 81       	ldd	r30, Y+2	; 0x02
    111a:	fb 81       	ldd	r31, Y+3	; 0x03
    111c:	85 81       	ldd	r24, Z+5	; 0x05
    111e:	96 81       	ldd	r25, Z+6	; 0x06
    1120:	90 93 8f 01 	sts	0x018F, r25
    1124:	80 93 8e 01 	sts	0x018E, r24

			/*Initialize current conversion Index*/
			ADC_u8ChainConversionIndex = 0;
    1128:	10 92 97 01 	sts	0x0197, r1

			/*Clear the MUX bits in ADMUX register*/
			ADMUX &= 0b11100000;
    112c:	a7 e2       	ldi	r26, 0x27	; 39
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e7 e2       	ldi	r30, 0x27	; 39
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	80 7e       	andi	r24, 0xE0	; 224
    1138:	8c 93       	st	X, r24

			/*Set the first Channel into the MUX bits*/
			ADMUX|= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
    113a:	a7 e2       	ldi	r26, 0x27	; 39
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e7 e2       	ldi	r30, 0x27	; 39
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	40 81       	ld	r20, Z
    1144:	20 91 90 01 	lds	r18, 0x0190
    1148:	30 91 91 01 	lds	r19, 0x0191
    114c:	80 91 97 01 	lds	r24, 0x0197
    1150:	88 2f       	mov	r24, r24
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	f9 01       	movw	r30, r18
    1156:	e8 0f       	add	r30, r24
    1158:	f9 1f       	adc	r31, r25
    115a:	80 81       	ld	r24, Z
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24

			/*Start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    1160:	a6 e2       	ldi	r26, 0x26	; 38
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e6 e2       	ldi	r30, 0x26	; 38
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	80 64       	ori	r24, 0x40	; 64
    116c:	8c 93       	st	X, r24

			/*ADC interrupt enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
    116e:	a6 e2       	ldi	r26, 0x26	; 38
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e6 e2       	ldi	r30, 0x26	; 38
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	88 60       	ori	r24, 0x08	; 8
    117a:	8c 93       	st	X, r24
		}

	}

	return Local_u8ErrorState;
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	8c 83       	std	Y+4, r24	; 0x04
    1180:	8c 81       	ldd	r24, Y+4	; 0x04

}
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <__vector_16>:

void __vector_16 (void)  __attribute__((signal));
void __vector_16 (void)
{
    1190:	1f 92       	push	r1
    1192:	0f 92       	push	r0
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	0f 92       	push	r0
    1198:	11 24       	eor	r1, r1
    119a:	2f 93       	push	r18
    119c:	3f 93       	push	r19
    119e:	4f 93       	push	r20
    11a0:	5f 93       	push	r21
    11a2:	6f 93       	push	r22
    11a4:	7f 93       	push	r23
    11a6:	8f 93       	push	r24
    11a8:	9f 93       	push	r25
    11aa:	af 93       	push	r26
    11ac:	bf 93       	push	r27
    11ae:	ef 93       	push	r30
    11b0:	ff 93       	push	r31
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRSource == SingleChannelAsynch)
    11ba:	80 91 98 01 	lds	r24, 0x0198
    11be:	88 23       	and	r24, r24
    11c0:	c1 f4       	brne	.+48     	; 0x11f2 <__vector_16+0x62>
		/*Read ADC result*/
#if Resolution == _8_Bits
		*ADC_pu8Reading = ADCH;

#elif Resolution == _10_Bits
		*ADC_pu8Reading =  ADC;
    11c2:	a0 91 8c 01 	lds	r26, 0x018C
    11c6:	b0 91 8d 01 	lds	r27, 0x018D
    11ca:	e4 e2       	ldi	r30, 0x24	; 36
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	91 81       	ldd	r25, Z+1	; 0x01
    11d2:	8c 93       	st	X, r24

#endif

		/*Make ADC state be IDLE because it finished*/
		ADC_u8BusyState=IDLE;
    11d4:	10 92 96 01 	sts	0x0196, r1

		/*Invoke the callback notification function*/
		ADC_pvCallBackNotificationFunc();
    11d8:	e0 91 8e 01 	lds	r30, 0x018E
    11dc:	f0 91 8f 01 	lds	r31, 0x018F
    11e0:	09 95       	icall

		/*Disable ADC conversion complete interrupt*/
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
    11e2:	a6 e2       	ldi	r26, 0x26	; 38
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e6 e2       	ldi	r30, 0x26	; 38
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	87 7f       	andi	r24, 0xF7	; 247
    11ee:	8c 93       	st	X, r24
    11f0:	5a c0       	rjmp	.+180    	; 0x12a6 <__vector_16+0x116>
	}
	else if(ADC_u8ISRSource == ChainAsynch)
    11f2:	80 91 98 01 	lds	r24, 0x0198
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	09 f0       	breq	.+2      	; 0x11fc <__vector_16+0x6c>
    11fa:	55 c0       	rjmp	.+170    	; 0x12a6 <__vector_16+0x116>
		/*read the current conversion*/
#if Resolution == _8_Bits
		ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex] = ADCH;

#elif Resolution == _10_Bits
		ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex] = ADC;
    11fc:	20 91 94 01 	lds	r18, 0x0194
    1200:	30 91 95 01 	lds	r19, 0x0195
    1204:	80 91 97 01 	lds	r24, 0x0197
    1208:	88 2f       	mov	r24, r24
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	d9 01       	movw	r26, r18
    1212:	a8 0f       	add	r26, r24
    1214:	b9 1f       	adc	r27, r25
    1216:	e4 e2       	ldi	r30, 0x24	; 36
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	91 81       	ldd	r25, Z+1	; 0x01
    121e:	11 96       	adiw	r26, 0x01	; 1
    1220:	9c 93       	st	X, r25
    1222:	8e 93       	st	-X, r24
#endif

		/*Increment Chain index*/
		ADC_u8ChainConversionIndex++;
    1224:	80 91 97 01 	lds	r24, 0x0197
    1228:	8f 5f       	subi	r24, 0xFF	; 255
    122a:	80 93 97 01 	sts	0x0197, r24

		/*check chain is finished or not*/
		if(ADC_u8ChainConversionIndex == ADC_pu8Size)
    122e:	80 91 97 01 	lds	r24, 0x0197
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	9c 01       	movw	r18, r24
    1238:	80 91 92 01 	lds	r24, 0x0192
    123c:	90 91 93 01 	lds	r25, 0x0193
    1240:	28 17       	cp	r18, r24
    1242:	39 07       	cpc	r19, r25
    1244:	79 f4       	brne	.+30     	; 0x1264 <__vector_16+0xd4>
		{
			/*Chain is finished*/
			/*ADC is now IDLE*/
			ADC_u8BusyState = IDLE;
    1246:	10 92 96 01 	sts	0x0196, r1

			/*Invoke the callback notification function*/
			ADC_pvCallBackNotificationFunc();
    124a:	e0 91 8e 01 	lds	r30, 0x018E
    124e:	f0 91 8f 01 	lds	r31, 0x018F
    1252:	09 95       	icall

			/*Disable ADC conversion complete interrupt*/
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
    1254:	a6 e2       	ldi	r26, 0x26	; 38
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e6 e2       	ldi	r30, 0x26	; 38
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	87 7f       	andi	r24, 0xF7	; 247
    1260:	8c 93       	st	X, r24
    1262:	21 c0       	rjmp	.+66     	; 0x12a6 <__vector_16+0x116>
		}
		else
		{
			/*Chain is not finished*/
			/*Set new required channel*/
			ADMUX &= 0b11100000;
    1264:	a7 e2       	ldi	r26, 0x27	; 39
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e7 e2       	ldi	r30, 0x27	; 39
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	80 7e       	andi	r24, 0xE0	; 224
    1270:	8c 93       	st	X, r24
			ADMUX|= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
    1272:	a7 e2       	ldi	r26, 0x27	; 39
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e7 e2       	ldi	r30, 0x27	; 39
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	40 81       	ld	r20, Z
    127c:	20 91 90 01 	lds	r18, 0x0190
    1280:	30 91 91 01 	lds	r19, 0x0191
    1284:	80 91 97 01 	lds	r24, 0x0197
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	f9 01       	movw	r30, r18
    128e:	e8 0f       	add	r30, r24
    1290:	f9 1f       	adc	r31, r25
    1292:	80 81       	ld	r24, Z
    1294:	84 2b       	or	r24, r20
    1296:	8c 93       	st	X, r24

			/*Start new conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    1298:	a6 e2       	ldi	r26, 0x26	; 38
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e6 e2       	ldi	r30, 0x26	; 38
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	80 64       	ori	r24, 0x40	; 64
    12a4:	8c 93       	st	X, r24
		}

	}

}
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	ff 91       	pop	r31
    12ac:	ef 91       	pop	r30
    12ae:	bf 91       	pop	r27
    12b0:	af 91       	pop	r26
    12b2:	9f 91       	pop	r25
    12b4:	8f 91       	pop	r24
    12b6:	7f 91       	pop	r23
    12b8:	6f 91       	pop	r22
    12ba:	5f 91       	pop	r21
    12bc:	4f 91       	pop	r20
    12be:	3f 91       	pop	r19
    12c0:	2f 91       	pop	r18
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	0f 90       	pop	r0
    12c8:	1f 90       	pop	r1
    12ca:	18 95       	reti

000012cc <CLCD_voidSendCommand>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	c3 56       	subi	r28, 0x63	; 99
    12da:	d0 40       	sbci	r29, 0x00	; 0
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	fe 01       	movw	r30, r28
    12e8:	ed 59       	subi	r30, 0x9D	; 157
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	80 83       	st	Z, r24
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_u8PIN_LOW); /* Instruction Mode RS=0 */
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	40 e0       	ldi	r20, 0x00	; 0
    12f4:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_u8PIN_LOW); /* Instruction Mode RW=0 */
    12f8:	82 e0       	ldi	r24, 0x02	; 2
    12fa:	61 e0       	ldi	r22, 0x01	; 1
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    1302:	fe 01       	movw	r30, r28
    1304:	e1 5a       	subi	r30, 0xA1	; 161
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	a0 e8       	ldi	r26, 0x80	; 128
    130e:	bf e3       	ldi	r27, 0x3F	; 63
    1310:	80 83       	st	Z, r24
    1312:	91 83       	std	Z+1, r25	; 0x01
    1314:	a2 83       	std	Z+2, r26	; 0x02
    1316:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1318:	8e 01       	movw	r16, r28
    131a:	05 5a       	subi	r16, 0xA5	; 165
    131c:	1f 4f       	sbci	r17, 0xFF	; 255
    131e:	fe 01       	movw	r30, r28
    1320:	e1 5a       	subi	r30, 0xA1	; 161
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	60 81       	ld	r22, Z
    1326:	71 81       	ldd	r23, Z+1	; 0x01
    1328:	82 81       	ldd	r24, Z+2	; 0x02
    132a:	93 81       	ldd	r25, Z+3	; 0x03
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	4a ef       	ldi	r20, 0xFA	; 250
    1332:	54 e4       	ldi	r21, 0x44	; 68
    1334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	f8 01       	movw	r30, r16
    133e:	80 83       	st	Z, r24
    1340:	91 83       	std	Z+1, r25	; 0x01
    1342:	a2 83       	std	Z+2, r26	; 0x02
    1344:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1346:	fe 01       	movw	r30, r28
    1348:	e5 5a       	subi	r30, 0xA5	; 165
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	60 81       	ld	r22, Z
    134e:	71 81       	ldd	r23, Z+1	; 0x01
    1350:	82 81       	ldd	r24, Z+2	; 0x02
    1352:	93 81       	ldd	r25, Z+3	; 0x03
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e8       	ldi	r20, 0x80	; 128
    135a:	5f e3       	ldi	r21, 0x3F	; 63
    135c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1360:	88 23       	and	r24, r24
    1362:	44 f4       	brge	.+16     	; 0x1374 <CLCD_voidSendCommand+0xa8>
		__ticks = 1;
    1364:	fe 01       	movw	r30, r28
    1366:	e7 5a       	subi	r30, 0xA7	; 167
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	91 83       	std	Z+1, r25	; 0x01
    1370:	80 83       	st	Z, r24
    1372:	64 c0       	rjmp	.+200    	; 0x143c <CLCD_voidSendCommand+0x170>
	else if (__tmp > 65535)
    1374:	fe 01       	movw	r30, r28
    1376:	e5 5a       	subi	r30, 0xA5	; 165
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	60 81       	ld	r22, Z
    137c:	71 81       	ldd	r23, Z+1	; 0x01
    137e:	82 81       	ldd	r24, Z+2	; 0x02
    1380:	93 81       	ldd	r25, Z+3	; 0x03
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	3f ef       	ldi	r19, 0xFF	; 255
    1386:	4f e7       	ldi	r20, 0x7F	; 127
    1388:	57 e4       	ldi	r21, 0x47	; 71
    138a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    138e:	18 16       	cp	r1, r24
    1390:	0c f0       	brlt	.+2      	; 0x1394 <CLCD_voidSendCommand+0xc8>
    1392:	43 c0       	rjmp	.+134    	; 0x141a <CLCD_voidSendCommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1394:	fe 01       	movw	r30, r28
    1396:	e1 5a       	subi	r30, 0xA1	; 161
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	60 81       	ld	r22, Z
    139c:	71 81       	ldd	r23, Z+1	; 0x01
    139e:	82 81       	ldd	r24, Z+2	; 0x02
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e2       	ldi	r20, 0x20	; 32
    13a8:	51 e4       	ldi	r21, 0x41	; 65
    13aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	8e 01       	movw	r16, r28
    13b4:	07 5a       	subi	r16, 0xA7	; 167
    13b6:	1f 4f       	sbci	r17, 0xFF	; 255
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	f8 01       	movw	r30, r16
    13c6:	91 83       	std	Z+1, r25	; 0x01
    13c8:	80 83       	st	Z, r24
    13ca:	1f c0       	rjmp	.+62     	; 0x140a <CLCD_voidSendCommand+0x13e>
    13cc:	fe 01       	movw	r30, r28
    13ce:	e9 5a       	subi	r30, 0xA9	; 169
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	88 ec       	ldi	r24, 0xC8	; 200
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	91 83       	std	Z+1, r25	; 0x01
    13d8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13da:	fe 01       	movw	r30, r28
    13dc:	e9 5a       	subi	r30, 0xA9	; 169
    13de:	ff 4f       	sbci	r31, 0xFF	; 255
    13e0:	80 81       	ld	r24, Z
    13e2:	91 81       	ldd	r25, Z+1	; 0x01
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <CLCD_voidSendCommand+0x118>
    13e8:	fe 01       	movw	r30, r28
    13ea:	e9 5a       	subi	r30, 0xA9	; 169
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	91 83       	std	Z+1, r25	; 0x01
    13f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f2:	de 01       	movw	r26, r28
    13f4:	a7 5a       	subi	r26, 0xA7	; 167
    13f6:	bf 4f       	sbci	r27, 0xFF	; 255
    13f8:	fe 01       	movw	r30, r28
    13fa:	e7 5a       	subi	r30, 0xA7	; 167
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	80 81       	ld	r24, Z
    1400:	91 81       	ldd	r25, Z+1	; 0x01
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	11 96       	adiw	r26, 0x01	; 1
    1406:	9c 93       	st	X, r25
    1408:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140a:	fe 01       	movw	r30, r28
    140c:	e7 5a       	subi	r30, 0xA7	; 167
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	80 81       	ld	r24, Z
    1412:	91 81       	ldd	r25, Z+1	; 0x01
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	d1 f6       	brne	.-76     	; 0x13cc <CLCD_voidSendCommand+0x100>
    1418:	27 c0       	rjmp	.+78     	; 0x1468 <CLCD_voidSendCommand+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141a:	8e 01       	movw	r16, r28
    141c:	07 5a       	subi	r16, 0xA7	; 167
    141e:	1f 4f       	sbci	r17, 0xFF	; 255
    1420:	fe 01       	movw	r30, r28
    1422:	e5 5a       	subi	r30, 0xA5	; 165
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	60 81       	ld	r22, Z
    1428:	71 81       	ldd	r23, Z+1	; 0x01
    142a:	82 81       	ldd	r24, Z+2	; 0x02
    142c:	93 81       	ldd	r25, Z+3	; 0x03
    142e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	f8 01       	movw	r30, r16
    1438:	91 83       	std	Z+1, r25	; 0x01
    143a:	80 83       	st	Z, r24
    143c:	de 01       	movw	r26, r28
    143e:	ab 5a       	subi	r26, 0xAB	; 171
    1440:	bf 4f       	sbci	r27, 0xFF	; 255
    1442:	fe 01       	movw	r30, r28
    1444:	e7 5a       	subi	r30, 0xA7	; 167
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	80 81       	ld	r24, Z
    144a:	91 81       	ldd	r25, Z+1	; 0x01
    144c:	8d 93       	st	X+, r24
    144e:	9c 93       	st	X, r25
    1450:	fe 01       	movw	r30, r28
    1452:	eb 5a       	subi	r30, 0xAB	; 171
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	80 81       	ld	r24, Z
    1458:	91 81       	ldd	r25, Z+1	; 0x01
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <CLCD_voidSendCommand+0x18e>
    145e:	fe 01       	movw	r30, r28
    1460:	eb 5a       	subi	r30, 0xAB	; 171
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	91 83       	std	Z+1, r25	; 0x01
    1466:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Enable LCD E=1 */
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	66 e0       	ldi	r22, 0x06	; 6
    146c:	41 e0       	ldi	r20, 0x01	; 1
    146e:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    1472:	fe 01       	movw	r30, r28
    1474:	ef 5a       	subi	r30, 0xAF	; 175
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	a0 e8       	ldi	r26, 0x80	; 128
    147e:	bf e3       	ldi	r27, 0x3F	; 63
    1480:	80 83       	st	Z, r24
    1482:	91 83       	std	Z+1, r25	; 0x01
    1484:	a2 83       	std	Z+2, r26	; 0x02
    1486:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1488:	8e 01       	movw	r16, r28
    148a:	03 5b       	subi	r16, 0xB3	; 179
    148c:	1f 4f       	sbci	r17, 0xFF	; 255
    148e:	fe 01       	movw	r30, r28
    1490:	ef 5a       	subi	r30, 0xAF	; 175
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	60 81       	ld	r22, Z
    1496:	71 81       	ldd	r23, Z+1	; 0x01
    1498:	82 81       	ldd	r24, Z+2	; 0x02
    149a:	93 81       	ldd	r25, Z+3	; 0x03
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	4a ef       	ldi	r20, 0xFA	; 250
    14a2:	54 e4       	ldi	r21, 0x44	; 68
    14a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	f8 01       	movw	r30, r16
    14ae:	80 83       	st	Z, r24
    14b0:	91 83       	std	Z+1, r25	; 0x01
    14b2:	a2 83       	std	Z+2, r26	; 0x02
    14b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14b6:	fe 01       	movw	r30, r28
    14b8:	e3 5b       	subi	r30, 0xB3	; 179
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	60 81       	ld	r22, Z
    14be:	71 81       	ldd	r23, Z+1	; 0x01
    14c0:	82 81       	ldd	r24, Z+2	; 0x02
    14c2:	93 81       	ldd	r25, Z+3	; 0x03
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	40 e8       	ldi	r20, 0x80	; 128
    14ca:	5f e3       	ldi	r21, 0x3F	; 63
    14cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14d0:	88 23       	and	r24, r24
    14d2:	44 f4       	brge	.+16     	; 0x14e4 <CLCD_voidSendCommand+0x218>
		__ticks = 1;
    14d4:	fe 01       	movw	r30, r28
    14d6:	e5 5b       	subi	r30, 0xB5	; 181
    14d8:	ff 4f       	sbci	r31, 0xFF	; 255
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	91 83       	std	Z+1, r25	; 0x01
    14e0:	80 83       	st	Z, r24
    14e2:	64 c0       	rjmp	.+200    	; 0x15ac <CLCD_voidSendCommand+0x2e0>
	else if (__tmp > 65535)
    14e4:	fe 01       	movw	r30, r28
    14e6:	e3 5b       	subi	r30, 0xB3	; 179
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	60 81       	ld	r22, Z
    14ec:	71 81       	ldd	r23, Z+1	; 0x01
    14ee:	82 81       	ldd	r24, Z+2	; 0x02
    14f0:	93 81       	ldd	r25, Z+3	; 0x03
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	3f ef       	ldi	r19, 0xFF	; 255
    14f6:	4f e7       	ldi	r20, 0x7F	; 127
    14f8:	57 e4       	ldi	r21, 0x47	; 71
    14fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14fe:	18 16       	cp	r1, r24
    1500:	0c f0       	brlt	.+2      	; 0x1504 <CLCD_voidSendCommand+0x238>
    1502:	43 c0       	rjmp	.+134    	; 0x158a <CLCD_voidSendCommand+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1504:	fe 01       	movw	r30, r28
    1506:	ef 5a       	subi	r30, 0xAF	; 175
    1508:	ff 4f       	sbci	r31, 0xFF	; 255
    150a:	60 81       	ld	r22, Z
    150c:	71 81       	ldd	r23, Z+1	; 0x01
    150e:	82 81       	ldd	r24, Z+2	; 0x02
    1510:	93 81       	ldd	r25, Z+3	; 0x03
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e2       	ldi	r20, 0x20	; 32
    1518:	51 e4       	ldi	r21, 0x41	; 65
    151a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	8e 01       	movw	r16, r28
    1524:	05 5b       	subi	r16, 0xB5	; 181
    1526:	1f 4f       	sbci	r17, 0xFF	; 255
    1528:	bc 01       	movw	r22, r24
    152a:	cd 01       	movw	r24, r26
    152c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	f8 01       	movw	r30, r16
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	80 83       	st	Z, r24
    153a:	1f c0       	rjmp	.+62     	; 0x157a <CLCD_voidSendCommand+0x2ae>
    153c:	fe 01       	movw	r30, r28
    153e:	e7 5b       	subi	r30, 0xB7	; 183
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	88 ec       	ldi	r24, 0xC8	; 200
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	80 83       	st	Z, r24
    154a:	fe 01       	movw	r30, r28
    154c:	e7 5b       	subi	r30, 0xB7	; 183
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	80 81       	ld	r24, Z
    1552:	91 81       	ldd	r25, Z+1	; 0x01
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	f1 f7       	brne	.-4      	; 0x1554 <CLCD_voidSendCommand+0x288>
    1558:	fe 01       	movw	r30, r28
    155a:	e7 5b       	subi	r30, 0xB7	; 183
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	91 83       	std	Z+1, r25	; 0x01
    1560:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1562:	de 01       	movw	r26, r28
    1564:	a5 5b       	subi	r26, 0xB5	; 181
    1566:	bf 4f       	sbci	r27, 0xFF	; 255
    1568:	fe 01       	movw	r30, r28
    156a:	e5 5b       	subi	r30, 0xB5	; 181
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	80 81       	ld	r24, Z
    1570:	91 81       	ldd	r25, Z+1	; 0x01
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	11 96       	adiw	r26, 0x01	; 1
    1576:	9c 93       	st	X, r25
    1578:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157a:	fe 01       	movw	r30, r28
    157c:	e5 5b       	subi	r30, 0xB5	; 181
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	80 81       	ld	r24, Z
    1582:	91 81       	ldd	r25, Z+1	; 0x01
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	d1 f6       	brne	.-76     	; 0x153c <CLCD_voidSendCommand+0x270>
    1588:	27 c0       	rjmp	.+78     	; 0x15d8 <CLCD_voidSendCommand+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158a:	8e 01       	movw	r16, r28
    158c:	05 5b       	subi	r16, 0xB5	; 181
    158e:	1f 4f       	sbci	r17, 0xFF	; 255
    1590:	fe 01       	movw	r30, r28
    1592:	e3 5b       	subi	r30, 0xB3	; 179
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	60 81       	ld	r22, Z
    1598:	71 81       	ldd	r23, Z+1	; 0x01
    159a:	82 81       	ldd	r24, Z+2	; 0x02
    159c:	93 81       	ldd	r25, Z+3	; 0x03
    159e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	f8 01       	movw	r30, r16
    15a8:	91 83       	std	Z+1, r25	; 0x01
    15aa:	80 83       	st	Z, r24
    15ac:	de 01       	movw	r26, r28
    15ae:	a9 5b       	subi	r26, 0xB9	; 185
    15b0:	bf 4f       	sbci	r27, 0xFF	; 255
    15b2:	fe 01       	movw	r30, r28
    15b4:	e5 5b       	subi	r30, 0xB5	; 181
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	80 81       	ld	r24, Z
    15ba:	91 81       	ldd	r25, Z+1	; 0x01
    15bc:	8d 93       	st	X+, r24
    15be:	9c 93       	st	X, r25
    15c0:	fe 01       	movw	r30, r28
    15c2:	e9 5b       	subi	r30, 0xB9	; 185
    15c4:	ff 4f       	sbci	r31, 0xFF	; 255
    15c6:	80 81       	ld	r24, Z
    15c8:	91 81       	ldd	r25, Z+1	; 0x01
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <CLCD_voidSendCommand+0x2fe>
    15ce:	fe 01       	movw	r30, r28
    15d0:	e9 5b       	subi	r30, 0xB9	; 185
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	91 83       	std	Z+1, r25	; 0x01
    15d6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */



#if (CLCD_DATA_BITS_MODE == 4)
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Command, 4));
    15d8:	fe 01       	movw	r30, r28
    15da:	ed 59       	subi	r30, 0x9D	; 157
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	80 81       	ld	r24, Z
    15e0:	82 95       	swap	r24
    15e2:	8f 70       	andi	r24, 0x0F	; 15
    15e4:	98 2f       	mov	r25, r24
    15e6:	91 70       	andi	r25, 0x01	; 1
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	49 2f       	mov	r20, r25
    15ee:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Command, 5));
    15f2:	fe 01       	movw	r30, r28
    15f4:	ed 59       	subi	r30, 0x9D	; 157
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	80 81       	ld	r24, Z
    15fa:	82 95       	swap	r24
    15fc:	86 95       	lsr	r24
    15fe:	87 70       	andi	r24, 0x07	; 7
    1600:	98 2f       	mov	r25, r24
    1602:	91 70       	andi	r25, 0x01	; 1
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	61 e0       	ldi	r22, 0x01	; 1
    1608:	49 2f       	mov	r20, r25
    160a:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Command, 6));
    160e:	fe 01       	movw	r30, r28
    1610:	ed 59       	subi	r30, 0x9D	; 157
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	80 81       	ld	r24, Z
    1616:	82 95       	swap	r24
    1618:	86 95       	lsr	r24
    161a:	86 95       	lsr	r24
    161c:	83 70       	andi	r24, 0x03	; 3
    161e:	98 2f       	mov	r25, r24
    1620:	91 70       	andi	r25, 0x01	; 1
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	62 e0       	ldi	r22, 0x02	; 2
    1626:	49 2f       	mov	r20, r25
    1628:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Command, 7));
    162c:	fe 01       	movw	r30, r28
    162e:	ed 59       	subi	r30, 0x9D	; 157
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
    1632:	80 81       	ld	r24, Z
    1634:	98 2f       	mov	r25, r24
    1636:	99 1f       	adc	r25, r25
    1638:	99 27       	eor	r25, r25
    163a:	99 1f       	adc	r25, r25
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	63 e0       	ldi	r22, 0x03	; 3
    1640:	49 2f       	mov	r20, r25
    1642:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    1646:	fe 01       	movw	r30, r28
    1648:	ed 5b       	subi	r30, 0xBD	; 189
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	a0 e8       	ldi	r26, 0x80	; 128
    1652:	bf e3       	ldi	r27, 0x3F	; 63
    1654:	80 83       	st	Z, r24
    1656:	91 83       	std	Z+1, r25	; 0x01
    1658:	a2 83       	std	Z+2, r26	; 0x02
    165a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    165c:	8e 01       	movw	r16, r28
    165e:	01 5c       	subi	r16, 0xC1	; 193
    1660:	1f 4f       	sbci	r17, 0xFF	; 255
    1662:	fe 01       	movw	r30, r28
    1664:	ed 5b       	subi	r30, 0xBD	; 189
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	60 81       	ld	r22, Z
    166a:	71 81       	ldd	r23, Z+1	; 0x01
    166c:	82 81       	ldd	r24, Z+2	; 0x02
    166e:	93 81       	ldd	r25, Z+3	; 0x03
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	4a ef       	ldi	r20, 0xFA	; 250
    1676:	54 e4       	ldi	r21, 0x44	; 68
    1678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	f8 01       	movw	r30, r16
    1682:	80 83       	st	Z, r24
    1684:	91 83       	std	Z+1, r25	; 0x01
    1686:	a2 83       	std	Z+2, r26	; 0x02
    1688:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    168a:	fe 01       	movw	r30, r28
    168c:	ff 96       	adiw	r30, 0x3f	; 63
    168e:	60 81       	ld	r22, Z
    1690:	71 81       	ldd	r23, Z+1	; 0x01
    1692:	82 81       	ldd	r24, Z+2	; 0x02
    1694:	93 81       	ldd	r25, Z+3	; 0x03
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e8       	ldi	r20, 0x80	; 128
    169c:	5f e3       	ldi	r21, 0x3F	; 63
    169e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16a2:	88 23       	and	r24, r24
    16a4:	2c f4       	brge	.+10     	; 0x16b0 <CLCD_voidSendCommand+0x3e4>
		__ticks = 1;
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	9e af       	std	Y+62, r25	; 0x3e
    16ac:	8d af       	std	Y+61, r24	; 0x3d
    16ae:	46 c0       	rjmp	.+140    	; 0x173c <CLCD_voidSendCommand+0x470>
	else if (__tmp > 65535)
    16b0:	fe 01       	movw	r30, r28
    16b2:	ff 96       	adiw	r30, 0x3f	; 63
    16b4:	60 81       	ld	r22, Z
    16b6:	71 81       	ldd	r23, Z+1	; 0x01
    16b8:	82 81       	ldd	r24, Z+2	; 0x02
    16ba:	93 81       	ldd	r25, Z+3	; 0x03
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	3f ef       	ldi	r19, 0xFF	; 255
    16c0:	4f e7       	ldi	r20, 0x7F	; 127
    16c2:	57 e4       	ldi	r21, 0x47	; 71
    16c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16c8:	18 16       	cp	r1, r24
    16ca:	64 f5       	brge	.+88     	; 0x1724 <CLCD_voidSendCommand+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16cc:	fe 01       	movw	r30, r28
    16ce:	ed 5b       	subi	r30, 0xBD	; 189
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	60 81       	ld	r22, Z
    16d4:	71 81       	ldd	r23, Z+1	; 0x01
    16d6:	82 81       	ldd	r24, Z+2	; 0x02
    16d8:	93 81       	ldd	r25, Z+3	; 0x03
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e2       	ldi	r20, 0x20	; 32
    16e0:	51 e4       	ldi	r21, 0x41	; 65
    16e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	bc 01       	movw	r22, r24
    16ec:	cd 01       	movw	r24, r26
    16ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	9e af       	std	Y+62, r25	; 0x3e
    16f8:	8d af       	std	Y+61, r24	; 0x3d
    16fa:	0f c0       	rjmp	.+30     	; 0x171a <CLCD_voidSendCommand+0x44e>
    16fc:	88 ec       	ldi	r24, 0xC8	; 200
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	9c af       	std	Y+60, r25	; 0x3c
    1702:	8b af       	std	Y+59, r24	; 0x3b
    1704:	8b ad       	ldd	r24, Y+59	; 0x3b
    1706:	9c ad       	ldd	r25, Y+60	; 0x3c
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <CLCD_voidSendCommand+0x43c>
    170c:	9c af       	std	Y+60, r25	; 0x3c
    170e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1710:	8d ad       	ldd	r24, Y+61	; 0x3d
    1712:	9e ad       	ldd	r25, Y+62	; 0x3e
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	9e af       	std	Y+62, r25	; 0x3e
    1718:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171a:	8d ad       	ldd	r24, Y+61	; 0x3d
    171c:	9e ad       	ldd	r25, Y+62	; 0x3e
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	69 f7       	brne	.-38     	; 0x16fc <CLCD_voidSendCommand+0x430>
    1722:	16 c0       	rjmp	.+44     	; 0x1750 <CLCD_voidSendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1724:	fe 01       	movw	r30, r28
    1726:	ff 96       	adiw	r30, 0x3f	; 63
    1728:	60 81       	ld	r22, Z
    172a:	71 81       	ldd	r23, Z+1	; 0x01
    172c:	82 81       	ldd	r24, Z+2	; 0x02
    172e:	93 81       	ldd	r25, Z+3	; 0x03
    1730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	9e af       	std	Y+62, r25	; 0x3e
    173a:	8d af       	std	Y+61, r24	; 0x3d
    173c:	8d ad       	ldd	r24, Y+61	; 0x3d
    173e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1740:	9a af       	std	Y+58, r25	; 0x3a
    1742:	89 af       	std	Y+57, r24	; 0x39
    1744:	89 ad       	ldd	r24, Y+57	; 0x39
    1746:	9a ad       	ldd	r25, Y+58	; 0x3a
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <CLCD_voidSendCommand+0x47c>
    174c:	9a af       	std	Y+58, r25	; 0x3a
    174e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=0 */
    1750:	82 e0       	ldi	r24, 0x02	; 2
    1752:	66 e0       	ldi	r22, 0x06	; 6
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	a0 e8       	ldi	r26, 0x80	; 128
    1760:	bf e3       	ldi	r27, 0x3F	; 63
    1762:	8d ab       	std	Y+53, r24	; 0x35
    1764:	9e ab       	std	Y+54, r25	; 0x36
    1766:	af ab       	std	Y+55, r26	; 0x37
    1768:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176a:	6d a9       	ldd	r22, Y+53	; 0x35
    176c:	7e a9       	ldd	r23, Y+54	; 0x36
    176e:	8f a9       	ldd	r24, Y+55	; 0x37
    1770:	98 ad       	ldd	r25, Y+56	; 0x38
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	4a ef       	ldi	r20, 0xFA	; 250
    1778:	54 e4       	ldi	r21, 0x44	; 68
    177a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	89 ab       	std	Y+49, r24	; 0x31
    1784:	9a ab       	std	Y+50, r25	; 0x32
    1786:	ab ab       	std	Y+51, r26	; 0x33
    1788:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    178a:	69 a9       	ldd	r22, Y+49	; 0x31
    178c:	7a a9       	ldd	r23, Y+50	; 0x32
    178e:	8b a9       	ldd	r24, Y+51	; 0x33
    1790:	9c a9       	ldd	r25, Y+52	; 0x34
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	40 e8       	ldi	r20, 0x80	; 128
    1798:	5f e3       	ldi	r21, 0x3F	; 63
    179a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    179e:	88 23       	and	r24, r24
    17a0:	2c f4       	brge	.+10     	; 0x17ac <CLCD_voidSendCommand+0x4e0>
		__ticks = 1;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	98 ab       	std	Y+48, r25	; 0x30
    17a8:	8f a7       	std	Y+47, r24	; 0x2f
    17aa:	3f c0       	rjmp	.+126    	; 0x182a <CLCD_voidSendCommand+0x55e>
	else if (__tmp > 65535)
    17ac:	69 a9       	ldd	r22, Y+49	; 0x31
    17ae:	7a a9       	ldd	r23, Y+50	; 0x32
    17b0:	8b a9       	ldd	r24, Y+51	; 0x33
    17b2:	9c a9       	ldd	r25, Y+52	; 0x34
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	3f ef       	ldi	r19, 0xFF	; 255
    17b8:	4f e7       	ldi	r20, 0x7F	; 127
    17ba:	57 e4       	ldi	r21, 0x47	; 71
    17bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17c0:	18 16       	cp	r1, r24
    17c2:	4c f5       	brge	.+82     	; 0x1816 <CLCD_voidSendCommand+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c4:	6d a9       	ldd	r22, Y+53	; 0x35
    17c6:	7e a9       	ldd	r23, Y+54	; 0x36
    17c8:	8f a9       	ldd	r24, Y+55	; 0x37
    17ca:	98 ad       	ldd	r25, Y+56	; 0x38
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e2       	ldi	r20, 0x20	; 32
    17d2:	51 e4       	ldi	r21, 0x41	; 65
    17d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	bc 01       	movw	r22, r24
    17de:	cd 01       	movw	r24, r26
    17e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	98 ab       	std	Y+48, r25	; 0x30
    17ea:	8f a7       	std	Y+47, r24	; 0x2f
    17ec:	0f c0       	rjmp	.+30     	; 0x180c <CLCD_voidSendCommand+0x540>
    17ee:	88 ec       	ldi	r24, 0xC8	; 200
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	9e a7       	std	Y+46, r25	; 0x2e
    17f4:	8d a7       	std	Y+45, r24	; 0x2d
    17f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    17f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <CLCD_voidSendCommand+0x52e>
    17fe:	9e a7       	std	Y+46, r25	; 0x2e
    1800:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1802:	8f a5       	ldd	r24, Y+47	; 0x2f
    1804:	98 a9       	ldd	r25, Y+48	; 0x30
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	98 ab       	std	Y+48, r25	; 0x30
    180a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180c:	8f a5       	ldd	r24, Y+47	; 0x2f
    180e:	98 a9       	ldd	r25, Y+48	; 0x30
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	69 f7       	brne	.-38     	; 0x17ee <CLCD_voidSendCommand+0x522>
    1814:	14 c0       	rjmp	.+40     	; 0x183e <CLCD_voidSendCommand+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1816:	69 a9       	ldd	r22, Y+49	; 0x31
    1818:	7a a9       	ldd	r23, Y+50	; 0x32
    181a:	8b a9       	ldd	r24, Y+51	; 0x33
    181c:	9c a9       	ldd	r25, Y+52	; 0x34
    181e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	98 ab       	std	Y+48, r25	; 0x30
    1828:	8f a7       	std	Y+47, r24	; 0x2f
    182a:	8f a5       	ldd	r24, Y+47	; 0x2f
    182c:	98 a9       	ldd	r25, Y+48	; 0x30
    182e:	9c a7       	std	Y+44, r25	; 0x2c
    1830:	8b a7       	std	Y+43, r24	; 0x2b
    1832:	8b a5       	ldd	r24, Y+43	; 0x2b
    1834:	9c a5       	ldd	r25, Y+44	; 0x2c
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	f1 f7       	brne	.-4      	; 0x1836 <CLCD_voidSendCommand+0x56a>
    183a:	9c a7       	std	Y+44, r25	; 0x2c
    183c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Disable LCD E=1 */
    183e:	82 e0       	ldi	r24, 0x02	; 2
    1840:	66 e0       	ldi	r22, 0x06	; 6
    1842:	41 e0       	ldi	r20, 0x01	; 1
    1844:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	a0 e8       	ldi	r26, 0x80	; 128
    184e:	bf e3       	ldi	r27, 0x3F	; 63
    1850:	8f a3       	std	Y+39, r24	; 0x27
    1852:	98 a7       	std	Y+40, r25	; 0x28
    1854:	a9 a7       	std	Y+41, r26	; 0x29
    1856:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1858:	6f a1       	ldd	r22, Y+39	; 0x27
    185a:	78 a5       	ldd	r23, Y+40	; 0x28
    185c:	89 a5       	ldd	r24, Y+41	; 0x29
    185e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	4a ef       	ldi	r20, 0xFA	; 250
    1866:	54 e4       	ldi	r21, 0x44	; 68
    1868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	8b a3       	std	Y+35, r24	; 0x23
    1872:	9c a3       	std	Y+36, r25	; 0x24
    1874:	ad a3       	std	Y+37, r26	; 0x25
    1876:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1878:	6b a1       	ldd	r22, Y+35	; 0x23
    187a:	7c a1       	ldd	r23, Y+36	; 0x24
    187c:	8d a1       	ldd	r24, Y+37	; 0x25
    187e:	9e a1       	ldd	r25, Y+38	; 0x26
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e8       	ldi	r20, 0x80	; 128
    1886:	5f e3       	ldi	r21, 0x3F	; 63
    1888:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    188c:	88 23       	and	r24, r24
    188e:	2c f4       	brge	.+10     	; 0x189a <CLCD_voidSendCommand+0x5ce>
		__ticks = 1;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	9a a3       	std	Y+34, r25	; 0x22
    1896:	89 a3       	std	Y+33, r24	; 0x21
    1898:	3f c0       	rjmp	.+126    	; 0x1918 <CLCD_voidSendCommand+0x64c>
	else if (__tmp > 65535)
    189a:	6b a1       	ldd	r22, Y+35	; 0x23
    189c:	7c a1       	ldd	r23, Y+36	; 0x24
    189e:	8d a1       	ldd	r24, Y+37	; 0x25
    18a0:	9e a1       	ldd	r25, Y+38	; 0x26
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	3f ef       	ldi	r19, 0xFF	; 255
    18a6:	4f e7       	ldi	r20, 0x7F	; 127
    18a8:	57 e4       	ldi	r21, 0x47	; 71
    18aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18ae:	18 16       	cp	r1, r24
    18b0:	4c f5       	brge	.+82     	; 0x1904 <CLCD_voidSendCommand+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b2:	6f a1       	ldd	r22, Y+39	; 0x27
    18b4:	78 a5       	ldd	r23, Y+40	; 0x28
    18b6:	89 a5       	ldd	r24, Y+41	; 0x29
    18b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e2       	ldi	r20, 0x20	; 32
    18c0:	51 e4       	ldi	r21, 0x41	; 65
    18c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	bc 01       	movw	r22, r24
    18cc:	cd 01       	movw	r24, r26
    18ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	9a a3       	std	Y+34, r25	; 0x22
    18d8:	89 a3       	std	Y+33, r24	; 0x21
    18da:	0f c0       	rjmp	.+30     	; 0x18fa <CLCD_voidSendCommand+0x62e>
    18dc:	88 ec       	ldi	r24, 0xC8	; 200
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	98 a3       	std	Y+32, r25	; 0x20
    18e2:	8f 8f       	std	Y+31, r24	; 0x1f
    18e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18e6:	98 a1       	ldd	r25, Y+32	; 0x20
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <CLCD_voidSendCommand+0x61c>
    18ec:	98 a3       	std	Y+32, r25	; 0x20
    18ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f0:	89 a1       	ldd	r24, Y+33	; 0x21
    18f2:	9a a1       	ldd	r25, Y+34	; 0x22
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	9a a3       	std	Y+34, r25	; 0x22
    18f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fa:	89 a1       	ldd	r24, Y+33	; 0x21
    18fc:	9a a1       	ldd	r25, Y+34	; 0x22
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	69 f7       	brne	.-38     	; 0x18dc <CLCD_voidSendCommand+0x610>
    1902:	14 c0       	rjmp	.+40     	; 0x192c <CLCD_voidSendCommand+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1904:	6b a1       	ldd	r22, Y+35	; 0x23
    1906:	7c a1       	ldd	r23, Y+36	; 0x24
    1908:	8d a1       	ldd	r24, Y+37	; 0x25
    190a:	9e a1       	ldd	r25, Y+38	; 0x26
    190c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9a a3       	std	Y+34, r25	; 0x22
    1916:	89 a3       	std	Y+33, r24	; 0x21
    1918:	89 a1       	ldd	r24, Y+33	; 0x21
    191a:	9a a1       	ldd	r25, Y+34	; 0x22
    191c:	9e 8f       	std	Y+30, r25	; 0x1e
    191e:	8d 8f       	std	Y+29, r24	; 0x1d
    1920:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1922:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	f1 f7       	brne	.-4      	; 0x1924 <CLCD_voidSendCommand+0x658>
    1928:	9e 8f       	std	Y+30, r25	; 0x1e
    192a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Command, 0));
    192c:	fe 01       	movw	r30, r28
    192e:	ed 59       	subi	r30, 0x9D	; 157
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	80 81       	ld	r24, Z
    1934:	98 2f       	mov	r25, r24
    1936:	91 70       	andi	r25, 0x01	; 1
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	60 e0       	ldi	r22, 0x00	; 0
    193c:	49 2f       	mov	r20, r25
    193e:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Command, 1));
    1942:	fe 01       	movw	r30, r28
    1944:	ed 59       	subi	r30, 0x9D	; 157
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	80 81       	ld	r24, Z
    194a:	86 95       	lsr	r24
    194c:	98 2f       	mov	r25, r24
    194e:	91 70       	andi	r25, 0x01	; 1
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	61 e0       	ldi	r22, 0x01	; 1
    1954:	49 2f       	mov	r20, r25
    1956:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Command, 2));
    195a:	fe 01       	movw	r30, r28
    195c:	ed 59       	subi	r30, 0x9D	; 157
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	80 81       	ld	r24, Z
    1962:	86 95       	lsr	r24
    1964:	86 95       	lsr	r24
    1966:	98 2f       	mov	r25, r24
    1968:	91 70       	andi	r25, 0x01	; 1
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	62 e0       	ldi	r22, 0x02	; 2
    196e:	49 2f       	mov	r20, r25
    1970:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Command, 3));
    1974:	fe 01       	movw	r30, r28
    1976:	ed 59       	subi	r30, 0x9D	; 157
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	80 81       	ld	r24, Z
    197c:	86 95       	lsr	r24
    197e:	86 95       	lsr	r24
    1980:	86 95       	lsr	r24
    1982:	98 2f       	mov	r25, r24
    1984:	91 70       	andi	r25, 0x01	; 1
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	63 e0       	ldi	r22, 0x03	; 3
    198a:	49 2f       	mov	r20, r25
    198c:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a0 e8       	ldi	r26, 0x80	; 128
    1996:	bf e3       	ldi	r27, 0x3F	; 63
    1998:	89 8f       	std	Y+25, r24	; 0x19
    199a:	9a 8f       	std	Y+26, r25	; 0x1a
    199c:	ab 8f       	std	Y+27, r26	; 0x1b
    199e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a0:	69 8d       	ldd	r22, Y+25	; 0x19
    19a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	4a ef       	ldi	r20, 0xFA	; 250
    19ae:	54 e4       	ldi	r21, 0x44	; 68
    19b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	8d 8b       	std	Y+21, r24	; 0x15
    19ba:	9e 8b       	std	Y+22, r25	; 0x16
    19bc:	af 8b       	std	Y+23, r26	; 0x17
    19be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19c0:	6d 89       	ldd	r22, Y+21	; 0x15
    19c2:	7e 89       	ldd	r23, Y+22	; 0x16
    19c4:	8f 89       	ldd	r24, Y+23	; 0x17
    19c6:	98 8d       	ldd	r25, Y+24	; 0x18
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e8       	ldi	r20, 0x80	; 128
    19ce:	5f e3       	ldi	r21, 0x3F	; 63
    19d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19d4:	88 23       	and	r24, r24
    19d6:	2c f4       	brge	.+10     	; 0x19e2 <CLCD_voidSendCommand+0x716>
		__ticks = 1;
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	9c 8b       	std	Y+20, r25	; 0x14
    19de:	8b 8b       	std	Y+19, r24	; 0x13
    19e0:	3f c0       	rjmp	.+126    	; 0x1a60 <CLCD_voidSendCommand+0x794>
	else if (__tmp > 65535)
    19e2:	6d 89       	ldd	r22, Y+21	; 0x15
    19e4:	7e 89       	ldd	r23, Y+22	; 0x16
    19e6:	8f 89       	ldd	r24, Y+23	; 0x17
    19e8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	3f ef       	ldi	r19, 0xFF	; 255
    19ee:	4f e7       	ldi	r20, 0x7F	; 127
    19f0:	57 e4       	ldi	r21, 0x47	; 71
    19f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19f6:	18 16       	cp	r1, r24
    19f8:	4c f5       	brge	.+82     	; 0x1a4c <CLCD_voidSendCommand+0x780>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fa:	69 8d       	ldd	r22, Y+25	; 0x19
    19fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e2       	ldi	r20, 0x20	; 32
    1a08:	51 e4       	ldi	r21, 0x41	; 65
    1a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	bc 01       	movw	r22, r24
    1a14:	cd 01       	movw	r24, r26
    1a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	9c 8b       	std	Y+20, r25	; 0x14
    1a20:	8b 8b       	std	Y+19, r24	; 0x13
    1a22:	0f c0       	rjmp	.+30     	; 0x1a42 <CLCD_voidSendCommand+0x776>
    1a24:	88 ec       	ldi	r24, 0xC8	; 200
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	9a 8b       	std	Y+18, r25	; 0x12
    1a2a:	89 8b       	std	Y+17, r24	; 0x11
    1a2c:	89 89       	ldd	r24, Y+17	; 0x11
    1a2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <CLCD_voidSendCommand+0x764>
    1a34:	9a 8b       	std	Y+18, r25	; 0x12
    1a36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a38:	8b 89       	ldd	r24, Y+19	; 0x13
    1a3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	9c 8b       	std	Y+20, r25	; 0x14
    1a40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a42:	8b 89       	ldd	r24, Y+19	; 0x13
    1a44:	9c 89       	ldd	r25, Y+20	; 0x14
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	69 f7       	brne	.-38     	; 0x1a24 <CLCD_voidSendCommand+0x758>
    1a4a:	14 c0       	rjmp	.+40     	; 0x1a74 <CLCD_voidSendCommand+0x7a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a50:	8f 89       	ldd	r24, Y+23	; 0x17
    1a52:	98 8d       	ldd	r25, Y+24	; 0x18
    1a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	9c 8b       	std	Y+20, r25	; 0x14
    1a5e:	8b 8b       	std	Y+19, r24	; 0x13
    1a60:	8b 89       	ldd	r24, Y+19	; 0x13
    1a62:	9c 89       	ldd	r25, Y+20	; 0x14
    1a64:	98 8b       	std	Y+16, r25	; 0x10
    1a66:	8f 87       	std	Y+15, r24	; 0x0f
    1a68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a6a:	98 89       	ldd	r25, Y+16	; 0x10
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <CLCD_voidSendCommand+0x7a0>
    1a70:	98 8b       	std	Y+16, r25	; 0x10
    1a72:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=0 */
    1a74:	82 e0       	ldi	r24, 0x02	; 2
    1a76:	66 e0       	ldi	r22, 0x06	; 6
    1a78:	40 e0       	ldi	r20, 0x00	; 0
    1a7a:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	a0 e8       	ldi	r26, 0x80	; 128
    1a84:	bf e3       	ldi	r27, 0x3F	; 63
    1a86:	8b 87       	std	Y+11, r24	; 0x0b
    1a88:	9c 87       	std	Y+12, r25	; 0x0c
    1a8a:	ad 87       	std	Y+13, r26	; 0x0d
    1a8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	4a ef       	ldi	r20, 0xFA	; 250
    1a9c:	54 e4       	ldi	r21, 0x44	; 68
    1a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	8f 83       	std	Y+7, r24	; 0x07
    1aa8:	98 87       	std	Y+8, r25	; 0x08
    1aaa:	a9 87       	std	Y+9, r26	; 0x09
    1aac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aae:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab0:	78 85       	ldd	r23, Y+8	; 0x08
    1ab2:	89 85       	ldd	r24, Y+9	; 0x09
    1ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e8       	ldi	r20, 0x80	; 128
    1abc:	5f e3       	ldi	r21, 0x3F	; 63
    1abe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ac2:	88 23       	and	r24, r24
    1ac4:	2c f4       	brge	.+10     	; 0x1ad0 <CLCD_voidSendCommand+0x804>
		__ticks = 1;
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	9e 83       	std	Y+6, r25	; 0x06
    1acc:	8d 83       	std	Y+5, r24	; 0x05
    1ace:	3f c0       	rjmp	.+126    	; 0x1b4e <CLCD_voidSendCommand+0x882>
	else if (__tmp > 65535)
    1ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad2:	78 85       	ldd	r23, Y+8	; 0x08
    1ad4:	89 85       	ldd	r24, Y+9	; 0x09
    1ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	3f ef       	ldi	r19, 0xFF	; 255
    1adc:	4f e7       	ldi	r20, 0x7F	; 127
    1ade:	57 e4       	ldi	r21, 0x47	; 71
    1ae0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ae4:	18 16       	cp	r1, r24
    1ae6:	4c f5       	brge	.+82     	; 0x1b3a <CLCD_voidSendCommand+0x86e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e2       	ldi	r20, 0x20	; 32
    1af6:	51 e4       	ldi	r21, 0x41	; 65
    1af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	9e 83       	std	Y+6, r25	; 0x06
    1b0e:	8d 83       	std	Y+5, r24	; 0x05
    1b10:	0f c0       	rjmp	.+30     	; 0x1b30 <CLCD_voidSendCommand+0x864>
    1b12:	88 ec       	ldi	r24, 0xC8	; 200
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	9c 83       	std	Y+4, r25	; 0x04
    1b18:	8b 83       	std	Y+3, r24	; 0x03
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	f1 f7       	brne	.-4      	; 0x1b1e <CLCD_voidSendCommand+0x852>
    1b22:	9c 83       	std	Y+4, r25	; 0x04
    1b24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b26:	8d 81       	ldd	r24, Y+5	; 0x05
    1b28:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	9e 83       	std	Y+6, r25	; 0x06
    1b2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b30:	8d 81       	ldd	r24, Y+5	; 0x05
    1b32:	9e 81       	ldd	r25, Y+6	; 0x06
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	69 f7       	brne	.-38     	; 0x1b12 <CLCD_voidSendCommand+0x846>
    1b38:	14 c0       	rjmp	.+40     	; 0x1b62 <CLCD_voidSendCommand+0x896>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3c:	78 85       	ldd	r23, Y+8	; 0x08
    1b3e:	89 85       	ldd	r24, Y+9	; 0x09
    1b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	9e 83       	std	Y+6, r25	; 0x06
    1b4c:	8d 83       	std	Y+5, r24	; 0x05
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9e 81       	ldd	r25, Y+6	; 0x06
    1b52:	9a 83       	std	Y+2, r25	; 0x02
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <CLCD_voidSendCommand+0x88e>
    1b5e:	9a 83       	std	Y+2, r25	; 0x02
    1b60:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_u8Command);
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=1 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1b62:	cd 59       	subi	r28, 0x9D	; 157
    1b64:	df 4f       	sbci	r29, 0xFF	; 255
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	1f 91       	pop	r17
    1b76:	0f 91       	pop	r16
    1b78:	08 95       	ret

00001b7a <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1b7a:	0f 93       	push	r16
    1b7c:	1f 93       	push	r17
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	c3 56       	subi	r28, 0x63	; 99
    1b88:	d0 40       	sbci	r29, 0x00	; 0
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	fe 01       	movw	r30, r28
    1b96:	ed 59       	subi	r30, 0x9D	; 157
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	80 83       	st	Z, r24
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_u8PIN_HIGH); /* Data Mode RS=1 */
    1b9c:	82 e0       	ldi	r24, 0x02	; 2
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	41 e0       	ldi	r20, 0x01	; 1
    1ba2:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_u8PIN_LOW); /* Instruction Mode RW=0 */
    1ba6:	82 e0       	ldi	r24, 0x02	; 2
    1ba8:	61 e0       	ldi	r22, 0x01	; 1
    1baa:	40 e0       	ldi	r20, 0x00	; 0
    1bac:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	e1 5a       	subi	r30, 0xA1	; 161
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	a0 e8       	ldi	r26, 0x80	; 128
    1bbc:	bf e3       	ldi	r27, 0x3F	; 63
    1bbe:	80 83       	st	Z, r24
    1bc0:	91 83       	std	Z+1, r25	; 0x01
    1bc2:	a2 83       	std	Z+2, r26	; 0x02
    1bc4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc6:	8e 01       	movw	r16, r28
    1bc8:	05 5a       	subi	r16, 0xA5	; 165
    1bca:	1f 4f       	sbci	r17, 0xFF	; 255
    1bcc:	fe 01       	movw	r30, r28
    1bce:	e1 5a       	subi	r30, 0xA1	; 161
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	60 81       	ld	r22, Z
    1bd4:	71 81       	ldd	r23, Z+1	; 0x01
    1bd6:	82 81       	ldd	r24, Z+2	; 0x02
    1bd8:	93 81       	ldd	r25, Z+3	; 0x03
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	4a ef       	ldi	r20, 0xFA	; 250
    1be0:	54 e4       	ldi	r21, 0x44	; 68
    1be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	f8 01       	movw	r30, r16
    1bec:	80 83       	st	Z, r24
    1bee:	91 83       	std	Z+1, r25	; 0x01
    1bf0:	a2 83       	std	Z+2, r26	; 0x02
    1bf2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e5 5a       	subi	r30, 0xA5	; 165
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	60 81       	ld	r22, Z
    1bfc:	71 81       	ldd	r23, Z+1	; 0x01
    1bfe:	82 81       	ldd	r24, Z+2	; 0x02
    1c00:	93 81       	ldd	r25, Z+3	; 0x03
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e8       	ldi	r20, 0x80	; 128
    1c08:	5f e3       	ldi	r21, 0x3F	; 63
    1c0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c0e:	88 23       	and	r24, r24
    1c10:	44 f4       	brge	.+16     	; 0x1c22 <CLCD_voidSendData+0xa8>
		__ticks = 1;
    1c12:	fe 01       	movw	r30, r28
    1c14:	e7 5a       	subi	r30, 0xA7	; 167
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	91 83       	std	Z+1, r25	; 0x01
    1c1e:	80 83       	st	Z, r24
    1c20:	64 c0       	rjmp	.+200    	; 0x1cea <CLCD_voidSendData+0x170>
	else if (__tmp > 65535)
    1c22:	fe 01       	movw	r30, r28
    1c24:	e5 5a       	subi	r30, 0xA5	; 165
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	60 81       	ld	r22, Z
    1c2a:	71 81       	ldd	r23, Z+1	; 0x01
    1c2c:	82 81       	ldd	r24, Z+2	; 0x02
    1c2e:	93 81       	ldd	r25, Z+3	; 0x03
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	3f ef       	ldi	r19, 0xFF	; 255
    1c34:	4f e7       	ldi	r20, 0x7F	; 127
    1c36:	57 e4       	ldi	r21, 0x47	; 71
    1c38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	0c f0       	brlt	.+2      	; 0x1c42 <CLCD_voidSendData+0xc8>
    1c40:	43 c0       	rjmp	.+134    	; 0x1cc8 <CLCD_voidSendData+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c42:	fe 01       	movw	r30, r28
    1c44:	e1 5a       	subi	r30, 0xA1	; 161
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	60 81       	ld	r22, Z
    1c4a:	71 81       	ldd	r23, Z+1	; 0x01
    1c4c:	82 81       	ldd	r24, Z+2	; 0x02
    1c4e:	93 81       	ldd	r25, Z+3	; 0x03
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e2       	ldi	r20, 0x20	; 32
    1c56:	51 e4       	ldi	r21, 0x41	; 65
    1c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	8e 01       	movw	r16, r28
    1c62:	07 5a       	subi	r16, 0xA7	; 167
    1c64:	1f 4f       	sbci	r17, 0xFF	; 255
    1c66:	bc 01       	movw	r22, r24
    1c68:	cd 01       	movw	r24, r26
    1c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	f8 01       	movw	r30, r16
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	80 83       	st	Z, r24
    1c78:	1f c0       	rjmp	.+62     	; 0x1cb8 <CLCD_voidSendData+0x13e>
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e9 5a       	subi	r30, 0xA9	; 169
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	88 ec       	ldi	r24, 0xC8	; 200
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	91 83       	std	Z+1, r25	; 0x01
    1c86:	80 83       	st	Z, r24
    1c88:	fe 01       	movw	r30, r28
    1c8a:	e9 5a       	subi	r30, 0xA9	; 169
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	80 81       	ld	r24, Z
    1c90:	91 81       	ldd	r25, Z+1	; 0x01
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <CLCD_voidSendData+0x118>
    1c96:	fe 01       	movw	r30, r28
    1c98:	e9 5a       	subi	r30, 0xA9	; 169
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	91 83       	std	Z+1, r25	; 0x01
    1c9e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca0:	de 01       	movw	r26, r28
    1ca2:	a7 5a       	subi	r26, 0xA7	; 167
    1ca4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e7 5a       	subi	r30, 0xA7	; 167
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	80 81       	ld	r24, Z
    1cae:	91 81       	ldd	r25, Z+1	; 0x01
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	11 96       	adiw	r26, 0x01	; 1
    1cb4:	9c 93       	st	X, r25
    1cb6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb8:	fe 01       	movw	r30, r28
    1cba:	e7 5a       	subi	r30, 0xA7	; 167
    1cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbe:	80 81       	ld	r24, Z
    1cc0:	91 81       	ldd	r25, Z+1	; 0x01
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	d1 f6       	brne	.-76     	; 0x1c7a <CLCD_voidSendData+0x100>
    1cc6:	27 c0       	rjmp	.+78     	; 0x1d16 <CLCD_voidSendData+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc8:	8e 01       	movw	r16, r28
    1cca:	07 5a       	subi	r16, 0xA7	; 167
    1ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e5 5a       	subi	r30, 0xA5	; 165
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	60 81       	ld	r22, Z
    1cd6:	71 81       	ldd	r23, Z+1	; 0x01
    1cd8:	82 81       	ldd	r24, Z+2	; 0x02
    1cda:	93 81       	ldd	r25, Z+3	; 0x03
    1cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	f8 01       	movw	r30, r16
    1ce6:	91 83       	std	Z+1, r25	; 0x01
    1ce8:	80 83       	st	Z, r24
    1cea:	de 01       	movw	r26, r28
    1cec:	ab 5a       	subi	r26, 0xAB	; 171
    1cee:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	e7 5a       	subi	r30, 0xA7	; 167
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	80 81       	ld	r24, Z
    1cf8:	91 81       	ldd	r25, Z+1	; 0x01
    1cfa:	8d 93       	st	X+, r24
    1cfc:	9c 93       	st	X, r25
    1cfe:	fe 01       	movw	r30, r28
    1d00:	eb 5a       	subi	r30, 0xAB	; 171
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	80 81       	ld	r24, Z
    1d06:	91 81       	ldd	r25, Z+1	; 0x01
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <CLCD_voidSendData+0x18e>
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	eb 5a       	subi	r30, 0xAB	; 171
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	91 83       	std	Z+1, r25	; 0x01
    1d14:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Enable LCD E=1 */
    1d16:	82 e0       	ldi	r24, 0x02	; 2
    1d18:	66 e0       	ldi	r22, 0x06	; 6
    1d1a:	41 e0       	ldi	r20, 0x01	; 1
    1d1c:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    1d20:	fe 01       	movw	r30, r28
    1d22:	ef 5a       	subi	r30, 0xAF	; 175
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	a0 e8       	ldi	r26, 0x80	; 128
    1d2c:	bf e3       	ldi	r27, 0x3F	; 63
    1d2e:	80 83       	st	Z, r24
    1d30:	91 83       	std	Z+1, r25	; 0x01
    1d32:	a2 83       	std	Z+2, r26	; 0x02
    1d34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d36:	8e 01       	movw	r16, r28
    1d38:	03 5b       	subi	r16, 0xB3	; 179
    1d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	ef 5a       	subi	r30, 0xAF	; 175
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	60 81       	ld	r22, Z
    1d44:	71 81       	ldd	r23, Z+1	; 0x01
    1d46:	82 81       	ldd	r24, Z+2	; 0x02
    1d48:	93 81       	ldd	r25, Z+3	; 0x03
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	4a ef       	ldi	r20, 0xFA	; 250
    1d50:	54 e4       	ldi	r21, 0x44	; 68
    1d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	80 83       	st	Z, r24
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	a2 83       	std	Z+2, r26	; 0x02
    1d62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d64:	fe 01       	movw	r30, r28
    1d66:	e3 5b       	subi	r30, 0xB3	; 179
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	60 81       	ld	r22, Z
    1d6c:	71 81       	ldd	r23, Z+1	; 0x01
    1d6e:	82 81       	ldd	r24, Z+2	; 0x02
    1d70:	93 81       	ldd	r25, Z+3	; 0x03
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e8       	ldi	r20, 0x80	; 128
    1d78:	5f e3       	ldi	r21, 0x3F	; 63
    1d7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d7e:	88 23       	and	r24, r24
    1d80:	44 f4       	brge	.+16     	; 0x1d92 <CLCD_voidSendData+0x218>
		__ticks = 1;
    1d82:	fe 01       	movw	r30, r28
    1d84:	e5 5b       	subi	r30, 0xB5	; 181
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	91 83       	std	Z+1, r25	; 0x01
    1d8e:	80 83       	st	Z, r24
    1d90:	64 c0       	rjmp	.+200    	; 0x1e5a <CLCD_voidSendData+0x2e0>
	else if (__tmp > 65535)
    1d92:	fe 01       	movw	r30, r28
    1d94:	e3 5b       	subi	r30, 0xB3	; 179
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	60 81       	ld	r22, Z
    1d9a:	71 81       	ldd	r23, Z+1	; 0x01
    1d9c:	82 81       	ldd	r24, Z+2	; 0x02
    1d9e:	93 81       	ldd	r25, Z+3	; 0x03
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	3f ef       	ldi	r19, 0xFF	; 255
    1da4:	4f e7       	ldi	r20, 0x7F	; 127
    1da6:	57 e4       	ldi	r21, 0x47	; 71
    1da8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dac:	18 16       	cp	r1, r24
    1dae:	0c f0       	brlt	.+2      	; 0x1db2 <CLCD_voidSendData+0x238>
    1db0:	43 c0       	rjmp	.+134    	; 0x1e38 <CLCD_voidSendData+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db2:	fe 01       	movw	r30, r28
    1db4:	ef 5a       	subi	r30, 0xAF	; 175
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e2       	ldi	r20, 0x20	; 32
    1dc6:	51 e4       	ldi	r21, 0x41	; 65
    1dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	8e 01       	movw	r16, r28
    1dd2:	05 5b       	subi	r16, 0xB5	; 181
    1dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	f8 01       	movw	r30, r16
    1de4:	91 83       	std	Z+1, r25	; 0x01
    1de6:	80 83       	st	Z, r24
    1de8:	1f c0       	rjmp	.+62     	; 0x1e28 <CLCD_voidSendData+0x2ae>
    1dea:	fe 01       	movw	r30, r28
    1dec:	e7 5b       	subi	r30, 0xB7	; 183
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	88 ec       	ldi	r24, 0xC8	; 200
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	91 83       	std	Z+1, r25	; 0x01
    1df6:	80 83       	st	Z, r24
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e7 5b       	subi	r30, 0xB7	; 183
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	80 81       	ld	r24, Z
    1e00:	91 81       	ldd	r25, Z+1	; 0x01
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <CLCD_voidSendData+0x288>
    1e06:	fe 01       	movw	r30, r28
    1e08:	e7 5b       	subi	r30, 0xB7	; 183
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	91 83       	std	Z+1, r25	; 0x01
    1e0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e10:	de 01       	movw	r26, r28
    1e12:	a5 5b       	subi	r26, 0xB5	; 181
    1e14:	bf 4f       	sbci	r27, 0xFF	; 255
    1e16:	fe 01       	movw	r30, r28
    1e18:	e5 5b       	subi	r30, 0xB5	; 181
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 81       	ld	r24, Z
    1e1e:	91 81       	ldd	r25, Z+1	; 0x01
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	11 96       	adiw	r26, 0x01	; 1
    1e24:	9c 93       	st	X, r25
    1e26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e5 5b       	subi	r30, 0xB5	; 181
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	80 81       	ld	r24, Z
    1e30:	91 81       	ldd	r25, Z+1	; 0x01
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	d1 f6       	brne	.-76     	; 0x1dea <CLCD_voidSendData+0x270>
    1e36:	27 c0       	rjmp	.+78     	; 0x1e86 <CLCD_voidSendData+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e38:	8e 01       	movw	r16, r28
    1e3a:	05 5b       	subi	r16, 0xB5	; 181
    1e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3e:	fe 01       	movw	r30, r28
    1e40:	e3 5b       	subi	r30, 0xB3	; 179
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	60 81       	ld	r22, Z
    1e46:	71 81       	ldd	r23, Z+1	; 0x01
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	93 81       	ldd	r25, Z+3	; 0x03
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	f8 01       	movw	r30, r16
    1e56:	91 83       	std	Z+1, r25	; 0x01
    1e58:	80 83       	st	Z, r24
    1e5a:	de 01       	movw	r26, r28
    1e5c:	a9 5b       	subi	r26, 0xB9	; 185
    1e5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e60:	fe 01       	movw	r30, r28
    1e62:	e5 5b       	subi	r30, 0xB5	; 181
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	80 81       	ld	r24, Z
    1e68:	91 81       	ldd	r25, Z+1	; 0x01
    1e6a:	8d 93       	st	X+, r24
    1e6c:	9c 93       	st	X, r25
    1e6e:	fe 01       	movw	r30, r28
    1e70:	e9 5b       	subi	r30, 0xB9	; 185
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	80 81       	ld	r24, Z
    1e76:	91 81       	ldd	r25, Z+1	; 0x01
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <CLCD_voidSendData+0x2fe>
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e9 5b       	subi	r30, 0xB9	; 185
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	91 83       	std	Z+1, r25	; 0x01
    1e84:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (CLCD_DATA_BITS_MODE == 4)
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Data, 4));
    1e86:	fe 01       	movw	r30, r28
    1e88:	ed 59       	subi	r30, 0x9D	; 157
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	80 81       	ld	r24, Z
    1e8e:	82 95       	swap	r24
    1e90:	8f 70       	andi	r24, 0x0F	; 15
    1e92:	98 2f       	mov	r25, r24
    1e94:	91 70       	andi	r25, 0x01	; 1
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	60 e0       	ldi	r22, 0x00	; 0
    1e9a:	49 2f       	mov	r20, r25
    1e9c:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Data, 5));
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	ed 59       	subi	r30, 0x9D	; 157
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	80 81       	ld	r24, Z
    1ea8:	82 95       	swap	r24
    1eaa:	86 95       	lsr	r24
    1eac:	87 70       	andi	r24, 0x07	; 7
    1eae:	98 2f       	mov	r25, r24
    1eb0:	91 70       	andi	r25, 0x01	; 1
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	61 e0       	ldi	r22, 0x01	; 1
    1eb6:	49 2f       	mov	r20, r25
    1eb8:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Data, 6));
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	ed 59       	subi	r30, 0x9D	; 157
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	80 81       	ld	r24, Z
    1ec4:	82 95       	swap	r24
    1ec6:	86 95       	lsr	r24
    1ec8:	86 95       	lsr	r24
    1eca:	83 70       	andi	r24, 0x03	; 3
    1ecc:	98 2f       	mov	r25, r24
    1ece:	91 70       	andi	r25, 0x01	; 1
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	62 e0       	ldi	r22, 0x02	; 2
    1ed4:	49 2f       	mov	r20, r25
    1ed6:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Data, 7));
    1eda:	fe 01       	movw	r30, r28
    1edc:	ed 59       	subi	r30, 0x9D	; 157
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	80 81       	ld	r24, Z
    1ee2:	98 2f       	mov	r25, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	99 27       	eor	r25, r25
    1ee8:	99 1f       	adc	r25, r25
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	63 e0       	ldi	r22, 0x03	; 3
    1eee:	49 2f       	mov	r20, r25
    1ef0:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	ed 5b       	subi	r30, 0xBD	; 189
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	a0 e8       	ldi	r26, 0x80	; 128
    1f00:	bf e3       	ldi	r27, 0x3F	; 63
    1f02:	80 83       	st	Z, r24
    1f04:	91 83       	std	Z+1, r25	; 0x01
    1f06:	a2 83       	std	Z+2, r26	; 0x02
    1f08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0a:	8e 01       	movw	r16, r28
    1f0c:	01 5c       	subi	r16, 0xC1	; 193
    1f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f10:	fe 01       	movw	r30, r28
    1f12:	ed 5b       	subi	r30, 0xBD	; 189
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	60 81       	ld	r22, Z
    1f18:	71 81       	ldd	r23, Z+1	; 0x01
    1f1a:	82 81       	ldd	r24, Z+2	; 0x02
    1f1c:	93 81       	ldd	r25, Z+3	; 0x03
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	4a ef       	ldi	r20, 0xFA	; 250
    1f24:	54 e4       	ldi	r21, 0x44	; 68
    1f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	f8 01       	movw	r30, r16
    1f30:	80 83       	st	Z, r24
    1f32:	91 83       	std	Z+1, r25	; 0x01
    1f34:	a2 83       	std	Z+2, r26	; 0x02
    1f36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f38:	fe 01       	movw	r30, r28
    1f3a:	ff 96       	adiw	r30, 0x3f	; 63
    1f3c:	60 81       	ld	r22, Z
    1f3e:	71 81       	ldd	r23, Z+1	; 0x01
    1f40:	82 81       	ldd	r24, Z+2	; 0x02
    1f42:	93 81       	ldd	r25, Z+3	; 0x03
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	40 e8       	ldi	r20, 0x80	; 128
    1f4a:	5f e3       	ldi	r21, 0x3F	; 63
    1f4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f50:	88 23       	and	r24, r24
    1f52:	2c f4       	brge	.+10     	; 0x1f5e <CLCD_voidSendData+0x3e4>
		__ticks = 1;
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	9e af       	std	Y+62, r25	; 0x3e
    1f5a:	8d af       	std	Y+61, r24	; 0x3d
    1f5c:	46 c0       	rjmp	.+140    	; 0x1fea <CLCD_voidSendData+0x470>
	else if (__tmp > 65535)
    1f5e:	fe 01       	movw	r30, r28
    1f60:	ff 96       	adiw	r30, 0x3f	; 63
    1f62:	60 81       	ld	r22, Z
    1f64:	71 81       	ldd	r23, Z+1	; 0x01
    1f66:	82 81       	ldd	r24, Z+2	; 0x02
    1f68:	93 81       	ldd	r25, Z+3	; 0x03
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	3f ef       	ldi	r19, 0xFF	; 255
    1f6e:	4f e7       	ldi	r20, 0x7F	; 127
    1f70:	57 e4       	ldi	r21, 0x47	; 71
    1f72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f76:	18 16       	cp	r1, r24
    1f78:	64 f5       	brge	.+88     	; 0x1fd2 <CLCD_voidSendData+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	ed 5b       	subi	r30, 0xBD	; 189
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	60 81       	ld	r22, Z
    1f82:	71 81       	ldd	r23, Z+1	; 0x01
    1f84:	82 81       	ldd	r24, Z+2	; 0x02
    1f86:	93 81       	ldd	r25, Z+3	; 0x03
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e2       	ldi	r20, 0x20	; 32
    1f8e:	51 e4       	ldi	r21, 0x41	; 65
    1f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	9e af       	std	Y+62, r25	; 0x3e
    1fa6:	8d af       	std	Y+61, r24	; 0x3d
    1fa8:	0f c0       	rjmp	.+30     	; 0x1fc8 <CLCD_voidSendData+0x44e>
    1faa:	88 ec       	ldi	r24, 0xC8	; 200
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	9c af       	std	Y+60, r25	; 0x3c
    1fb0:	8b af       	std	Y+59, r24	; 0x3b
    1fb2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fb4:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <CLCD_voidSendData+0x43c>
    1fba:	9c af       	std	Y+60, r25	; 0x3c
    1fbc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fc0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	9e af       	std	Y+62, r25	; 0x3e
    1fc6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fca:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	69 f7       	brne	.-38     	; 0x1faa <CLCD_voidSendData+0x430>
    1fd0:	16 c0       	rjmp	.+44     	; 0x1ffe <CLCD_voidSendData+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	ff 96       	adiw	r30, 0x3f	; 63
    1fd6:	60 81       	ld	r22, Z
    1fd8:	71 81       	ldd	r23, Z+1	; 0x01
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	93 81       	ldd	r25, Z+3	; 0x03
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	9e af       	std	Y+62, r25	; 0x3e
    1fe8:	8d af       	std	Y+61, r24	; 0x3d
    1fea:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fec:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fee:	9a af       	std	Y+58, r25	; 0x3a
    1ff0:	89 af       	std	Y+57, r24	; 0x39
    1ff2:	89 ad       	ldd	r24, Y+57	; 0x39
    1ff4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <CLCD_voidSendData+0x47c>
    1ffa:	9a af       	std	Y+58, r25	; 0x3a
    1ffc:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=0 */
    1ffe:	82 e0       	ldi	r24, 0x02	; 2
    2000:	66 e0       	ldi	r22, 0x06	; 6
    2002:	40 e0       	ldi	r20, 0x00	; 0
    2004:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	a0 e8       	ldi	r26, 0x80	; 128
    200e:	bf e3       	ldi	r27, 0x3F	; 63
    2010:	8d ab       	std	Y+53, r24	; 0x35
    2012:	9e ab       	std	Y+54, r25	; 0x36
    2014:	af ab       	std	Y+55, r26	; 0x37
    2016:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2018:	6d a9       	ldd	r22, Y+53	; 0x35
    201a:	7e a9       	ldd	r23, Y+54	; 0x36
    201c:	8f a9       	ldd	r24, Y+55	; 0x37
    201e:	98 ad       	ldd	r25, Y+56	; 0x38
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	4a ef       	ldi	r20, 0xFA	; 250
    2026:	54 e4       	ldi	r21, 0x44	; 68
    2028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	89 ab       	std	Y+49, r24	; 0x31
    2032:	9a ab       	std	Y+50, r25	; 0x32
    2034:	ab ab       	std	Y+51, r26	; 0x33
    2036:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2038:	69 a9       	ldd	r22, Y+49	; 0x31
    203a:	7a a9       	ldd	r23, Y+50	; 0x32
    203c:	8b a9       	ldd	r24, Y+51	; 0x33
    203e:	9c a9       	ldd	r25, Y+52	; 0x34
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e8       	ldi	r20, 0x80	; 128
    2046:	5f e3       	ldi	r21, 0x3F	; 63
    2048:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    204c:	88 23       	and	r24, r24
    204e:	2c f4       	brge	.+10     	; 0x205a <CLCD_voidSendData+0x4e0>
		__ticks = 1;
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	98 ab       	std	Y+48, r25	; 0x30
    2056:	8f a7       	std	Y+47, r24	; 0x2f
    2058:	3f c0       	rjmp	.+126    	; 0x20d8 <CLCD_voidSendData+0x55e>
	else if (__tmp > 65535)
    205a:	69 a9       	ldd	r22, Y+49	; 0x31
    205c:	7a a9       	ldd	r23, Y+50	; 0x32
    205e:	8b a9       	ldd	r24, Y+51	; 0x33
    2060:	9c a9       	ldd	r25, Y+52	; 0x34
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	3f ef       	ldi	r19, 0xFF	; 255
    2066:	4f e7       	ldi	r20, 0x7F	; 127
    2068:	57 e4       	ldi	r21, 0x47	; 71
    206a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    206e:	18 16       	cp	r1, r24
    2070:	4c f5       	brge	.+82     	; 0x20c4 <CLCD_voidSendData+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2072:	6d a9       	ldd	r22, Y+53	; 0x35
    2074:	7e a9       	ldd	r23, Y+54	; 0x36
    2076:	8f a9       	ldd	r24, Y+55	; 0x37
    2078:	98 ad       	ldd	r25, Y+56	; 0x38
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e2       	ldi	r20, 0x20	; 32
    2080:	51 e4       	ldi	r21, 0x41	; 65
    2082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	bc 01       	movw	r22, r24
    208c:	cd 01       	movw	r24, r26
    208e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	98 ab       	std	Y+48, r25	; 0x30
    2098:	8f a7       	std	Y+47, r24	; 0x2f
    209a:	0f c0       	rjmp	.+30     	; 0x20ba <CLCD_voidSendData+0x540>
    209c:	88 ec       	ldi	r24, 0xC8	; 200
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	9e a7       	std	Y+46, r25	; 0x2e
    20a2:	8d a7       	std	Y+45, r24	; 0x2d
    20a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    20a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <CLCD_voidSendData+0x52e>
    20ac:	9e a7       	std	Y+46, r25	; 0x2e
    20ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20b2:	98 a9       	ldd	r25, Y+48	; 0x30
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	98 ab       	std	Y+48, r25	; 0x30
    20b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    20bc:	98 a9       	ldd	r25, Y+48	; 0x30
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	69 f7       	brne	.-38     	; 0x209c <CLCD_voidSendData+0x522>
    20c2:	14 c0       	rjmp	.+40     	; 0x20ec <CLCD_voidSendData+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c4:	69 a9       	ldd	r22, Y+49	; 0x31
    20c6:	7a a9       	ldd	r23, Y+50	; 0x32
    20c8:	8b a9       	ldd	r24, Y+51	; 0x33
    20ca:	9c a9       	ldd	r25, Y+52	; 0x34
    20cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	98 ab       	std	Y+48, r25	; 0x30
    20d6:	8f a7       	std	Y+47, r24	; 0x2f
    20d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    20da:	98 a9       	ldd	r25, Y+48	; 0x30
    20dc:	9c a7       	std	Y+44, r25	; 0x2c
    20de:	8b a7       	std	Y+43, r24	; 0x2b
    20e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    20e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	f1 f7       	brne	.-4      	; 0x20e4 <CLCD_voidSendData+0x56a>
    20e8:	9c a7       	std	Y+44, r25	; 0x2c
    20ea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Disable LCD E=1 */
    20ec:	82 e0       	ldi	r24, 0x02	; 2
    20ee:	66 e0       	ldi	r22, 0x06	; 6
    20f0:	41 e0       	ldi	r20, 0x01	; 1
    20f2:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	a0 e8       	ldi	r26, 0x80	; 128
    20fc:	bf e3       	ldi	r27, 0x3F	; 63
    20fe:	8f a3       	std	Y+39, r24	; 0x27
    2100:	98 a7       	std	Y+40, r25	; 0x28
    2102:	a9 a7       	std	Y+41, r26	; 0x29
    2104:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2106:	6f a1       	ldd	r22, Y+39	; 0x27
    2108:	78 a5       	ldd	r23, Y+40	; 0x28
    210a:	89 a5       	ldd	r24, Y+41	; 0x29
    210c:	9a a5       	ldd	r25, Y+42	; 0x2a
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	4a ef       	ldi	r20, 0xFA	; 250
    2114:	54 e4       	ldi	r21, 0x44	; 68
    2116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	8b a3       	std	Y+35, r24	; 0x23
    2120:	9c a3       	std	Y+36, r25	; 0x24
    2122:	ad a3       	std	Y+37, r26	; 0x25
    2124:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2126:	6b a1       	ldd	r22, Y+35	; 0x23
    2128:	7c a1       	ldd	r23, Y+36	; 0x24
    212a:	8d a1       	ldd	r24, Y+37	; 0x25
    212c:	9e a1       	ldd	r25, Y+38	; 0x26
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e8       	ldi	r20, 0x80	; 128
    2134:	5f e3       	ldi	r21, 0x3F	; 63
    2136:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    213a:	88 23       	and	r24, r24
    213c:	2c f4       	brge	.+10     	; 0x2148 <CLCD_voidSendData+0x5ce>
		__ticks = 1;
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	9a a3       	std	Y+34, r25	; 0x22
    2144:	89 a3       	std	Y+33, r24	; 0x21
    2146:	3f c0       	rjmp	.+126    	; 0x21c6 <CLCD_voidSendData+0x64c>
	else if (__tmp > 65535)
    2148:	6b a1       	ldd	r22, Y+35	; 0x23
    214a:	7c a1       	ldd	r23, Y+36	; 0x24
    214c:	8d a1       	ldd	r24, Y+37	; 0x25
    214e:	9e a1       	ldd	r25, Y+38	; 0x26
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	3f ef       	ldi	r19, 0xFF	; 255
    2154:	4f e7       	ldi	r20, 0x7F	; 127
    2156:	57 e4       	ldi	r21, 0x47	; 71
    2158:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    215c:	18 16       	cp	r1, r24
    215e:	4c f5       	brge	.+82     	; 0x21b2 <CLCD_voidSendData+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2160:	6f a1       	ldd	r22, Y+39	; 0x27
    2162:	78 a5       	ldd	r23, Y+40	; 0x28
    2164:	89 a5       	ldd	r24, Y+41	; 0x29
    2166:	9a a5       	ldd	r25, Y+42	; 0x2a
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	40 e2       	ldi	r20, 0x20	; 32
    216e:	51 e4       	ldi	r21, 0x41	; 65
    2170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	bc 01       	movw	r22, r24
    217a:	cd 01       	movw	r24, r26
    217c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	9a a3       	std	Y+34, r25	; 0x22
    2186:	89 a3       	std	Y+33, r24	; 0x21
    2188:	0f c0       	rjmp	.+30     	; 0x21a8 <CLCD_voidSendData+0x62e>
    218a:	88 ec       	ldi	r24, 0xC8	; 200
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	98 a3       	std	Y+32, r25	; 0x20
    2190:	8f 8f       	std	Y+31, r24	; 0x1f
    2192:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2194:	98 a1       	ldd	r25, Y+32	; 0x20
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	f1 f7       	brne	.-4      	; 0x2196 <CLCD_voidSendData+0x61c>
    219a:	98 a3       	std	Y+32, r25	; 0x20
    219c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219e:	89 a1       	ldd	r24, Y+33	; 0x21
    21a0:	9a a1       	ldd	r25, Y+34	; 0x22
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	9a a3       	std	Y+34, r25	; 0x22
    21a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a8:	89 a1       	ldd	r24, Y+33	; 0x21
    21aa:	9a a1       	ldd	r25, Y+34	; 0x22
    21ac:	00 97       	sbiw	r24, 0x00	; 0
    21ae:	69 f7       	brne	.-38     	; 0x218a <CLCD_voidSendData+0x610>
    21b0:	14 c0       	rjmp	.+40     	; 0x21da <CLCD_voidSendData+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b2:	6b a1       	ldd	r22, Y+35	; 0x23
    21b4:	7c a1       	ldd	r23, Y+36	; 0x24
    21b6:	8d a1       	ldd	r24, Y+37	; 0x25
    21b8:	9e a1       	ldd	r25, Y+38	; 0x26
    21ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	9a a3       	std	Y+34, r25	; 0x22
    21c4:	89 a3       	std	Y+33, r24	; 0x21
    21c6:	89 a1       	ldd	r24, Y+33	; 0x21
    21c8:	9a a1       	ldd	r25, Y+34	; 0x22
    21ca:	9e 8f       	std	Y+30, r25	; 0x1e
    21cc:	8d 8f       	std	Y+29, r24	; 0x1d
    21ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <CLCD_voidSendData+0x658>
    21d6:	9e 8f       	std	Y+30, r25	; 0x1e
    21d8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Data, 0));
    21da:	fe 01       	movw	r30, r28
    21dc:	ed 59       	subi	r30, 0x9D	; 157
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	80 81       	ld	r24, Z
    21e2:	98 2f       	mov	r25, r24
    21e4:	91 70       	andi	r25, 0x01	; 1
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	60 e0       	ldi	r22, 0x00	; 0
    21ea:	49 2f       	mov	r20, r25
    21ec:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Data, 1));
    21f0:	fe 01       	movw	r30, r28
    21f2:	ed 59       	subi	r30, 0x9D	; 157
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	80 81       	ld	r24, Z
    21f8:	86 95       	lsr	r24
    21fa:	98 2f       	mov	r25, r24
    21fc:	91 70       	andi	r25, 0x01	; 1
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	61 e0       	ldi	r22, 0x01	; 1
    2202:	49 2f       	mov	r20, r25
    2204:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Data, 2));
    2208:	fe 01       	movw	r30, r28
    220a:	ed 59       	subi	r30, 0x9D	; 157
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	80 81       	ld	r24, Z
    2210:	86 95       	lsr	r24
    2212:	86 95       	lsr	r24
    2214:	98 2f       	mov	r25, r24
    2216:	91 70       	andi	r25, 0x01	; 1
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	62 e0       	ldi	r22, 0x02	; 2
    221c:	49 2f       	mov	r20, r25
    221e:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Data, 3));
    2222:	fe 01       	movw	r30, r28
    2224:	ed 59       	subi	r30, 0x9D	; 157
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	80 81       	ld	r24, Z
    222a:	86 95       	lsr	r24
    222c:	86 95       	lsr	r24
    222e:	86 95       	lsr	r24
    2230:	98 2f       	mov	r25, r24
    2232:	91 70       	andi	r25, 0x01	; 1
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	63 e0       	ldi	r22, 0x03	; 3
    2238:	49 2f       	mov	r20, r25
    223a:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	a0 e8       	ldi	r26, 0x80	; 128
    2244:	bf e3       	ldi	r27, 0x3F	; 63
    2246:	89 8f       	std	Y+25, r24	; 0x19
    2248:	9a 8f       	std	Y+26, r25	; 0x1a
    224a:	ab 8f       	std	Y+27, r26	; 0x1b
    224c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224e:	69 8d       	ldd	r22, Y+25	; 0x19
    2250:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2252:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2254:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	4a ef       	ldi	r20, 0xFA	; 250
    225c:	54 e4       	ldi	r21, 0x44	; 68
    225e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	8d 8b       	std	Y+21, r24	; 0x15
    2268:	9e 8b       	std	Y+22, r25	; 0x16
    226a:	af 8b       	std	Y+23, r26	; 0x17
    226c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    226e:	6d 89       	ldd	r22, Y+21	; 0x15
    2270:	7e 89       	ldd	r23, Y+22	; 0x16
    2272:	8f 89       	ldd	r24, Y+23	; 0x17
    2274:	98 8d       	ldd	r25, Y+24	; 0x18
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e8       	ldi	r20, 0x80	; 128
    227c:	5f e3       	ldi	r21, 0x3F	; 63
    227e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2282:	88 23       	and	r24, r24
    2284:	2c f4       	brge	.+10     	; 0x2290 <CLCD_voidSendData+0x716>
		__ticks = 1;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	9c 8b       	std	Y+20, r25	; 0x14
    228c:	8b 8b       	std	Y+19, r24	; 0x13
    228e:	3f c0       	rjmp	.+126    	; 0x230e <CLCD_voidSendData+0x794>
	else if (__tmp > 65535)
    2290:	6d 89       	ldd	r22, Y+21	; 0x15
    2292:	7e 89       	ldd	r23, Y+22	; 0x16
    2294:	8f 89       	ldd	r24, Y+23	; 0x17
    2296:	98 8d       	ldd	r25, Y+24	; 0x18
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	3f ef       	ldi	r19, 0xFF	; 255
    229c:	4f e7       	ldi	r20, 0x7F	; 127
    229e:	57 e4       	ldi	r21, 0x47	; 71
    22a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22a4:	18 16       	cp	r1, r24
    22a6:	4c f5       	brge	.+82     	; 0x22fa <CLCD_voidSendData+0x780>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a8:	69 8d       	ldd	r22, Y+25	; 0x19
    22aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e2       	ldi	r20, 0x20	; 32
    22b6:	51 e4       	ldi	r21, 0x41	; 65
    22b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9c 8b       	std	Y+20, r25	; 0x14
    22ce:	8b 8b       	std	Y+19, r24	; 0x13
    22d0:	0f c0       	rjmp	.+30     	; 0x22f0 <CLCD_voidSendData+0x776>
    22d2:	88 ec       	ldi	r24, 0xC8	; 200
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9a 8b       	std	Y+18, r25	; 0x12
    22d8:	89 8b       	std	Y+17, r24	; 0x11
    22da:	89 89       	ldd	r24, Y+17	; 0x11
    22dc:	9a 89       	ldd	r25, Y+18	; 0x12
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <CLCD_voidSendData+0x764>
    22e2:	9a 8b       	std	Y+18, r25	; 0x12
    22e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e6:	8b 89       	ldd	r24, Y+19	; 0x13
    22e8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	9c 8b       	std	Y+20, r25	; 0x14
    22ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f0:	8b 89       	ldd	r24, Y+19	; 0x13
    22f2:	9c 89       	ldd	r25, Y+20	; 0x14
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	69 f7       	brne	.-38     	; 0x22d2 <CLCD_voidSendData+0x758>
    22f8:	14 c0       	rjmp	.+40     	; 0x2322 <CLCD_voidSendData+0x7a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fa:	6d 89       	ldd	r22, Y+21	; 0x15
    22fc:	7e 89       	ldd	r23, Y+22	; 0x16
    22fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2300:	98 8d       	ldd	r25, Y+24	; 0x18
    2302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9c 8b       	std	Y+20, r25	; 0x14
    230c:	8b 8b       	std	Y+19, r24	; 0x13
    230e:	8b 89       	ldd	r24, Y+19	; 0x13
    2310:	9c 89       	ldd	r25, Y+20	; 0x14
    2312:	98 8b       	std	Y+16, r25	; 0x10
    2314:	8f 87       	std	Y+15, r24	; 0x0f
    2316:	8f 85       	ldd	r24, Y+15	; 0x0f
    2318:	98 89       	ldd	r25, Y+16	; 0x10
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <CLCD_voidSendData+0x7a0>
    231e:	98 8b       	std	Y+16, r25	; 0x10
    2320:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW);
    2322:	82 e0       	ldi	r24, 0x02	; 2
    2324:	66 e0       	ldi	r22, 0x06	; 6
    2326:	40 e0       	ldi	r20, 0x00	; 0
    2328:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	a0 e8       	ldi	r26, 0x80	; 128
    2332:	bf e3       	ldi	r27, 0x3F	; 63
    2334:	8b 87       	std	Y+11, r24	; 0x0b
    2336:	9c 87       	std	Y+12, r25	; 0x0c
    2338:	ad 87       	std	Y+13, r26	; 0x0d
    233a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233c:	6b 85       	ldd	r22, Y+11	; 0x0b
    233e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2340:	8d 85       	ldd	r24, Y+13	; 0x0d
    2342:	9e 85       	ldd	r25, Y+14	; 0x0e
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	4a ef       	ldi	r20, 0xFA	; 250
    234a:	54 e4       	ldi	r21, 0x44	; 68
    234c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	8f 83       	std	Y+7, r24	; 0x07
    2356:	98 87       	std	Y+8, r25	; 0x08
    2358:	a9 87       	std	Y+9, r26	; 0x09
    235a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    235c:	6f 81       	ldd	r22, Y+7	; 0x07
    235e:	78 85       	ldd	r23, Y+8	; 0x08
    2360:	89 85       	ldd	r24, Y+9	; 0x09
    2362:	9a 85       	ldd	r25, Y+10	; 0x0a
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e8       	ldi	r20, 0x80	; 128
    236a:	5f e3       	ldi	r21, 0x3F	; 63
    236c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2370:	88 23       	and	r24, r24
    2372:	2c f4       	brge	.+10     	; 0x237e <CLCD_voidSendData+0x804>
		__ticks = 1;
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	9e 83       	std	Y+6, r25	; 0x06
    237a:	8d 83       	std	Y+5, r24	; 0x05
    237c:	3f c0       	rjmp	.+126    	; 0x23fc <CLCD_voidSendData+0x882>
	else if (__tmp > 65535)
    237e:	6f 81       	ldd	r22, Y+7	; 0x07
    2380:	78 85       	ldd	r23, Y+8	; 0x08
    2382:	89 85       	ldd	r24, Y+9	; 0x09
    2384:	9a 85       	ldd	r25, Y+10	; 0x0a
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	3f ef       	ldi	r19, 0xFF	; 255
    238a:	4f e7       	ldi	r20, 0x7F	; 127
    238c:	57 e4       	ldi	r21, 0x47	; 71
    238e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2392:	18 16       	cp	r1, r24
    2394:	4c f5       	brge	.+82     	; 0x23e8 <CLCD_voidSendData+0x86e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2396:	6b 85       	ldd	r22, Y+11	; 0x0b
    2398:	7c 85       	ldd	r23, Y+12	; 0x0c
    239a:	8d 85       	ldd	r24, Y+13	; 0x0d
    239c:	9e 85       	ldd	r25, Y+14	; 0x0e
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e2       	ldi	r20, 0x20	; 32
    23a4:	51 e4       	ldi	r21, 0x41	; 65
    23a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	bc 01       	movw	r22, r24
    23b0:	cd 01       	movw	r24, r26
    23b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	9e 83       	std	Y+6, r25	; 0x06
    23bc:	8d 83       	std	Y+5, r24	; 0x05
    23be:	0f c0       	rjmp	.+30     	; 0x23de <CLCD_voidSendData+0x864>
    23c0:	88 ec       	ldi	r24, 0xC8	; 200
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	9c 83       	std	Y+4, r25	; 0x04
    23c6:	8b 83       	std	Y+3, r24	; 0x03
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	9c 81       	ldd	r25, Y+4	; 0x04
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <CLCD_voidSendData+0x852>
    23d0:	9c 83       	std	Y+4, r25	; 0x04
    23d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d4:	8d 81       	ldd	r24, Y+5	; 0x05
    23d6:	9e 81       	ldd	r25, Y+6	; 0x06
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	9e 83       	std	Y+6, r25	; 0x06
    23dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23de:	8d 81       	ldd	r24, Y+5	; 0x05
    23e0:	9e 81       	ldd	r25, Y+6	; 0x06
    23e2:	00 97       	sbiw	r24, 0x00	; 0
    23e4:	69 f7       	brne	.-38     	; 0x23c0 <CLCD_voidSendData+0x846>
    23e6:	14 c0       	rjmp	.+40     	; 0x2410 <CLCD_voidSendData+0x896>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ea:	78 85       	ldd	r23, Y+8	; 0x08
    23ec:	89 85       	ldd	r24, Y+9	; 0x09
    23ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	9e 83       	std	Y+6, r25	; 0x06
    23fa:	8d 83       	std	Y+5, r24	; 0x05
    23fc:	8d 81       	ldd	r24, Y+5	; 0x05
    23fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2400:	9a 83       	std	Y+2, r25	; 0x02
    2402:	89 83       	std	Y+1, r24	; 0x01
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	9a 81       	ldd	r25, Y+2	; 0x02
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <CLCD_voidSendData+0x88e>
    240c:	9a 83       	std	Y+2, r25	; 0x02
    240e:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_U8Data);
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW);
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2410:	cd 59       	subi	r28, 0x9D	; 157
    2412:	df 4f       	sbci	r29, 0xFF	; 255
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	cf 91       	pop	r28
    2420:	df 91       	pop	r29
    2422:	1f 91       	pop	r17
    2424:	0f 91       	pop	r16
    2426:	08 95       	ret

00002428 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	2e 97       	sbiw	r28, 0x0e	; 14
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	de bf       	out	0x3e, r29	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS , E and RW pins as output pins */
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_OUTPUT);
    243c:	82 e0       	ldi	r24, 0x02	; 2
    243e:	60 e0       	ldi	r22, 0x00	; 0
    2440:	41 e0       	ldi	r20, 0x01	; 1
    2442:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_OUTPUT);
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	61 e0       	ldi	r22, 0x01	; 1
    244a:	41 e0       	ldi	r20, 0x01	; 1
    244c:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_OUTPUT);
    2450:	82 e0       	ldi	r24, 0x02	; 2
    2452:	66 e0       	ldi	r22, 0x06	; 6
    2454:	41 e0       	ldi	r20, 0x01	; 1
    2456:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	a0 ea       	ldi	r26, 0xA0	; 160
    2460:	b1 e4       	ldi	r27, 0x41	; 65
    2462:	8b 87       	std	Y+11, r24	; 0x0b
    2464:	9c 87       	std	Y+12, r25	; 0x0c
    2466:	ad 87       	std	Y+13, r26	; 0x0d
    2468:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246a:	6b 85       	ldd	r22, Y+11	; 0x0b
    246c:	7c 85       	ldd	r23, Y+12	; 0x0c
    246e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2470:	9e 85       	ldd	r25, Y+14	; 0x0e
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	4a ef       	ldi	r20, 0xFA	; 250
    2478:	54 e4       	ldi	r21, 0x44	; 68
    247a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	8f 83       	std	Y+7, r24	; 0x07
    2484:	98 87       	std	Y+8, r25	; 0x08
    2486:	a9 87       	std	Y+9, r26	; 0x09
    2488:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    248a:	6f 81       	ldd	r22, Y+7	; 0x07
    248c:	78 85       	ldd	r23, Y+8	; 0x08
    248e:	89 85       	ldd	r24, Y+9	; 0x09
    2490:	9a 85       	ldd	r25, Y+10	; 0x0a
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e8       	ldi	r20, 0x80	; 128
    2498:	5f e3       	ldi	r21, 0x3F	; 63
    249a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    249e:	88 23       	and	r24, r24
    24a0:	2c f4       	brge	.+10     	; 0x24ac <CLCD_voidInit+0x84>
		__ticks = 1;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	9e 83       	std	Y+6, r25	; 0x06
    24a8:	8d 83       	std	Y+5, r24	; 0x05
    24aa:	3f c0       	rjmp	.+126    	; 0x252a <CLCD_voidInit+0x102>
	else if (__tmp > 65535)
    24ac:	6f 81       	ldd	r22, Y+7	; 0x07
    24ae:	78 85       	ldd	r23, Y+8	; 0x08
    24b0:	89 85       	ldd	r24, Y+9	; 0x09
    24b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	3f ef       	ldi	r19, 0xFF	; 255
    24b8:	4f e7       	ldi	r20, 0x7F	; 127
    24ba:	57 e4       	ldi	r21, 0x47	; 71
    24bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c0:	18 16       	cp	r1, r24
    24c2:	4c f5       	brge	.+82     	; 0x2516 <CLCD_voidInit+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e2       	ldi	r20, 0x20	; 32
    24d2:	51 e4       	ldi	r21, 0x41	; 65
    24d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	bc 01       	movw	r22, r24
    24de:	cd 01       	movw	r24, r26
    24e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	9e 83       	std	Y+6, r25	; 0x06
    24ea:	8d 83       	std	Y+5, r24	; 0x05
    24ec:	0f c0       	rjmp	.+30     	; 0x250c <CLCD_voidInit+0xe4>
    24ee:	88 ec       	ldi	r24, 0xC8	; 200
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9c 83       	std	Y+4, r25	; 0x04
    24f4:	8b 83       	std	Y+3, r24	; 0x03
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	9c 81       	ldd	r25, Y+4	; 0x04
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	f1 f7       	brne	.-4      	; 0x24fa <CLCD_voidInit+0xd2>
    24fe:	9c 83       	std	Y+4, r25	; 0x04
    2500:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2502:	8d 81       	ldd	r24, Y+5	; 0x05
    2504:	9e 81       	ldd	r25, Y+6	; 0x06
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	9e 83       	std	Y+6, r25	; 0x06
    250a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250c:	8d 81       	ldd	r24, Y+5	; 0x05
    250e:	9e 81       	ldd	r25, Y+6	; 0x06
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	69 f7       	brne	.-38     	; 0x24ee <CLCD_voidInit+0xc6>
    2514:	14 c0       	rjmp	.+40     	; 0x253e <CLCD_voidInit+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2516:	6f 81       	ldd	r22, Y+7	; 0x07
    2518:	78 85       	ldd	r23, Y+8	; 0x08
    251a:	89 85       	ldd	r24, Y+9	; 0x09
    251c:	9a 85       	ldd	r25, Y+10	; 0x0a
    251e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	8d 83       	std	Y+5, r24	; 0x05
    252a:	8d 81       	ldd	r24, Y+5	; 0x05
    252c:	9e 81       	ldd	r25, Y+6	; 0x06
    252e:	9a 83       	std	Y+2, r25	; 0x02
    2530:	89 83       	std	Y+1, r24	; 0x01
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	9a 81       	ldd	r25, Y+2	; 0x02
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <CLCD_voidInit+0x10e>
    253a:	9a 83       	std	Y+2, r25	; 0x02
    253c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if (CLCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D4_PIN,DIO_u8PIN_OUTPUT);
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	41 e0       	ldi	r20, 0x01	; 1
    2544:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D5_PIN,DIO_u8PIN_OUTPUT);
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	61 e0       	ldi	r22, 0x01	; 1
    254c:	41 e0       	ldi	r20, 0x01	; 1
    254e:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D6_PIN,DIO_u8PIN_OUTPUT);
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	62 e0       	ldi	r22, 0x02	; 2
    2556:	41 e0       	ldi	r20, 0x01	; 1
    2558:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D7_PIN,DIO_u8PIN_OUTPUT);
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	63 e0       	ldi	r22, 0x03	; 3
    2560:	41 e0       	ldi	r20, 0x01	; 1
    2562:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>

	/* Send for 4 bit initialization of LCD  */
	CLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2566:	83 e3       	ldi	r24, 0x33	; 51
    2568:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>
	CLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    256c:	82 e3       	ldi	r24, 0x32	; 50
    256e:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	CLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2572:	88 e2       	ldi	r24, 0x28	; 40
    2574:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	CLCD_voidSendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
#endif

	CLCD_voidSendCommand(LCD_CURSOR_OFF);    /* cursor off */
    2578:	8c e0       	ldi	r24, 0x0C	; 12
    257a:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>
	CLCD_voidSendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>
}
    2584:	2e 96       	adiw	r28, 0x0e	; 14
    2586:	0f b6       	in	r0, 0x3f	; 63
    2588:	f8 94       	cli
    258a:	de bf       	out	0x3e, r29	; 62
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	cd bf       	out	0x3d, r28	; 61
    2590:	cf 91       	pop	r28
    2592:	df 91       	pop	r29
    2594:	08 95       	ret

00002596 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
    2596:	df 93       	push	r29
    2598:	cf 93       	push	r28
    259a:	00 d0       	rcall	.+0      	; 0x259c <CLCD_voidSendString+0x6>
    259c:	0f 92       	push	r0
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
    25a2:	9b 83       	std	Y+3, r25	; 0x03
    25a4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    25a6:	19 82       	std	Y+1, r1	; 0x01
    25a8:	0e c0       	rjmp	.+28     	; 0x25c6 <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	28 2f       	mov	r18, r24
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	9b 81       	ldd	r25, Y+3	; 0x03
    25b4:	fc 01       	movw	r30, r24
    25b6:	e2 0f       	add	r30, r18
    25b8:	f3 1f       	adc	r31, r19
    25ba:	80 81       	ld	r24, Z
    25bc:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <CLCD_voidSendData>
		Local_u8Counter++;
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	8f 5f       	subi	r24, 0xFF	; 255
    25c4:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter = 0;
	while(Copy_pcString[Local_u8Counter] != '\0')
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	28 2f       	mov	r18, r24
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	9b 81       	ldd	r25, Y+3	; 0x03
    25d0:	fc 01       	movw	r30, r24
    25d2:	e2 0f       	add	r30, r18
    25d4:	f3 1f       	adc	r31, r19
    25d6:	80 81       	ld	r24, Z
    25d8:	88 23       	and	r24, r24
    25da:	39 f7       	brne	.-50     	; 0x25aa <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	00 d0       	rcall	.+0      	; 0x25ee <CLCD_voidGoToXY+0x6>
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <CLCD_voidGoToXY+0x8>
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8XPos) {
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	28 2f       	mov	r18, r24
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	3c 83       	std	Y+4, r19	; 0x04
    2600:	2b 83       	std	Y+3, r18	; 0x03
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	9c 81       	ldd	r25, Y+4	; 0x04
    2606:	81 30       	cpi	r24, 0x01	; 1
    2608:	91 05       	cpc	r25, r1
    260a:	d1 f0       	breq	.+52     	; 0x2640 <CLCD_voidGoToXY+0x58>
    260c:	2b 81       	ldd	r18, Y+3	; 0x03
    260e:	3c 81       	ldd	r19, Y+4	; 0x04
    2610:	22 30       	cpi	r18, 0x02	; 2
    2612:	31 05       	cpc	r19, r1
    2614:	2c f4       	brge	.+10     	; 0x2620 <CLCD_voidGoToXY+0x38>
    2616:	8b 81       	ldd	r24, Y+3	; 0x03
    2618:	9c 81       	ldd	r25, Y+4	; 0x04
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	61 f0       	breq	.+24     	; 0x2636 <CLCD_voidGoToXY+0x4e>
    261e:	1d c0       	rjmp	.+58     	; 0x265a <CLCD_voidGoToXY+0x72>
    2620:	2b 81       	ldd	r18, Y+3	; 0x03
    2622:	3c 81       	ldd	r19, Y+4	; 0x04
    2624:	22 30       	cpi	r18, 0x02	; 2
    2626:	31 05       	cpc	r19, r1
    2628:	81 f0       	breq	.+32     	; 0x264a <CLCD_voidGoToXY+0x62>
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	9c 81       	ldd	r25, Y+4	; 0x04
    262e:	83 30       	cpi	r24, 0x03	; 3
    2630:	91 05       	cpc	r25, r1
    2632:	79 f0       	breq	.+30     	; 0x2652 <CLCD_voidGoToXY+0x6a>
    2634:	12 c0       	rjmp	.+36     	; 0x265a <CLCD_voidGoToXY+0x72>
	case 0:
		CLCD_voidSendCommand(128 + Copy_u8YPos);
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	80 58       	subi	r24, 0x80	; 128
    263a:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>
    263e:	0d c0       	rjmp	.+26     	; 0x265a <CLCD_voidGoToXY+0x72>
		break;
	case 1:
		CLCD_voidSendCommand(192 + Copy_u8YPos);
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
    2642:	80 54       	subi	r24, 0x40	; 64
    2644:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>
    2648:	08 c0       	rjmp	.+16     	; 0x265a <CLCD_voidGoToXY+0x72>
		break;
	case 2:
		CLCD_voidSendCommand(256 + Copy_u8YPos);
    264a:	8a 81       	ldd	r24, Y+2	; 0x02
    264c:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>
    2650:	04 c0       	rjmp	.+8      	; 0x265a <CLCD_voidGoToXY+0x72>
		break;
	case 3:
		CLCD_voidSendCommand(320 + Copy_u8YPos);
    2652:	8a 81       	ldd	r24, Y+2	; 0x02
    2654:	80 5c       	subi	r24, 0xC0	; 192
    2656:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>
	default:
		//
		break;

	}
}
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern , u8 Copy_u8PatternNumber , u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	27 97       	sbiw	r28, 0x07	; 7
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	9c 83       	std	Y+4, r25	; 0x04
    267e:	8b 83       	std	Y+3, r24	; 0x03
    2680:	6d 83       	std	Y+5, r22	; 0x05
    2682:	4e 83       	std	Y+6, r20	; 0x06
    2684:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAdress = 0;
    2686:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterator;
	u8SateSpecialCharIndx = 1;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	80 93 99 01 	sts	0x0199, r24

	Local_u8CGRAMAdress = Copy_u8PatternNumber * 8;
    268e:	8d 81       	ldd	r24, Y+5	; 0x05
    2690:	88 2f       	mov	r24, r24
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	88 0f       	add	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	88 0f       	add	r24, r24
    269a:	99 1f       	adc	r25, r25
    269c:	88 0f       	add	r24, r24
    269e:	99 1f       	adc	r25, r25
    26a0:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCommand(Local_u8CGRAMAdress + 64);
    26a2:	8a 81       	ldd	r24, Y+2	; 0x02
    26a4:	80 5c       	subi	r24, 0xC0	; 192
    26a6:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>

	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator++)
    26aa:	19 82       	std	Y+1, r1	; 0x01
    26ac:	0e c0       	rjmp	.+28     	; 0x26ca <CLCD_voidWriteSpecialCharacter+0x62>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	28 2f       	mov	r18, r24
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	8b 81       	ldd	r24, Y+3	; 0x03
    26b6:	9c 81       	ldd	r25, Y+4	; 0x04
    26b8:	fc 01       	movw	r30, r24
    26ba:	e2 0f       	add	r30, r18
    26bc:	f3 1f       	adc	r31, r19
    26be:	80 81       	ld	r24, Z
    26c0:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <CLCD_voidSendData>
	u8SateSpecialCharIndx = 1;

	Local_u8CGRAMAdress = Copy_u8PatternNumber * 8;
	CLCD_voidSendCommand(Local_u8CGRAMAdress + 64);

	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator++)
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	8f 5f       	subi	r24, 0xFF	; 255
    26c8:	89 83       	std	Y+1, r24	; 0x01
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	88 30       	cpi	r24, 0x08	; 8
    26ce:	78 f3       	brcs	.-34     	; 0x26ae <CLCD_voidWriteSpecialCharacter+0x46>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}
	CLCD_voidGoToXY(Copy_u8XPos , Copy_u8YPos);
    26d0:	8e 81       	ldd	r24, Y+6	; 0x06
    26d2:	6f 81       	ldd	r22, Y+7	; 0x07
    26d4:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNumber);
    26d8:	8d 81       	ldd	r24, Y+5	; 0x05
    26da:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <CLCD_voidSendData>
	u8SateSpecialCharIndx = 0;
    26de:	10 92 99 01 	sts	0x0199, r1
}
    26e2:	27 96       	adiw	r28, 0x07	; 7
    26e4:	0f b6       	in	r0, 0x3f	; 63
    26e6:	f8 94       	cli
    26e8:	de bf       	out	0x3e, r29	; 62
    26ea:	0f be       	out	0x3f, r0	; 63
    26ec:	cd bf       	out	0x3d, r28	; 61
    26ee:	cf 91       	pop	r28
    26f0:	df 91       	pop	r29
    26f2:	08 95       	ret

000026f4 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(u32 Copy_u32Number)
{
    26f4:	df 93       	push	r29
    26f6:	cf 93       	push	r28
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
    26fc:	61 97       	sbiw	r28, 0x11	; 17
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	f8 94       	cli
    2702:	de bf       	out	0x3e, r29	; 62
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	cd bf       	out	0x3d, r28	; 61
    2708:	6e 87       	std	Y+14, r22	; 0x0e
    270a:	7f 87       	std	Y+15, r23	; 0x0f
    270c:	88 8b       	std	Y+16, r24	; 0x10
    270e:	99 8b       	std	Y+17, r25	; 0x11
	u8 Local_u8DigitNumber;
	s8 Local_s8Counter = -1 , Local_s8Iterator;
    2710:	8f ef       	ldi	r24, 0xFF	; 255
    2712:	8a 83       	std	Y+2, r24	; 0x02
	u8 Array_Number[CLCD_SIZE_OF_ARRAY];
	do
	{
		Local_s8Counter++;
    2714:	8a 81       	ldd	r24, Y+2	; 0x02
    2716:	8f 5f       	subi	r24, 0xFF	; 255
    2718:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8DigitNumber = Copy_u32Number % 10;
    271a:	8e 85       	ldd	r24, Y+14	; 0x0e
    271c:	9f 85       	ldd	r25, Y+15	; 0x0f
    271e:	a8 89       	ldd	r26, Y+16	; 0x10
    2720:	b9 89       	ldd	r27, Y+17	; 0x11
    2722:	2a e0       	ldi	r18, 0x0A	; 10
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e0       	ldi	r20, 0x00	; 0
    2728:	50 e0       	ldi	r21, 0x00	; 0
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	0e 94 26 2b 	call	0x564c	; 0x564c <__udivmodsi4>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	8b 83       	std	Y+3, r24	; 0x03
		Array_Number[Local_s8Counter] = Local_u8DigitNumber + '0';
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	28 2f       	mov	r18, r24
    273c:	33 27       	eor	r19, r19
    273e:	27 fd       	sbrc	r18, 7
    2740:	30 95       	com	r19
    2742:	8b 81       	ldd	r24, Y+3	; 0x03
    2744:	48 2f       	mov	r20, r24
    2746:	40 5d       	subi	r20, 0xD0	; 208
    2748:	ce 01       	movw	r24, r28
    274a:	04 96       	adiw	r24, 0x04	; 4
    274c:	fc 01       	movw	r30, r24
    274e:	e2 0f       	add	r30, r18
    2750:	f3 1f       	adc	r31, r19
    2752:	40 83       	st	Z, r20
		Copy_u32Number /= 10;
    2754:	8e 85       	ldd	r24, Y+14	; 0x0e
    2756:	9f 85       	ldd	r25, Y+15	; 0x0f
    2758:	a8 89       	ldd	r26, Y+16	; 0x10
    275a:	b9 89       	ldd	r27, Y+17	; 0x11
    275c:	2a e0       	ldi	r18, 0x0A	; 10
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	40 e0       	ldi	r20, 0x00	; 0
    2762:	50 e0       	ldi	r21, 0x00	; 0
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 26 2b 	call	0x564c	; 0x564c <__udivmodsi4>
    276c:	da 01       	movw	r26, r20
    276e:	c9 01       	movw	r24, r18
    2770:	8e 87       	std	Y+14, r24	; 0x0e
    2772:	9f 87       	std	Y+15, r25	; 0x0f
    2774:	a8 8b       	std	Y+16, r26	; 0x10
    2776:	b9 8b       	std	Y+17, r27	; 0x11
	}while(Copy_u32Number != 0);
    2778:	8e 85       	ldd	r24, Y+14	; 0x0e
    277a:	9f 85       	ldd	r25, Y+15	; 0x0f
    277c:	a8 89       	ldd	r26, Y+16	; 0x10
    277e:	b9 89       	ldd	r27, Y+17	; 0x11
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	a1 05       	cpc	r26, r1
    2784:	b1 05       	cpc	r27, r1
    2786:	31 f6       	brne	.-116    	; 0x2714 <CLCD_voidSendNumber+0x20>
	for(Local_s8Iterator = Local_s8Counter; Local_s8Iterator >= 0; Local_s8Iterator--)
    2788:	8a 81       	ldd	r24, Y+2	; 0x02
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	10 c0       	rjmp	.+32     	; 0x27ae <CLCD_voidSendNumber+0xba>
	{
		CLCD_voidSendData(Array_Number[Local_s8Iterator]);
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	28 2f       	mov	r18, r24
    2792:	33 27       	eor	r19, r19
    2794:	27 fd       	sbrc	r18, 7
    2796:	30 95       	com	r19
    2798:	ce 01       	movw	r24, r28
    279a:	04 96       	adiw	r24, 0x04	; 4
    279c:	fc 01       	movw	r30, r24
    279e:	e2 0f       	add	r30, r18
    27a0:	f3 1f       	adc	r31, r19
    27a2:	80 81       	ld	r24, Z
    27a4:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <CLCD_voidSendData>
		Local_s8Counter++;
		Local_u8DigitNumber = Copy_u32Number % 10;
		Array_Number[Local_s8Counter] = Local_u8DigitNumber + '0';
		Copy_u32Number /= 10;
	}while(Copy_u32Number != 0);
	for(Local_s8Iterator = Local_s8Counter; Local_s8Iterator >= 0; Local_s8Iterator--)
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	81 50       	subi	r24, 0x01	; 1
    27ac:	89 83       	std	Y+1, r24	; 0x01
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	88 23       	and	r24, r24
    27b2:	6c f7       	brge	.-38     	; 0x278e <CLCD_voidSendNumber+0x9a>
	{
		CLCD_voidSendData(Array_Number[Local_s8Iterator]);
	}
}
    27b4:	61 96       	adiw	r28, 0x11	; 17
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	cd bf       	out	0x3d, r28	; 61
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <CLCD_voidIntegerToString>:

void CLCD_voidIntegerToString (u8 value)	// Display certain integer value on screen
{
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	61 97       	sbiw	r28, 0x11	; 17
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	89 8b       	std	Y+17, r24	; 0x11
	u8 number_str[16];
	itoa(value, number_str, 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    27dc:	89 89       	ldd	r24, Y+17	; 0x11
    27de:	88 2f       	mov	r24, r24
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	9e 01       	movw	r18, r28
    27e4:	2f 5f       	subi	r18, 0xFF	; 255
    27e6:	3f 4f       	sbci	r19, 0xFF	; 255
    27e8:	b9 01       	movw	r22, r18
    27ea:	4a e0       	ldi	r20, 0x0A	; 10
    27ec:	50 e0       	ldi	r21, 0x00	; 0
    27ee:	0e 94 9a 2b 	call	0x5734	; 0x5734 <itoa>
	CLCD_voidSendString(number_str);
    27f2:	ce 01       	movw	r24, r28
    27f4:	01 96       	adiw	r24, 0x01	; 1
    27f6:	0e 94 cb 12 	call	0x2596	; 0x2596 <CLCD_voidSendString>
}
    27fa:	61 96       	adiw	r28, 0x11	; 17
    27fc:	0f b6       	in	r0, 0x3f	; 63
    27fe:	f8 94       	cli
    2800:	de bf       	out	0x3e, r29	; 62
    2802:	0f be       	out	0x3f, r0	; 63
    2804:	cd bf       	out	0x3d, r28	; 61
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	08 95       	ret

0000280c <CLCD_voidClearScreen>:

void CLCD_voidClearScreen (void)
{
    280c:	df 93       	push	r29
    280e:	cf 93       	push	r28
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(LCD_CLEAR_COMMAND);
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>
}
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	08 95       	ret

00002820 <DIO_voidInit>:
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidInit(void)
{
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_INPUT);
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	60 e0       	ldi	r22, 0x00	; 0
    282c:	40 e0       	ldi	r20, 0x00	; 0
    282e:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN1,DIO_u8PIN_INPUT);
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	61 e0       	ldi	r22, 0x01	; 1
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN2,DIO_u8PIN_INPUT);
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	62 e0       	ldi	r22, 0x02	; 2
    2840:	40 e0       	ldi	r20, 0x00	; 0
    2842:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN3,DIO_u8PIN_INPUT);
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	63 e0       	ldi	r22, 0x03	; 3
    284a:	40 e0       	ldi	r20, 0x00	; 0
    284c:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_INPUT);
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	64 e0       	ldi	r22, 0x04	; 4
    2854:	40 e0       	ldi	r20, 0x00	; 0
    2856:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_INPUT);
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	65 e0       	ldi	r22, 0x05	; 5
    285e:	40 e0       	ldi	r20, 0x00	; 0
    2860:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN6,DIO_u8PIN_INPUT);
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	66 e0       	ldi	r22, 0x06	; 6
    2868:	40 e0       	ldi	r20, 0x00	; 0
    286a:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN0,DIO_u8PIN_OUTPUT);
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	60 e0       	ldi	r22, 0x00	; 0
    2872:	41 e0       	ldi	r20, 0x01	; 1
    2874:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN1,DIO_u8PIN_OUTPUT);
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	61 e0       	ldi	r22, 0x01	; 1
    287c:	41 e0       	ldi	r20, 0x01	; 1
    287e:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_OUTPUT);
    2882:	82 e0       	ldi	r24, 0x02	; 2
    2884:	60 e0       	ldi	r22, 0x00	; 0
    2886:	41 e0       	ldi	r20, 0x01	; 1
    2888:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_OUTPUT);
    288c:	82 e0       	ldi	r24, 0x02	; 2
    288e:	61 e0       	ldi	r22, 0x01	; 1
    2890:	41 e0       	ldi	r20, 0x01	; 1
    2892:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN2,DIO_u8PIN_OUTPUT);
    2896:	82 e0       	ldi	r24, 0x02	; 2
    2898:	62 e0       	ldi	r22, 0x02	; 2
    289a:	41 e0       	ldi	r20, 0x01	; 1
    289c:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_OUTPUT);
    28a0:	82 e0       	ldi	r24, 0x02	; 2
    28a2:	63 e0       	ldi	r22, 0x03	; 3
    28a4:	41 e0       	ldi	r20, 0x01	; 1
    28a6:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN4,DIO_u8PIN_OUTPUT);
    28aa:	82 e0       	ldi	r24, 0x02	; 2
    28ac:	64 e0       	ldi	r22, 0x04	; 4
    28ae:	41 e0       	ldi	r20, 0x01	; 1
    28b0:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN5,DIO_u8PIN_OUTPUT);
    28b4:	82 e0       	ldi	r24, 0x02	; 2
    28b6:	65 e0       	ldi	r22, 0x05	; 5
    28b8:	41 e0       	ldi	r20, 0x01	; 1
    28ba:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN6,DIO_u8PIN_OUTPUT);
    28be:	82 e0       	ldi	r24, 0x02	; 2
    28c0:	66 e0       	ldi	r22, 0x06	; 6
    28c2:	41 e0       	ldi	r20, 0x01	; 1
    28c4:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_OUTPUT);
    28c8:	82 e0       	ldi	r24, 0x02	; 2
    28ca:	67 e0       	ldi	r22, 0x07	; 7
    28cc:	41 e0       	ldi	r20, 0x01	; 1
    28ce:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN6,DIO_u8PIN_OUTPUT);
    28d2:	83 e0       	ldi	r24, 0x03	; 3
    28d4:	66 e0       	ldi	r22, 0x06	; 6
    28d6:	41 e0       	ldi	r20, 0x01	; 1
    28d8:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
}
    28dc:	cf 91       	pop	r28
    28de:	df 91       	pop	r29
    28e0:	08 95       	ret

000028e2 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    28e2:	df 93       	push	r29
    28e4:	cf 93       	push	r28
    28e6:	cd b7       	in	r28, 0x3d	; 61
    28e8:	de b7       	in	r29, 0x3e	; 62
    28ea:	2a 97       	sbiw	r28, 0x0a	; 10
    28ec:	0f b6       	in	r0, 0x3f	; 63
    28ee:	f8 94       	cli
    28f0:	de bf       	out	0x3e, r29	; 62
    28f2:	0f be       	out	0x3f, r0	; 63
    28f4:	cd bf       	out	0x3d, r28	; 61
    28f6:	8a 83       	std	Y+2, r24	; 0x02
    28f8:	6b 83       	std	Y+3, r22	; 0x03
    28fa:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    28fc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    28fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2900:	88 30       	cpi	r24, 0x08	; 8
    2902:	08 f0       	brcs	.+2      	; 0x2906 <DIO_u8SetPinDirection+0x24>
    2904:	b9 c1       	rjmp	.+882    	; 0x2c78 <DIO_u8SetPinDirection+0x396>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    2906:	8c 81       	ldd	r24, Y+4	; 0x04
    2908:	88 23       	and	r24, r24
    290a:	09 f0       	breq	.+2      	; 0x290e <DIO_u8SetPinDirection+0x2c>
    290c:	77 c0       	rjmp	.+238    	; 0x29fc <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    290e:	8a 81       	ldd	r24, Y+2	; 0x02
    2910:	28 2f       	mov	r18, r24
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	3a 87       	std	Y+10, r19	; 0x0a
    2916:	29 87       	std	Y+9, r18	; 0x09
    2918:	89 85       	ldd	r24, Y+9	; 0x09
    291a:	9a 85       	ldd	r25, Y+10	; 0x0a
    291c:	81 30       	cpi	r24, 0x01	; 1
    291e:	91 05       	cpc	r25, r1
    2920:	59 f1       	breq	.+86     	; 0x2978 <DIO_u8SetPinDirection+0x96>
    2922:	29 85       	ldd	r18, Y+9	; 0x09
    2924:	3a 85       	ldd	r19, Y+10	; 0x0a
    2926:	22 30       	cpi	r18, 0x02	; 2
    2928:	31 05       	cpc	r19, r1
    292a:	2c f4       	brge	.+10     	; 0x2936 <DIO_u8SetPinDirection+0x54>
    292c:	89 85       	ldd	r24, Y+9	; 0x09
    292e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2930:	00 97       	sbiw	r24, 0x00	; 0
    2932:	69 f0       	breq	.+26     	; 0x294e <DIO_u8SetPinDirection+0x6c>
    2934:	60 c0       	rjmp	.+192    	; 0x29f6 <DIO_u8SetPinDirection+0x114>
    2936:	29 85       	ldd	r18, Y+9	; 0x09
    2938:	3a 85       	ldd	r19, Y+10	; 0x0a
    293a:	22 30       	cpi	r18, 0x02	; 2
    293c:	31 05       	cpc	r19, r1
    293e:	89 f1       	breq	.+98     	; 0x29a2 <DIO_u8SetPinDirection+0xc0>
    2940:	89 85       	ldd	r24, Y+9	; 0x09
    2942:	9a 85       	ldd	r25, Y+10	; 0x0a
    2944:	83 30       	cpi	r24, 0x03	; 3
    2946:	91 05       	cpc	r25, r1
    2948:	09 f4       	brne	.+2      	; 0x294c <DIO_u8SetPinDirection+0x6a>
    294a:	40 c0       	rjmp	.+128    	; 0x29cc <DIO_u8SetPinDirection+0xea>
    294c:	54 c0       	rjmp	.+168    	; 0x29f6 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    294e:	aa e3       	ldi	r26, 0x3A	; 58
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	ea e3       	ldi	r30, 0x3A	; 58
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	48 2f       	mov	r20, r24
    295a:	8b 81       	ldd	r24, Y+3	; 0x03
    295c:	28 2f       	mov	r18, r24
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	02 2e       	mov	r0, r18
    2966:	02 c0       	rjmp	.+4      	; 0x296c <DIO_u8SetPinDirection+0x8a>
    2968:	88 0f       	add	r24, r24
    296a:	99 1f       	adc	r25, r25
    296c:	0a 94       	dec	r0
    296e:	e2 f7       	brpl	.-8      	; 0x2968 <DIO_u8SetPinDirection+0x86>
    2970:	80 95       	com	r24
    2972:	84 23       	and	r24, r20
    2974:	8c 93       	st	X, r24
    2976:	82 c1       	rjmp	.+772    	; 0x2c7c <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    2978:	a7 e3       	ldi	r26, 0x37	; 55
    297a:	b0 e0       	ldi	r27, 0x00	; 0
    297c:	e7 e3       	ldi	r30, 0x37	; 55
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	80 81       	ld	r24, Z
    2982:	48 2f       	mov	r20, r24
    2984:	8b 81       	ldd	r24, Y+3	; 0x03
    2986:	28 2f       	mov	r18, r24
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	02 2e       	mov	r0, r18
    2990:	02 c0       	rjmp	.+4      	; 0x2996 <DIO_u8SetPinDirection+0xb4>
    2992:	88 0f       	add	r24, r24
    2994:	99 1f       	adc	r25, r25
    2996:	0a 94       	dec	r0
    2998:	e2 f7       	brpl	.-8      	; 0x2992 <DIO_u8SetPinDirection+0xb0>
    299a:	80 95       	com	r24
    299c:	84 23       	and	r24, r20
    299e:	8c 93       	st	X, r24
    29a0:	6d c1       	rjmp	.+730    	; 0x2c7c <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    29a2:	a4 e3       	ldi	r26, 0x34	; 52
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	e4 e3       	ldi	r30, 0x34	; 52
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	80 81       	ld	r24, Z
    29ac:	48 2f       	mov	r20, r24
    29ae:	8b 81       	ldd	r24, Y+3	; 0x03
    29b0:	28 2f       	mov	r18, r24
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	02 2e       	mov	r0, r18
    29ba:	02 c0       	rjmp	.+4      	; 0x29c0 <DIO_u8SetPinDirection+0xde>
    29bc:	88 0f       	add	r24, r24
    29be:	99 1f       	adc	r25, r25
    29c0:	0a 94       	dec	r0
    29c2:	e2 f7       	brpl	.-8      	; 0x29bc <DIO_u8SetPinDirection+0xda>
    29c4:	80 95       	com	r24
    29c6:	84 23       	and	r24, r20
    29c8:	8c 93       	st	X, r24
    29ca:	58 c1       	rjmp	.+688    	; 0x2c7c <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    29cc:	a1 e3       	ldi	r26, 0x31	; 49
    29ce:	b0 e0       	ldi	r27, 0x00	; 0
    29d0:	e1 e3       	ldi	r30, 0x31	; 49
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	48 2f       	mov	r20, r24
    29d8:	8b 81       	ldd	r24, Y+3	; 0x03
    29da:	28 2f       	mov	r18, r24
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	02 2e       	mov	r0, r18
    29e4:	02 c0       	rjmp	.+4      	; 0x29ea <DIO_u8SetPinDirection+0x108>
    29e6:	88 0f       	add	r24, r24
    29e8:	99 1f       	adc	r25, r25
    29ea:	0a 94       	dec	r0
    29ec:	e2 f7       	brpl	.-8      	; 0x29e6 <DIO_u8SetPinDirection+0x104>
    29ee:	80 95       	com	r24
    29f0:	84 23       	and	r24, r20
    29f2:	8c 93       	st	X, r24
    29f4:	43 c1       	rjmp	.+646    	; 0x2c7c <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	89 83       	std	Y+1, r24	; 0x01
    29fa:	40 c1       	rjmp	.+640    	; 0x2c7c <DIO_u8SetPinDirection+0x39a>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
    29fc:	8c 81       	ldd	r24, Y+4	; 0x04
    29fe:	81 30       	cpi	r24, 0x01	; 1
    2a00:	09 f0       	breq	.+2      	; 0x2a04 <DIO_u8SetPinDirection+0x122>
    2a02:	72 c0       	rjmp	.+228    	; 0x2ae8 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    2a04:	8a 81       	ldd	r24, Y+2	; 0x02
    2a06:	28 2f       	mov	r18, r24
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	38 87       	std	Y+8, r19	; 0x08
    2a0c:	2f 83       	std	Y+7, r18	; 0x07
    2a0e:	8f 81       	ldd	r24, Y+7	; 0x07
    2a10:	98 85       	ldd	r25, Y+8	; 0x08
    2a12:	81 30       	cpi	r24, 0x01	; 1
    2a14:	91 05       	cpc	r25, r1
    2a16:	49 f1       	breq	.+82     	; 0x2a6a <DIO_u8SetPinDirection+0x188>
    2a18:	2f 81       	ldd	r18, Y+7	; 0x07
    2a1a:	38 85       	ldd	r19, Y+8	; 0x08
    2a1c:	22 30       	cpi	r18, 0x02	; 2
    2a1e:	31 05       	cpc	r19, r1
    2a20:	2c f4       	brge	.+10     	; 0x2a2c <DIO_u8SetPinDirection+0x14a>
    2a22:	8f 81       	ldd	r24, Y+7	; 0x07
    2a24:	98 85       	ldd	r25, Y+8	; 0x08
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	61 f0       	breq	.+24     	; 0x2a42 <DIO_u8SetPinDirection+0x160>
    2a2a:	5b c0       	rjmp	.+182    	; 0x2ae2 <DIO_u8SetPinDirection+0x200>
    2a2c:	2f 81       	ldd	r18, Y+7	; 0x07
    2a2e:	38 85       	ldd	r19, Y+8	; 0x08
    2a30:	22 30       	cpi	r18, 0x02	; 2
    2a32:	31 05       	cpc	r19, r1
    2a34:	71 f1       	breq	.+92     	; 0x2a92 <DIO_u8SetPinDirection+0x1b0>
    2a36:	8f 81       	ldd	r24, Y+7	; 0x07
    2a38:	98 85       	ldd	r25, Y+8	; 0x08
    2a3a:	83 30       	cpi	r24, 0x03	; 3
    2a3c:	91 05       	cpc	r25, r1
    2a3e:	e9 f1       	breq	.+122    	; 0x2aba <DIO_u8SetPinDirection+0x1d8>
    2a40:	50 c0       	rjmp	.+160    	; 0x2ae2 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    2a42:	aa e3       	ldi	r26, 0x3A	; 58
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	ea e3       	ldi	r30, 0x3A	; 58
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	48 2f       	mov	r20, r24
    2a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a50:	28 2f       	mov	r18, r24
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	02 2e       	mov	r0, r18
    2a5a:	02 c0       	rjmp	.+4      	; 0x2a60 <DIO_u8SetPinDirection+0x17e>
    2a5c:	88 0f       	add	r24, r24
    2a5e:	99 1f       	adc	r25, r25
    2a60:	0a 94       	dec	r0
    2a62:	e2 f7       	brpl	.-8      	; 0x2a5c <DIO_u8SetPinDirection+0x17a>
    2a64:	84 2b       	or	r24, r20
    2a66:	8c 93       	st	X, r24
    2a68:	09 c1       	rjmp	.+530    	; 0x2c7c <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    2a6a:	a7 e3       	ldi	r26, 0x37	; 55
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	e7 e3       	ldi	r30, 0x37	; 55
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	48 2f       	mov	r20, r24
    2a76:	8b 81       	ldd	r24, Y+3	; 0x03
    2a78:	28 2f       	mov	r18, r24
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	02 2e       	mov	r0, r18
    2a82:	02 c0       	rjmp	.+4      	; 0x2a88 <DIO_u8SetPinDirection+0x1a6>
    2a84:	88 0f       	add	r24, r24
    2a86:	99 1f       	adc	r25, r25
    2a88:	0a 94       	dec	r0
    2a8a:	e2 f7       	brpl	.-8      	; 0x2a84 <DIO_u8SetPinDirection+0x1a2>
    2a8c:	84 2b       	or	r24, r20
    2a8e:	8c 93       	st	X, r24
    2a90:	f5 c0       	rjmp	.+490    	; 0x2c7c <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    2a92:	a4 e3       	ldi	r26, 0x34	; 52
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	e4 e3       	ldi	r30, 0x34	; 52
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	48 2f       	mov	r20, r24
    2a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa0:	28 2f       	mov	r18, r24
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	02 2e       	mov	r0, r18
    2aaa:	02 c0       	rjmp	.+4      	; 0x2ab0 <DIO_u8SetPinDirection+0x1ce>
    2aac:	88 0f       	add	r24, r24
    2aae:	99 1f       	adc	r25, r25
    2ab0:	0a 94       	dec	r0
    2ab2:	e2 f7       	brpl	.-8      	; 0x2aac <DIO_u8SetPinDirection+0x1ca>
    2ab4:	84 2b       	or	r24, r20
    2ab6:	8c 93       	st	X, r24
    2ab8:	e1 c0       	rjmp	.+450    	; 0x2c7c <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    2aba:	a1 e3       	ldi	r26, 0x31	; 49
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	e1 e3       	ldi	r30, 0x31	; 49
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	48 2f       	mov	r20, r24
    2ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac8:	28 2f       	mov	r18, r24
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	02 2e       	mov	r0, r18
    2ad2:	02 c0       	rjmp	.+4      	; 0x2ad8 <DIO_u8SetPinDirection+0x1f6>
    2ad4:	88 0f       	add	r24, r24
    2ad6:	99 1f       	adc	r25, r25
    2ad8:	0a 94       	dec	r0
    2ada:	e2 f7       	brpl	.-8      	; 0x2ad4 <DIO_u8SetPinDirection+0x1f2>
    2adc:	84 2b       	or	r24, r20
    2ade:	8c 93       	st	X, r24
    2ae0:	cd c0       	rjmp	.+410    	; 0x2c7c <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	89 83       	std	Y+1, r24	; 0x01
    2ae6:	ca c0       	rjmp	.+404    	; 0x2c7c <DIO_u8SetPinDirection+0x39a>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_INPULLUP)
    2ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aea:	82 30       	cpi	r24, 0x02	; 2
    2aec:	09 f0       	breq	.+2      	; 0x2af0 <DIO_u8SetPinDirection+0x20e>
    2aee:	c1 c0       	rjmp	.+386    	; 0x2c72 <DIO_u8SetPinDirection+0x390>
		{
			switch(Copy_u8Port)
    2af0:	8a 81       	ldd	r24, Y+2	; 0x02
    2af2:	28 2f       	mov	r18, r24
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	3e 83       	std	Y+6, r19	; 0x06
    2af8:	2d 83       	std	Y+5, r18	; 0x05
    2afa:	8d 81       	ldd	r24, Y+5	; 0x05
    2afc:	9e 81       	ldd	r25, Y+6	; 0x06
    2afe:	81 30       	cpi	r24, 0x01	; 1
    2b00:	91 05       	cpc	r25, r1
    2b02:	09 f4       	brne	.+2      	; 0x2b06 <DIO_u8SetPinDirection+0x224>
    2b04:	3e c0       	rjmp	.+124    	; 0x2b82 <DIO_u8SetPinDirection+0x2a0>
    2b06:	2d 81       	ldd	r18, Y+5	; 0x05
    2b08:	3e 81       	ldd	r19, Y+6	; 0x06
    2b0a:	22 30       	cpi	r18, 0x02	; 2
    2b0c:	31 05       	cpc	r19, r1
    2b0e:	2c f4       	brge	.+10     	; 0x2b1a <DIO_u8SetPinDirection+0x238>
    2b10:	8d 81       	ldd	r24, Y+5	; 0x05
    2b12:	9e 81       	ldd	r25, Y+6	; 0x06
    2b14:	00 97       	sbiw	r24, 0x00	; 0
    2b16:	71 f0       	breq	.+28     	; 0x2b34 <DIO_u8SetPinDirection+0x252>
    2b18:	a9 c0       	rjmp	.+338    	; 0x2c6c <DIO_u8SetPinDirection+0x38a>
    2b1a:	2d 81       	ldd	r18, Y+5	; 0x05
    2b1c:	3e 81       	ldd	r19, Y+6	; 0x06
    2b1e:	22 30       	cpi	r18, 0x02	; 2
    2b20:	31 05       	cpc	r19, r1
    2b22:	09 f4       	brne	.+2      	; 0x2b26 <DIO_u8SetPinDirection+0x244>
    2b24:	55 c0       	rjmp	.+170    	; 0x2bd0 <DIO_u8SetPinDirection+0x2ee>
    2b26:	8d 81       	ldd	r24, Y+5	; 0x05
    2b28:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2a:	83 30       	cpi	r24, 0x03	; 3
    2b2c:	91 05       	cpc	r25, r1
    2b2e:	09 f4       	brne	.+2      	; 0x2b32 <DIO_u8SetPinDirection+0x250>
    2b30:	76 c0       	rjmp	.+236    	; 0x2c1e <DIO_u8SetPinDirection+0x33c>
    2b32:	9c c0       	rjmp	.+312    	; 0x2c6c <DIO_u8SetPinDirection+0x38a>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); SET_BIT(PORTA,Copy_u8Pin); break;
    2b34:	aa e3       	ldi	r26, 0x3A	; 58
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	ea e3       	ldi	r30, 0x3A	; 58
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	48 2f       	mov	r20, r24
    2b40:	8b 81       	ldd	r24, Y+3	; 0x03
    2b42:	28 2f       	mov	r18, r24
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <DIO_u8SetPinDirection+0x26e>
    2b4c:	88 0f       	add	r24, r24
    2b4e:	99 1f       	adc	r25, r25
    2b50:	2a 95       	dec	r18
    2b52:	e2 f7       	brpl	.-8      	; 0x2b4c <DIO_u8SetPinDirection+0x26a>
    2b54:	80 95       	com	r24
    2b56:	84 23       	and	r24, r20
    2b58:	8c 93       	st	X, r24
    2b5a:	ab e3       	ldi	r26, 0x3B	; 59
    2b5c:	b0 e0       	ldi	r27, 0x00	; 0
    2b5e:	eb e3       	ldi	r30, 0x3B	; 59
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	48 2f       	mov	r20, r24
    2b66:	8b 81       	ldd	r24, Y+3	; 0x03
    2b68:	28 2f       	mov	r18, r24
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	02 2e       	mov	r0, r18
    2b72:	02 c0       	rjmp	.+4      	; 0x2b78 <DIO_u8SetPinDirection+0x296>
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	0a 94       	dec	r0
    2b7a:	e2 f7       	brpl	.-8      	; 0x2b74 <DIO_u8SetPinDirection+0x292>
    2b7c:	84 2b       	or	r24, r20
    2b7e:	8c 93       	st	X, r24
    2b80:	7d c0       	rjmp	.+250    	; 0x2c7c <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); SET_BIT(PORTB,Copy_u8Pin); break;
    2b82:	a7 e3       	ldi	r26, 0x37	; 55
    2b84:	b0 e0       	ldi	r27, 0x00	; 0
    2b86:	e7 e3       	ldi	r30, 0x37	; 55
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	80 81       	ld	r24, Z
    2b8c:	48 2f       	mov	r20, r24
    2b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b90:	28 2f       	mov	r18, r24
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	02 c0       	rjmp	.+4      	; 0x2b9e <DIO_u8SetPinDirection+0x2bc>
    2b9a:	88 0f       	add	r24, r24
    2b9c:	99 1f       	adc	r25, r25
    2b9e:	2a 95       	dec	r18
    2ba0:	e2 f7       	brpl	.-8      	; 0x2b9a <DIO_u8SetPinDirection+0x2b8>
    2ba2:	80 95       	com	r24
    2ba4:	84 23       	and	r24, r20
    2ba6:	8c 93       	st	X, r24
    2ba8:	a8 e3       	ldi	r26, 0x38	; 56
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	e8 e3       	ldi	r30, 0x38	; 56
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	80 81       	ld	r24, Z
    2bb2:	48 2f       	mov	r20, r24
    2bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	02 2e       	mov	r0, r18
    2bc0:	02 c0       	rjmp	.+4      	; 0x2bc6 <DIO_u8SetPinDirection+0x2e4>
    2bc2:	88 0f       	add	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	0a 94       	dec	r0
    2bc8:	e2 f7       	brpl	.-8      	; 0x2bc2 <DIO_u8SetPinDirection+0x2e0>
    2bca:	84 2b       	or	r24, r20
    2bcc:	8c 93       	st	X, r24
    2bce:	56 c0       	rjmp	.+172    	; 0x2c7c <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); SET_BIT(PORTC,Copy_u8Pin); break;
    2bd0:	a4 e3       	ldi	r26, 0x34	; 52
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	e4 e3       	ldi	r30, 0x34	; 52
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	48 2f       	mov	r20, r24
    2bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bde:	28 2f       	mov	r18, r24
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	02 c0       	rjmp	.+4      	; 0x2bec <DIO_u8SetPinDirection+0x30a>
    2be8:	88 0f       	add	r24, r24
    2bea:	99 1f       	adc	r25, r25
    2bec:	2a 95       	dec	r18
    2bee:	e2 f7       	brpl	.-8      	; 0x2be8 <DIO_u8SetPinDirection+0x306>
    2bf0:	80 95       	com	r24
    2bf2:	84 23       	and	r24, r20
    2bf4:	8c 93       	st	X, r24
    2bf6:	a5 e3       	ldi	r26, 0x35	; 53
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	e5 e3       	ldi	r30, 0x35	; 53
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	48 2f       	mov	r20, r24
    2c02:	8b 81       	ldd	r24, Y+3	; 0x03
    2c04:	28 2f       	mov	r18, r24
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	02 2e       	mov	r0, r18
    2c0e:	02 c0       	rjmp	.+4      	; 0x2c14 <DIO_u8SetPinDirection+0x332>
    2c10:	88 0f       	add	r24, r24
    2c12:	99 1f       	adc	r25, r25
    2c14:	0a 94       	dec	r0
    2c16:	e2 f7       	brpl	.-8      	; 0x2c10 <DIO_u8SetPinDirection+0x32e>
    2c18:	84 2b       	or	r24, r20
    2c1a:	8c 93       	st	X, r24
    2c1c:	2f c0       	rjmp	.+94     	; 0x2c7c <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); SET_BIT(PORTD,Copy_u8Pin); break;
    2c1e:	a1 e3       	ldi	r26, 0x31	; 49
    2c20:	b0 e0       	ldi	r27, 0x00	; 0
    2c22:	e1 e3       	ldi	r30, 0x31	; 49
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	80 81       	ld	r24, Z
    2c28:	48 2f       	mov	r20, r24
    2c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2c:	28 2f       	mov	r18, r24
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	02 c0       	rjmp	.+4      	; 0x2c3a <DIO_u8SetPinDirection+0x358>
    2c36:	88 0f       	add	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	2a 95       	dec	r18
    2c3c:	e2 f7       	brpl	.-8      	; 0x2c36 <DIO_u8SetPinDirection+0x354>
    2c3e:	80 95       	com	r24
    2c40:	84 23       	and	r24, r20
    2c42:	8c 93       	st	X, r24
    2c44:	a2 e3       	ldi	r26, 0x32	; 50
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	e2 e3       	ldi	r30, 0x32	; 50
    2c4a:	f0 e0       	ldi	r31, 0x00	; 0
    2c4c:	80 81       	ld	r24, Z
    2c4e:	48 2f       	mov	r20, r24
    2c50:	8b 81       	ldd	r24, Y+3	; 0x03
    2c52:	28 2f       	mov	r18, r24
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	02 2e       	mov	r0, r18
    2c5c:	02 c0       	rjmp	.+4      	; 0x2c62 <DIO_u8SetPinDirection+0x380>
    2c5e:	88 0f       	add	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	0a 94       	dec	r0
    2c64:	e2 f7       	brpl	.-8      	; 0x2c5e <DIO_u8SetPinDirection+0x37c>
    2c66:	84 2b       	or	r24, r20
    2c68:	8c 93       	st	X, r24
    2c6a:	08 c0       	rjmp	.+16     	; 0x2c7c <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	89 83       	std	Y+1, r24	; 0x01
    2c70:	05 c0       	rjmp	.+10     	; 0x2c7c <DIO_u8SetPinDirection+0x39a>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	89 83       	std	Y+1, r24	; 0x01
    2c76:	02 c0       	rjmp	.+4      	; 0x2c7c <DIO_u8SetPinDirection+0x39a>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c7e:	2a 96       	adiw	r28, 0x0a	; 10
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	f8 94       	cli
    2c84:	de bf       	out	0x3e, r29	; 62
    2c86:	0f be       	out	0x3f, r0	; 63
    2c88:	cd bf       	out	0x3d, r28	; 61
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	00 d0       	rcall	.+0      	; 0x2c96 <DIO_u8SetPortDirection+0x6>
    2c96:	00 d0       	rcall	.+0      	; 0x2c98 <DIO_u8SetPortDirection+0x8>
    2c98:	0f 92       	push	r0
    2c9a:	cd b7       	in	r28, 0x3d	; 61
    2c9c:	de b7       	in	r29, 0x3e	; 62
    2c9e:	8a 83       	std	Y+2, r24	; 0x02
    2ca0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2ca2:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    2ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca6:	28 2f       	mov	r18, r24
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	3d 83       	std	Y+5, r19	; 0x05
    2cac:	2c 83       	std	Y+4, r18	; 0x04
    2cae:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb0:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb2:	81 30       	cpi	r24, 0x01	; 1
    2cb4:	91 05       	cpc	r25, r1
    2cb6:	d1 f0       	breq	.+52     	; 0x2cec <DIO_u8SetPortDirection+0x5c>
    2cb8:	2c 81       	ldd	r18, Y+4	; 0x04
    2cba:	3d 81       	ldd	r19, Y+5	; 0x05
    2cbc:	22 30       	cpi	r18, 0x02	; 2
    2cbe:	31 05       	cpc	r19, r1
    2cc0:	2c f4       	brge	.+10     	; 0x2ccc <DIO_u8SetPortDirection+0x3c>
    2cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc4:	9d 81       	ldd	r25, Y+5	; 0x05
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	61 f0       	breq	.+24     	; 0x2ce2 <DIO_u8SetPortDirection+0x52>
    2cca:	1f c0       	rjmp	.+62     	; 0x2d0a <DIO_u8SetPortDirection+0x7a>
    2ccc:	2c 81       	ldd	r18, Y+4	; 0x04
    2cce:	3d 81       	ldd	r19, Y+5	; 0x05
    2cd0:	22 30       	cpi	r18, 0x02	; 2
    2cd2:	31 05       	cpc	r19, r1
    2cd4:	81 f0       	breq	.+32     	; 0x2cf6 <DIO_u8SetPortDirection+0x66>
    2cd6:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd8:	9d 81       	ldd	r25, Y+5	; 0x05
    2cda:	83 30       	cpi	r24, 0x03	; 3
    2cdc:	91 05       	cpc	r25, r1
    2cde:	81 f0       	breq	.+32     	; 0x2d00 <DIO_u8SetPortDirection+0x70>
    2ce0:	14 c0       	rjmp	.+40     	; 0x2d0a <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    2ce2:	ea e3       	ldi	r30, 0x3A	; 58
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce8:	80 83       	st	Z, r24
    2cea:	11 c0       	rjmp	.+34     	; 0x2d0e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    2cec:	e7 e3       	ldi	r30, 0x37	; 55
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf2:	80 83       	st	Z, r24
    2cf4:	0c c0       	rjmp	.+24     	; 0x2d0e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    2cf6:	e4 e3       	ldi	r30, 0x34	; 52
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfc:	80 83       	st	Z, r24
    2cfe:	07 c0       	rjmp	.+14     	; 0x2d0e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    2d00:	e1 e3       	ldi	r30, 0x31	; 49
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	8b 81       	ldd	r24, Y+3	; 0x03
    2d06:	80 83       	st	Z, r24
    2d08:	02 c0       	rjmp	.+4      	; 0x2d0e <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	0f 90       	pop	r0
    2d1a:	cf 91       	pop	r28
    2d1c:	df 91       	pop	r29
    2d1e:	08 95       	ret

00002d20 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    2d20:	df 93       	push	r29
    2d22:	cf 93       	push	r28
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
    2d28:	28 97       	sbiw	r28, 0x08	; 8
    2d2a:	0f b6       	in	r0, 0x3f	; 63
    2d2c:	f8 94       	cli
    2d2e:	de bf       	out	0x3e, r29	; 62
    2d30:	0f be       	out	0x3f, r0	; 63
    2d32:	cd bf       	out	0x3d, r28	; 61
    2d34:	8a 83       	std	Y+2, r24	; 0x02
    2d36:	6b 83       	std	Y+3, r22	; 0x03
    2d38:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2d3a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
    2d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3e:	88 30       	cpi	r24, 0x08	; 8
    2d40:	08 f0       	brcs	.+2      	; 0x2d44 <DIO_u8SetPinValue+0x24>
    2d42:	f4 c0       	rjmp	.+488    	; 0x2f2c <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    2d44:	8c 81       	ldd	r24, Y+4	; 0x04
    2d46:	88 23       	and	r24, r24
    2d48:	09 f0       	breq	.+2      	; 0x2d4c <DIO_u8SetPinValue+0x2c>
    2d4a:	77 c0       	rjmp	.+238    	; 0x2e3a <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    2d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4e:	28 2f       	mov	r18, r24
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	38 87       	std	Y+8, r19	; 0x08
    2d54:	2f 83       	std	Y+7, r18	; 0x07
    2d56:	8f 81       	ldd	r24, Y+7	; 0x07
    2d58:	98 85       	ldd	r25, Y+8	; 0x08
    2d5a:	81 30       	cpi	r24, 0x01	; 1
    2d5c:	91 05       	cpc	r25, r1
    2d5e:	59 f1       	breq	.+86     	; 0x2db6 <DIO_u8SetPinValue+0x96>
    2d60:	2f 81       	ldd	r18, Y+7	; 0x07
    2d62:	38 85       	ldd	r19, Y+8	; 0x08
    2d64:	22 30       	cpi	r18, 0x02	; 2
    2d66:	31 05       	cpc	r19, r1
    2d68:	2c f4       	brge	.+10     	; 0x2d74 <DIO_u8SetPinValue+0x54>
    2d6a:	8f 81       	ldd	r24, Y+7	; 0x07
    2d6c:	98 85       	ldd	r25, Y+8	; 0x08
    2d6e:	00 97       	sbiw	r24, 0x00	; 0
    2d70:	69 f0       	breq	.+26     	; 0x2d8c <DIO_u8SetPinValue+0x6c>
    2d72:	60 c0       	rjmp	.+192    	; 0x2e34 <DIO_u8SetPinValue+0x114>
    2d74:	2f 81       	ldd	r18, Y+7	; 0x07
    2d76:	38 85       	ldd	r19, Y+8	; 0x08
    2d78:	22 30       	cpi	r18, 0x02	; 2
    2d7a:	31 05       	cpc	r19, r1
    2d7c:	89 f1       	breq	.+98     	; 0x2de0 <DIO_u8SetPinValue+0xc0>
    2d7e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d80:	98 85       	ldd	r25, Y+8	; 0x08
    2d82:	83 30       	cpi	r24, 0x03	; 3
    2d84:	91 05       	cpc	r25, r1
    2d86:	09 f4       	brne	.+2      	; 0x2d8a <DIO_u8SetPinValue+0x6a>
    2d88:	40 c0       	rjmp	.+128    	; 0x2e0a <DIO_u8SetPinValue+0xea>
    2d8a:	54 c0       	rjmp	.+168    	; 0x2e34 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    2d8c:	ab e3       	ldi	r26, 0x3B	; 59
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	eb e3       	ldi	r30, 0x3B	; 59
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	48 2f       	mov	r20, r24
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	28 2f       	mov	r18, r24
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	02 2e       	mov	r0, r18
    2da4:	02 c0       	rjmp	.+4      	; 0x2daa <DIO_u8SetPinValue+0x8a>
    2da6:	88 0f       	add	r24, r24
    2da8:	99 1f       	adc	r25, r25
    2daa:	0a 94       	dec	r0
    2dac:	e2 f7       	brpl	.-8      	; 0x2da6 <DIO_u8SetPinValue+0x86>
    2dae:	80 95       	com	r24
    2db0:	84 23       	and	r24, r20
    2db2:	8c 93       	st	X, r24
    2db4:	bd c0       	rjmp	.+378    	; 0x2f30 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    2db6:	a8 e3       	ldi	r26, 0x38	; 56
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	e8 e3       	ldi	r30, 0x38	; 56
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	80 81       	ld	r24, Z
    2dc0:	48 2f       	mov	r20, r24
    2dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc4:	28 2f       	mov	r18, r24
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	02 2e       	mov	r0, r18
    2dce:	02 c0       	rjmp	.+4      	; 0x2dd4 <DIO_u8SetPinValue+0xb4>
    2dd0:	88 0f       	add	r24, r24
    2dd2:	99 1f       	adc	r25, r25
    2dd4:	0a 94       	dec	r0
    2dd6:	e2 f7       	brpl	.-8      	; 0x2dd0 <DIO_u8SetPinValue+0xb0>
    2dd8:	80 95       	com	r24
    2dda:	84 23       	and	r24, r20
    2ddc:	8c 93       	st	X, r24
    2dde:	a8 c0       	rjmp	.+336    	; 0x2f30 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    2de0:	a5 e3       	ldi	r26, 0x35	; 53
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	e5 e3       	ldi	r30, 0x35	; 53
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	80 81       	ld	r24, Z
    2dea:	48 2f       	mov	r20, r24
    2dec:	8b 81       	ldd	r24, Y+3	; 0x03
    2dee:	28 2f       	mov	r18, r24
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	02 2e       	mov	r0, r18
    2df8:	02 c0       	rjmp	.+4      	; 0x2dfe <DIO_u8SetPinValue+0xde>
    2dfa:	88 0f       	add	r24, r24
    2dfc:	99 1f       	adc	r25, r25
    2dfe:	0a 94       	dec	r0
    2e00:	e2 f7       	brpl	.-8      	; 0x2dfa <DIO_u8SetPinValue+0xda>
    2e02:	80 95       	com	r24
    2e04:	84 23       	and	r24, r20
    2e06:	8c 93       	st	X, r24
    2e08:	93 c0       	rjmp	.+294    	; 0x2f30 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    2e0a:	a2 e3       	ldi	r26, 0x32	; 50
    2e0c:	b0 e0       	ldi	r27, 0x00	; 0
    2e0e:	e2 e3       	ldi	r30, 0x32	; 50
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	48 2f       	mov	r20, r24
    2e16:	8b 81       	ldd	r24, Y+3	; 0x03
    2e18:	28 2f       	mov	r18, r24
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	02 2e       	mov	r0, r18
    2e22:	02 c0       	rjmp	.+4      	; 0x2e28 <DIO_u8SetPinValue+0x108>
    2e24:	88 0f       	add	r24, r24
    2e26:	99 1f       	adc	r25, r25
    2e28:	0a 94       	dec	r0
    2e2a:	e2 f7       	brpl	.-8      	; 0x2e24 <DIO_u8SetPinValue+0x104>
    2e2c:	80 95       	com	r24
    2e2e:	84 23       	and	r24, r20
    2e30:	8c 93       	st	X, r24
    2e32:	7e c0       	rjmp	.+252    	; 0x2f30 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	89 83       	std	Y+1, r24	; 0x01
    2e38:	7b c0       	rjmp	.+246    	; 0x2f30 <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
    2e3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e3c:	81 30       	cpi	r24, 0x01	; 1
    2e3e:	09 f0       	breq	.+2      	; 0x2e42 <DIO_u8SetPinValue+0x122>
    2e40:	72 c0       	rjmp	.+228    	; 0x2f26 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    2e42:	8a 81       	ldd	r24, Y+2	; 0x02
    2e44:	28 2f       	mov	r18, r24
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	3e 83       	std	Y+6, r19	; 0x06
    2e4a:	2d 83       	std	Y+5, r18	; 0x05
    2e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e50:	81 30       	cpi	r24, 0x01	; 1
    2e52:	91 05       	cpc	r25, r1
    2e54:	49 f1       	breq	.+82     	; 0x2ea8 <DIO_u8SetPinValue+0x188>
    2e56:	2d 81       	ldd	r18, Y+5	; 0x05
    2e58:	3e 81       	ldd	r19, Y+6	; 0x06
    2e5a:	22 30       	cpi	r18, 0x02	; 2
    2e5c:	31 05       	cpc	r19, r1
    2e5e:	2c f4       	brge	.+10     	; 0x2e6a <DIO_u8SetPinValue+0x14a>
    2e60:	8d 81       	ldd	r24, Y+5	; 0x05
    2e62:	9e 81       	ldd	r25, Y+6	; 0x06
    2e64:	00 97       	sbiw	r24, 0x00	; 0
    2e66:	61 f0       	breq	.+24     	; 0x2e80 <DIO_u8SetPinValue+0x160>
    2e68:	5b c0       	rjmp	.+182    	; 0x2f20 <DIO_u8SetPinValue+0x200>
    2e6a:	2d 81       	ldd	r18, Y+5	; 0x05
    2e6c:	3e 81       	ldd	r19, Y+6	; 0x06
    2e6e:	22 30       	cpi	r18, 0x02	; 2
    2e70:	31 05       	cpc	r19, r1
    2e72:	71 f1       	breq	.+92     	; 0x2ed0 <DIO_u8SetPinValue+0x1b0>
    2e74:	8d 81       	ldd	r24, Y+5	; 0x05
    2e76:	9e 81       	ldd	r25, Y+6	; 0x06
    2e78:	83 30       	cpi	r24, 0x03	; 3
    2e7a:	91 05       	cpc	r25, r1
    2e7c:	e9 f1       	breq	.+122    	; 0x2ef8 <DIO_u8SetPinValue+0x1d8>
    2e7e:	50 c0       	rjmp	.+160    	; 0x2f20 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    2e80:	ab e3       	ldi	r26, 0x3B	; 59
    2e82:	b0 e0       	ldi	r27, 0x00	; 0
    2e84:	eb e3       	ldi	r30, 0x3B	; 59
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	80 81       	ld	r24, Z
    2e8a:	48 2f       	mov	r20, r24
    2e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8e:	28 2f       	mov	r18, r24
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	02 2e       	mov	r0, r18
    2e98:	02 c0       	rjmp	.+4      	; 0x2e9e <DIO_u8SetPinValue+0x17e>
    2e9a:	88 0f       	add	r24, r24
    2e9c:	99 1f       	adc	r25, r25
    2e9e:	0a 94       	dec	r0
    2ea0:	e2 f7       	brpl	.-8      	; 0x2e9a <DIO_u8SetPinValue+0x17a>
    2ea2:	84 2b       	or	r24, r20
    2ea4:	8c 93       	st	X, r24
    2ea6:	44 c0       	rjmp	.+136    	; 0x2f30 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    2ea8:	a8 e3       	ldi	r26, 0x38	; 56
    2eaa:	b0 e0       	ldi	r27, 0x00	; 0
    2eac:	e8 e3       	ldi	r30, 0x38	; 56
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	80 81       	ld	r24, Z
    2eb2:	48 2f       	mov	r20, r24
    2eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb6:	28 2f       	mov	r18, r24
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	02 2e       	mov	r0, r18
    2ec0:	02 c0       	rjmp	.+4      	; 0x2ec6 <DIO_u8SetPinValue+0x1a6>
    2ec2:	88 0f       	add	r24, r24
    2ec4:	99 1f       	adc	r25, r25
    2ec6:	0a 94       	dec	r0
    2ec8:	e2 f7       	brpl	.-8      	; 0x2ec2 <DIO_u8SetPinValue+0x1a2>
    2eca:	84 2b       	or	r24, r20
    2ecc:	8c 93       	st	X, r24
    2ece:	30 c0       	rjmp	.+96     	; 0x2f30 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    2ed0:	a5 e3       	ldi	r26, 0x35	; 53
    2ed2:	b0 e0       	ldi	r27, 0x00	; 0
    2ed4:	e5 e3       	ldi	r30, 0x35	; 53
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	80 81       	ld	r24, Z
    2eda:	48 2f       	mov	r20, r24
    2edc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ede:	28 2f       	mov	r18, r24
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	02 2e       	mov	r0, r18
    2ee8:	02 c0       	rjmp	.+4      	; 0x2eee <DIO_u8SetPinValue+0x1ce>
    2eea:	88 0f       	add	r24, r24
    2eec:	99 1f       	adc	r25, r25
    2eee:	0a 94       	dec	r0
    2ef0:	e2 f7       	brpl	.-8      	; 0x2eea <DIO_u8SetPinValue+0x1ca>
    2ef2:	84 2b       	or	r24, r20
    2ef4:	8c 93       	st	X, r24
    2ef6:	1c c0       	rjmp	.+56     	; 0x2f30 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    2ef8:	a2 e3       	ldi	r26, 0x32	; 50
    2efa:	b0 e0       	ldi	r27, 0x00	; 0
    2efc:	e2 e3       	ldi	r30, 0x32	; 50
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	80 81       	ld	r24, Z
    2f02:	48 2f       	mov	r20, r24
    2f04:	8b 81       	ldd	r24, Y+3	; 0x03
    2f06:	28 2f       	mov	r18, r24
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	02 2e       	mov	r0, r18
    2f10:	02 c0       	rjmp	.+4      	; 0x2f16 <DIO_u8SetPinValue+0x1f6>
    2f12:	88 0f       	add	r24, r24
    2f14:	99 1f       	adc	r25, r25
    2f16:	0a 94       	dec	r0
    2f18:	e2 f7       	brpl	.-8      	; 0x2f12 <DIO_u8SetPinValue+0x1f2>
    2f1a:	84 2b       	or	r24, r20
    2f1c:	8c 93       	st	X, r24
    2f1e:	08 c0       	rjmp	.+16     	; 0x2f30 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	89 83       	std	Y+1, r24	; 0x01
    2f24:	05 c0       	rjmp	.+10     	; 0x2f30 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	89 83       	std	Y+1, r24	; 0x01
    2f2a:	02 c0       	rjmp	.+4      	; 0x2f30 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2f30:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f32:	28 96       	adiw	r28, 0x08	; 8
    2f34:	0f b6       	in	r0, 0x3f	; 63
    2f36:	f8 94       	cli
    2f38:	de bf       	out	0x3e, r29	; 62
    2f3a:	0f be       	out	0x3f, r0	; 63
    2f3c:	cd bf       	out	0x3d, r28	; 61
    2f3e:	cf 91       	pop	r28
    2f40:	df 91       	pop	r29
    2f42:	08 95       	ret

00002f44 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    2f44:	df 93       	push	r29
    2f46:	cf 93       	push	r28
    2f48:	00 d0       	rcall	.+0      	; 0x2f4a <DIO_u8SetPortValue+0x6>
    2f4a:	00 d0       	rcall	.+0      	; 0x2f4c <DIO_u8SetPortValue+0x8>
    2f4c:	0f 92       	push	r0
    2f4e:	cd b7       	in	r28, 0x3d	; 61
    2f50:	de b7       	in	r29, 0x3e	; 62
    2f52:	8a 83       	std	Y+2, r24	; 0x02
    2f54:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2f56:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    2f58:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5a:	28 2f       	mov	r18, r24
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	3d 83       	std	Y+5, r19	; 0x05
    2f60:	2c 83       	std	Y+4, r18	; 0x04
    2f62:	8c 81       	ldd	r24, Y+4	; 0x04
    2f64:	9d 81       	ldd	r25, Y+5	; 0x05
    2f66:	81 30       	cpi	r24, 0x01	; 1
    2f68:	91 05       	cpc	r25, r1
    2f6a:	d1 f0       	breq	.+52     	; 0x2fa0 <DIO_u8SetPortValue+0x5c>
    2f6c:	2c 81       	ldd	r18, Y+4	; 0x04
    2f6e:	3d 81       	ldd	r19, Y+5	; 0x05
    2f70:	22 30       	cpi	r18, 0x02	; 2
    2f72:	31 05       	cpc	r19, r1
    2f74:	2c f4       	brge	.+10     	; 0x2f80 <DIO_u8SetPortValue+0x3c>
    2f76:	8c 81       	ldd	r24, Y+4	; 0x04
    2f78:	9d 81       	ldd	r25, Y+5	; 0x05
    2f7a:	00 97       	sbiw	r24, 0x00	; 0
    2f7c:	61 f0       	breq	.+24     	; 0x2f96 <DIO_u8SetPortValue+0x52>
    2f7e:	1f c0       	rjmp	.+62     	; 0x2fbe <DIO_u8SetPortValue+0x7a>
    2f80:	2c 81       	ldd	r18, Y+4	; 0x04
    2f82:	3d 81       	ldd	r19, Y+5	; 0x05
    2f84:	22 30       	cpi	r18, 0x02	; 2
    2f86:	31 05       	cpc	r19, r1
    2f88:	81 f0       	breq	.+32     	; 0x2faa <DIO_u8SetPortValue+0x66>
    2f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f8e:	83 30       	cpi	r24, 0x03	; 3
    2f90:	91 05       	cpc	r25, r1
    2f92:	81 f0       	breq	.+32     	; 0x2fb4 <DIO_u8SetPortValue+0x70>
    2f94:	14 c0       	rjmp	.+40     	; 0x2fbe <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    2f96:	eb e3       	ldi	r30, 0x3B	; 59
    2f98:	f0 e0       	ldi	r31, 0x00	; 0
    2f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9c:	80 83       	st	Z, r24
    2f9e:	11 c0       	rjmp	.+34     	; 0x2fc2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    2fa0:	e8 e3       	ldi	r30, 0x38	; 56
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	80 83       	st	Z, r24
    2fa8:	0c c0       	rjmp	.+24     	; 0x2fc2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    2faa:	e5 e3       	ldi	r30, 0x35	; 53
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb0:	80 83       	st	Z, r24
    2fb2:	07 c0       	rjmp	.+14     	; 0x2fc2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    2fb4:	e2 e3       	ldi	r30, 0x32	; 50
    2fb6:	f0 e0       	ldi	r31, 0x00	; 0
    2fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fba:	80 83       	st	Z, r24
    2fbc:	02 c0       	rjmp	.+4      	; 0x2fc2 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fc4:	0f 90       	pop	r0
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	cf 91       	pop	r28
    2fd0:	df 91       	pop	r29
    2fd2:	08 95       	ret

00002fd4 <DIO_u8TogglePinValue>:

u8 DIO_u8TogglePinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    2fd4:	df 93       	push	r29
    2fd6:	cf 93       	push	r28
    2fd8:	00 d0       	rcall	.+0      	; 0x2fda <DIO_u8TogglePinValue+0x6>
    2fda:	00 d0       	rcall	.+0      	; 0x2fdc <DIO_u8TogglePinValue+0x8>
    2fdc:	0f 92       	push	r0
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	8a 83       	std	Y+2, r24	; 0x02
    2fe4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2fe6:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    2fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fea:	28 2f       	mov	r18, r24
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	3d 83       	std	Y+5, r19	; 0x05
    2ff0:	2c 83       	std	Y+4, r18	; 0x04
    2ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ff6:	81 30       	cpi	r24, 0x01	; 1
    2ff8:	91 05       	cpc	r25, r1
    2ffa:	49 f1       	breq	.+82     	; 0x304e <DIO_u8TogglePinValue+0x7a>
    2ffc:	2c 81       	ldd	r18, Y+4	; 0x04
    2ffe:	3d 81       	ldd	r19, Y+5	; 0x05
    3000:	22 30       	cpi	r18, 0x02	; 2
    3002:	31 05       	cpc	r19, r1
    3004:	2c f4       	brge	.+10     	; 0x3010 <DIO_u8TogglePinValue+0x3c>
    3006:	8c 81       	ldd	r24, Y+4	; 0x04
    3008:	9d 81       	ldd	r25, Y+5	; 0x05
    300a:	00 97       	sbiw	r24, 0x00	; 0
    300c:	61 f0       	breq	.+24     	; 0x3026 <DIO_u8TogglePinValue+0x52>
    300e:	5b c0       	rjmp	.+182    	; 0x30c6 <DIO_u8TogglePinValue+0xf2>
    3010:	2c 81       	ldd	r18, Y+4	; 0x04
    3012:	3d 81       	ldd	r19, Y+5	; 0x05
    3014:	22 30       	cpi	r18, 0x02	; 2
    3016:	31 05       	cpc	r19, r1
    3018:	71 f1       	breq	.+92     	; 0x3076 <DIO_u8TogglePinValue+0xa2>
    301a:	8c 81       	ldd	r24, Y+4	; 0x04
    301c:	9d 81       	ldd	r25, Y+5	; 0x05
    301e:	83 30       	cpi	r24, 0x03	; 3
    3020:	91 05       	cpc	r25, r1
    3022:	e9 f1       	breq	.+122    	; 0x309e <DIO_u8TogglePinValue+0xca>
    3024:	50 c0       	rjmp	.+160    	; 0x30c6 <DIO_u8TogglePinValue+0xf2>
	{
	case DIO_u8PORTA: TOOGLE_BIT(PORTA,Copy_u8Pin); break;
    3026:	ab e3       	ldi	r26, 0x3B	; 59
    3028:	b0 e0       	ldi	r27, 0x00	; 0
    302a:	eb e3       	ldi	r30, 0x3B	; 59
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	80 81       	ld	r24, Z
    3030:	48 2f       	mov	r20, r24
    3032:	8b 81       	ldd	r24, Y+3	; 0x03
    3034:	28 2f       	mov	r18, r24
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	02 2e       	mov	r0, r18
    303e:	02 c0       	rjmp	.+4      	; 0x3044 <DIO_u8TogglePinValue+0x70>
    3040:	88 0f       	add	r24, r24
    3042:	99 1f       	adc	r25, r25
    3044:	0a 94       	dec	r0
    3046:	e2 f7       	brpl	.-8      	; 0x3040 <DIO_u8TogglePinValue+0x6c>
    3048:	84 27       	eor	r24, r20
    304a:	8c 93       	st	X, r24
    304c:	3e c0       	rjmp	.+124    	; 0x30ca <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTB: TOOGLE_BIT(PORTB,Copy_u8Pin); break;
    304e:	a8 e3       	ldi	r26, 0x38	; 56
    3050:	b0 e0       	ldi	r27, 0x00	; 0
    3052:	e8 e3       	ldi	r30, 0x38	; 56
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	80 81       	ld	r24, Z
    3058:	48 2f       	mov	r20, r24
    305a:	8b 81       	ldd	r24, Y+3	; 0x03
    305c:	28 2f       	mov	r18, r24
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	02 2e       	mov	r0, r18
    3066:	02 c0       	rjmp	.+4      	; 0x306c <DIO_u8TogglePinValue+0x98>
    3068:	88 0f       	add	r24, r24
    306a:	99 1f       	adc	r25, r25
    306c:	0a 94       	dec	r0
    306e:	e2 f7       	brpl	.-8      	; 0x3068 <DIO_u8TogglePinValue+0x94>
    3070:	84 27       	eor	r24, r20
    3072:	8c 93       	st	X, r24
    3074:	2a c0       	rjmp	.+84     	; 0x30ca <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTC: TOOGLE_BIT(PORTC,Copy_u8Pin); break;
    3076:	a5 e3       	ldi	r26, 0x35	; 53
    3078:	b0 e0       	ldi	r27, 0x00	; 0
    307a:	e5 e3       	ldi	r30, 0x35	; 53
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	80 81       	ld	r24, Z
    3080:	48 2f       	mov	r20, r24
    3082:	8b 81       	ldd	r24, Y+3	; 0x03
    3084:	28 2f       	mov	r18, r24
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	02 2e       	mov	r0, r18
    308e:	02 c0       	rjmp	.+4      	; 0x3094 <DIO_u8TogglePinValue+0xc0>
    3090:	88 0f       	add	r24, r24
    3092:	99 1f       	adc	r25, r25
    3094:	0a 94       	dec	r0
    3096:	e2 f7       	brpl	.-8      	; 0x3090 <DIO_u8TogglePinValue+0xbc>
    3098:	84 27       	eor	r24, r20
    309a:	8c 93       	st	X, r24
    309c:	16 c0       	rjmp	.+44     	; 0x30ca <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTD: TOOGLE_BIT(PORTD,Copy_u8Pin); break;
    309e:	a2 e3       	ldi	r26, 0x32	; 50
    30a0:	b0 e0       	ldi	r27, 0x00	; 0
    30a2:	e2 e3       	ldi	r30, 0x32	; 50
    30a4:	f0 e0       	ldi	r31, 0x00	; 0
    30a6:	80 81       	ld	r24, Z
    30a8:	48 2f       	mov	r20, r24
    30aa:	8b 81       	ldd	r24, Y+3	; 0x03
    30ac:	28 2f       	mov	r18, r24
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	02 2e       	mov	r0, r18
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <DIO_u8TogglePinValue+0xe8>
    30b8:	88 0f       	add	r24, r24
    30ba:	99 1f       	adc	r25, r25
    30bc:	0a 94       	dec	r0
    30be:	e2 f7       	brpl	.-8      	; 0x30b8 <DIO_u8TogglePinValue+0xe4>
    30c0:	84 27       	eor	r24, r20
    30c2:	8c 93       	st	X, r24
    30c4:	02 c0       	rjmp	.+4      	; 0x30ca <DIO_u8TogglePinValue+0xf6>
	default: Local_u8ErrorState=1;
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    30ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    30cc:	0f 90       	pop	r0
    30ce:	0f 90       	pop	r0
    30d0:	0f 90       	pop	r0
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	cf 91       	pop	r28
    30d8:	df 91       	pop	r29
    30da:	08 95       	ret

000030dc <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    30dc:	df 93       	push	r29
    30de:	cf 93       	push	r28
    30e0:	cd b7       	in	r28, 0x3d	; 61
    30e2:	de b7       	in	r29, 0x3e	; 62
    30e4:	27 97       	sbiw	r28, 0x07	; 7
    30e6:	0f b6       	in	r0, 0x3f	; 63
    30e8:	f8 94       	cli
    30ea:	de bf       	out	0x3e, r29	; 62
    30ec:	0f be       	out	0x3f, r0	; 63
    30ee:	cd bf       	out	0x3d, r28	; 61
    30f0:	8a 83       	std	Y+2, r24	; 0x02
    30f2:	6b 83       	std	Y+3, r22	; 0x03
    30f4:	5d 83       	std	Y+5, r21	; 0x05
    30f6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    30f8:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<= DIO_u8PIN7))
    30fa:	8c 81       	ldd	r24, Y+4	; 0x04
    30fc:	9d 81       	ldd	r25, Y+5	; 0x05
    30fe:	00 97       	sbiw	r24, 0x00	; 0
    3100:	09 f4       	brne	.+2      	; 0x3104 <DIO_u8GetPinValue+0x28>
    3102:	78 c0       	rjmp	.+240    	; 0x31f4 <DIO_u8GetPinValue+0x118>
    3104:	8b 81       	ldd	r24, Y+3	; 0x03
    3106:	88 30       	cpi	r24, 0x08	; 8
    3108:	08 f0       	brcs	.+2      	; 0x310c <DIO_u8GetPinValue+0x30>
    310a:	74 c0       	rjmp	.+232    	; 0x31f4 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    310c:	8a 81       	ldd	r24, Y+2	; 0x02
    310e:	28 2f       	mov	r18, r24
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	3f 83       	std	Y+7, r19	; 0x07
    3114:	2e 83       	std	Y+6, r18	; 0x06
    3116:	4e 81       	ldd	r20, Y+6	; 0x06
    3118:	5f 81       	ldd	r21, Y+7	; 0x07
    311a:	41 30       	cpi	r20, 0x01	; 1
    311c:	51 05       	cpc	r21, r1
    311e:	59 f1       	breq	.+86     	; 0x3176 <DIO_u8GetPinValue+0x9a>
    3120:	8e 81       	ldd	r24, Y+6	; 0x06
    3122:	9f 81       	ldd	r25, Y+7	; 0x07
    3124:	82 30       	cpi	r24, 0x02	; 2
    3126:	91 05       	cpc	r25, r1
    3128:	34 f4       	brge	.+12     	; 0x3136 <DIO_u8GetPinValue+0x5a>
    312a:	2e 81       	ldd	r18, Y+6	; 0x06
    312c:	3f 81       	ldd	r19, Y+7	; 0x07
    312e:	21 15       	cp	r18, r1
    3130:	31 05       	cpc	r19, r1
    3132:	69 f0       	breq	.+26     	; 0x314e <DIO_u8GetPinValue+0x72>
    3134:	5c c0       	rjmp	.+184    	; 0x31ee <DIO_u8GetPinValue+0x112>
    3136:	4e 81       	ldd	r20, Y+6	; 0x06
    3138:	5f 81       	ldd	r21, Y+7	; 0x07
    313a:	42 30       	cpi	r20, 0x02	; 2
    313c:	51 05       	cpc	r21, r1
    313e:	79 f1       	breq	.+94     	; 0x319e <DIO_u8GetPinValue+0xc2>
    3140:	8e 81       	ldd	r24, Y+6	; 0x06
    3142:	9f 81       	ldd	r25, Y+7	; 0x07
    3144:	83 30       	cpi	r24, 0x03	; 3
    3146:	91 05       	cpc	r25, r1
    3148:	09 f4       	brne	.+2      	; 0x314c <DIO_u8GetPinValue+0x70>
    314a:	3d c0       	rjmp	.+122    	; 0x31c6 <DIO_u8GetPinValue+0xea>
    314c:	50 c0       	rjmp	.+160    	; 0x31ee <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA : *Copy_pu8Value= GET_BIT(PINA , Copy_u8Pin); break;
    314e:	e9 e3       	ldi	r30, 0x39	; 57
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	80 81       	ld	r24, Z
    3154:	28 2f       	mov	r18, r24
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	8b 81       	ldd	r24, Y+3	; 0x03
    315a:	88 2f       	mov	r24, r24
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	a9 01       	movw	r20, r18
    3160:	02 c0       	rjmp	.+4      	; 0x3166 <DIO_u8GetPinValue+0x8a>
    3162:	55 95       	asr	r21
    3164:	47 95       	ror	r20
    3166:	8a 95       	dec	r24
    3168:	e2 f7       	brpl	.-8      	; 0x3162 <DIO_u8GetPinValue+0x86>
    316a:	ca 01       	movw	r24, r20
    316c:	81 70       	andi	r24, 0x01	; 1
    316e:	ec 81       	ldd	r30, Y+4	; 0x04
    3170:	fd 81       	ldd	r31, Y+5	; 0x05
    3172:	80 83       	st	Z, r24
    3174:	41 c0       	rjmp	.+130    	; 0x31f8 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB : *Copy_pu8Value= GET_BIT(PINB , Copy_u8Pin); break;
    3176:	e6 e3       	ldi	r30, 0x36	; 54
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	80 81       	ld	r24, Z
    317c:	28 2f       	mov	r18, r24
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	8b 81       	ldd	r24, Y+3	; 0x03
    3182:	88 2f       	mov	r24, r24
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	a9 01       	movw	r20, r18
    3188:	02 c0       	rjmp	.+4      	; 0x318e <DIO_u8GetPinValue+0xb2>
    318a:	55 95       	asr	r21
    318c:	47 95       	ror	r20
    318e:	8a 95       	dec	r24
    3190:	e2 f7       	brpl	.-8      	; 0x318a <DIO_u8GetPinValue+0xae>
    3192:	ca 01       	movw	r24, r20
    3194:	81 70       	andi	r24, 0x01	; 1
    3196:	ec 81       	ldd	r30, Y+4	; 0x04
    3198:	fd 81       	ldd	r31, Y+5	; 0x05
    319a:	80 83       	st	Z, r24
    319c:	2d c0       	rjmp	.+90     	; 0x31f8 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC : *Copy_pu8Value= GET_BIT(PINC , Copy_u8Pin); break;
    319e:	e3 e3       	ldi	r30, 0x33	; 51
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	80 81       	ld	r24, Z
    31a4:	28 2f       	mov	r18, r24
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	8b 81       	ldd	r24, Y+3	; 0x03
    31aa:	88 2f       	mov	r24, r24
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	a9 01       	movw	r20, r18
    31b0:	02 c0       	rjmp	.+4      	; 0x31b6 <DIO_u8GetPinValue+0xda>
    31b2:	55 95       	asr	r21
    31b4:	47 95       	ror	r20
    31b6:	8a 95       	dec	r24
    31b8:	e2 f7       	brpl	.-8      	; 0x31b2 <DIO_u8GetPinValue+0xd6>
    31ba:	ca 01       	movw	r24, r20
    31bc:	81 70       	andi	r24, 0x01	; 1
    31be:	ec 81       	ldd	r30, Y+4	; 0x04
    31c0:	fd 81       	ldd	r31, Y+5	; 0x05
    31c2:	80 83       	st	Z, r24
    31c4:	19 c0       	rjmp	.+50     	; 0x31f8 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD : *Copy_pu8Value= GET_BIT(PIND , Copy_u8Pin); break;
    31c6:	e0 e3       	ldi	r30, 0x30	; 48
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	28 2f       	mov	r18, r24
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	8b 81       	ldd	r24, Y+3	; 0x03
    31d2:	88 2f       	mov	r24, r24
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	a9 01       	movw	r20, r18
    31d8:	02 c0       	rjmp	.+4      	; 0x31de <DIO_u8GetPinValue+0x102>
    31da:	55 95       	asr	r21
    31dc:	47 95       	ror	r20
    31de:	8a 95       	dec	r24
    31e0:	e2 f7       	brpl	.-8      	; 0x31da <DIO_u8GetPinValue+0xfe>
    31e2:	ca 01       	movw	r24, r20
    31e4:	81 70       	andi	r24, 0x01	; 1
    31e6:	ec 81       	ldd	r30, Y+4	; 0x04
    31e8:	fd 81       	ldd	r31, Y+5	; 0x05
    31ea:	80 83       	st	Z, r24
    31ec:	05 c0       	rjmp	.+10     	; 0x31f8 <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=1;
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	89 83       	std	Y+1, r24	; 0x01
    31f2:	02 c0       	rjmp	.+4      	; 0x31f8 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    31f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    31fa:	27 96       	adiw	r28, 0x07	; 7
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	f8 94       	cli
    3200:	de bf       	out	0x3e, r29	; 62
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	cd bf       	out	0x3d, r28	; 61
    3206:	cf 91       	pop	r28
    3208:	df 91       	pop	r29
    320a:	08 95       	ret

0000320c <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port , u8* Copy_pu8Value)
{
    320c:	df 93       	push	r29
    320e:	cf 93       	push	r28
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
    3214:	27 97       	sbiw	r28, 0x07	; 7
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	cd bf       	out	0x3d, r28	; 61
    3220:	8b 83       	std	Y+3, r24	; 0x03
    3222:	7d 83       	std	Y+5, r23	; 0x05
    3224:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = 0;
    3226:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter;
	if(Copy_pu8Value != NULL)
    3228:	8c 81       	ldd	r24, Y+4	; 0x04
    322a:	9d 81       	ldd	r25, Y+5	; 0x05
    322c:	00 97       	sbiw	r24, 0x00	; 0
    322e:	09 f4       	brne	.+2      	; 0x3232 <DIO_u8GetPortValue+0x26>
    3230:	3e c0       	rjmp	.+124    	; 0x32ae <DIO_u8GetPortValue+0xa2>
	{
		switch(Copy_u8Port)
    3232:	8b 81       	ldd	r24, Y+3	; 0x03
    3234:	28 2f       	mov	r18, r24
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	3f 83       	std	Y+7, r19	; 0x07
    323a:	2e 83       	std	Y+6, r18	; 0x06
    323c:	8e 81       	ldd	r24, Y+6	; 0x06
    323e:	9f 81       	ldd	r25, Y+7	; 0x07
    3240:	81 30       	cpi	r24, 0x01	; 1
    3242:	91 05       	cpc	r25, r1
    3244:	e1 f0       	breq	.+56     	; 0x327e <DIO_u8GetPortValue+0x72>
    3246:	2e 81       	ldd	r18, Y+6	; 0x06
    3248:	3f 81       	ldd	r19, Y+7	; 0x07
    324a:	22 30       	cpi	r18, 0x02	; 2
    324c:	31 05       	cpc	r19, r1
    324e:	2c f4       	brge	.+10     	; 0x325a <DIO_u8GetPortValue+0x4e>
    3250:	8e 81       	ldd	r24, Y+6	; 0x06
    3252:	9f 81       	ldd	r25, Y+7	; 0x07
    3254:	00 97       	sbiw	r24, 0x00	; 0
    3256:	61 f0       	breq	.+24     	; 0x3270 <DIO_u8GetPortValue+0x64>
    3258:	27 c0       	rjmp	.+78     	; 0x32a8 <DIO_u8GetPortValue+0x9c>
    325a:	2e 81       	ldd	r18, Y+6	; 0x06
    325c:	3f 81       	ldd	r19, Y+7	; 0x07
    325e:	22 30       	cpi	r18, 0x02	; 2
    3260:	31 05       	cpc	r19, r1
    3262:	a1 f0       	breq	.+40     	; 0x328c <DIO_u8GetPortValue+0x80>
    3264:	8e 81       	ldd	r24, Y+6	; 0x06
    3266:	9f 81       	ldd	r25, Y+7	; 0x07
    3268:	83 30       	cpi	r24, 0x03	; 3
    326a:	91 05       	cpc	r25, r1
    326c:	b1 f0       	breq	.+44     	; 0x329a <DIO_u8GetPortValue+0x8e>
    326e:	1c c0       	rjmp	.+56     	; 0x32a8 <DIO_u8GetPortValue+0x9c>
		{
		case DIO_u8PORTA: *Copy_pu8Value = PINA; break;
    3270:	e9 e3       	ldi	r30, 0x39	; 57
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	80 81       	ld	r24, Z
    3276:	ec 81       	ldd	r30, Y+4	; 0x04
    3278:	fd 81       	ldd	r31, Y+5	; 0x05
    327a:	80 83       	st	Z, r24
    327c:	1a c0       	rjmp	.+52     	; 0x32b2 <DIO_u8GetPortValue+0xa6>
		case DIO_u8PORTB: *Copy_pu8Value = PINB; break;
    327e:	e6 e3       	ldi	r30, 0x36	; 54
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	80 81       	ld	r24, Z
    3284:	ec 81       	ldd	r30, Y+4	; 0x04
    3286:	fd 81       	ldd	r31, Y+5	; 0x05
    3288:	80 83       	st	Z, r24
    328a:	13 c0       	rjmp	.+38     	; 0x32b2 <DIO_u8GetPortValue+0xa6>
		case DIO_u8PORTC: *Copy_pu8Value = PINC; break;
    328c:	e3 e3       	ldi	r30, 0x33	; 51
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	80 81       	ld	r24, Z
    3292:	ec 81       	ldd	r30, Y+4	; 0x04
    3294:	fd 81       	ldd	r31, Y+5	; 0x05
    3296:	80 83       	st	Z, r24
    3298:	0c c0       	rjmp	.+24     	; 0x32b2 <DIO_u8GetPortValue+0xa6>
		case DIO_u8PORTD: *Copy_pu8Value = PIND; break;
    329a:	e0 e3       	ldi	r30, 0x30	; 48
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	80 81       	ld	r24, Z
    32a0:	ec 81       	ldd	r30, Y+4	; 0x04
    32a2:	fd 81       	ldd	r31, Y+5	; 0x05
    32a4:	80 83       	st	Z, r24
    32a6:	05 c0       	rjmp	.+10     	; 0x32b2 <DIO_u8GetPortValue+0xa6>
		default: Local_u8ErrorState = 1; break;
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	8a 83       	std	Y+2, r24	; 0x02
    32ac:	02 c0       	rjmp	.+4      	; 0x32b2 <DIO_u8GetPortValue+0xa6>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    32b2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    32b4:	27 96       	adiw	r28, 0x07	; 7
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	cd bf       	out	0x3d, r28	; 61
    32c0:	cf 91       	pop	r28
    32c2:	df 91       	pop	r29
    32c4:	08 95       	ret

000032c6 <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    32c6:	df 93       	push	r29
    32c8:	cf 93       	push	r28
    32ca:	cd b7       	in	r28, 0x3d	; 61
    32cc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    32ce:	af e5       	ldi	r26, 0x5F	; 95
    32d0:	b0 e0       	ldi	r27, 0x00	; 0
    32d2:	ef e5       	ldi	r30, 0x5F	; 95
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	80 81       	ld	r24, Z
    32d8:	80 68       	ori	r24, 0x80	; 128
    32da:	8c 93       	st	X, r24
}
    32dc:	cf 91       	pop	r28
    32de:	df 91       	pop	r29
    32e0:	08 95       	ret

000032e2 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    32e2:	df 93       	push	r29
    32e4:	cf 93       	push	r28
    32e6:	cd b7       	in	r28, 0x3d	; 61
    32e8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    32ea:	af e5       	ldi	r26, 0x5F	; 95
    32ec:	b0 e0       	ldi	r27, 0x00	; 0
    32ee:	ef e5       	ldi	r30, 0x5F	; 95
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	80 81       	ld	r24, Z
    32f4:	8f 77       	andi	r24, 0x7F	; 127
    32f6:	8c 93       	st	X, r24
    32f8:	cf 91       	pop	r28
    32fa:	df 91       	pop	r29
    32fc:	08 95       	ret

000032fe <Map>:

#include "MAP_config.h"
#include "MAP_private.h"
#include "MAP_interface.h"
s32 Map(s32 Copy_s32InputMin , s32 Copy_s32InputMax , s32 Copy_s32OutputMin , s32 Copy_s32OutputMax , s32 Copy_s32InputVal)
{
    32fe:	af 92       	push	r10
    3300:	bf 92       	push	r11
    3302:	cf 92       	push	r12
    3304:	df 92       	push	r13
    3306:	ef 92       	push	r14
    3308:	ff 92       	push	r15
    330a:	0f 93       	push	r16
    330c:	1f 93       	push	r17
    330e:	df 93       	push	r29
    3310:	cf 93       	push	r28
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62
    3316:	64 97       	sbiw	r28, 0x14	; 20
    3318:	0f b6       	in	r0, 0x3f	; 63
    331a:	f8 94       	cli
    331c:	de bf       	out	0x3e, r29	; 62
    331e:	0f be       	out	0x3f, r0	; 63
    3320:	cd bf       	out	0x3d, r28	; 61
    3322:	6d 83       	std	Y+5, r22	; 0x05
    3324:	7e 83       	std	Y+6, r23	; 0x06
    3326:	8f 83       	std	Y+7, r24	; 0x07
    3328:	98 87       	std	Y+8, r25	; 0x08
    332a:	29 87       	std	Y+9, r18	; 0x09
    332c:	3a 87       	std	Y+10, r19	; 0x0a
    332e:	4b 87       	std	Y+11, r20	; 0x0b
    3330:	5c 87       	std	Y+12, r21	; 0x0c
    3332:	ed 86       	std	Y+13, r14	; 0x0d
    3334:	fe 86       	std	Y+14, r15	; 0x0e
    3336:	0f 87       	std	Y+15, r16	; 0x0f
    3338:	18 8b       	std	Y+16, r17	; 0x10
    333a:	a9 8a       	std	Y+17, r10	; 0x11
    333c:	ba 8a       	std	Y+18, r11	; 0x12
    333e:	cb 8a       	std	Y+19, r12	; 0x13
    3340:	dc 8a       	std	Y+20, r13	; 0x14
	s32 Loacl_s32Value = Copy_s32InputVal - Copy_s32InputMin;
    3342:	29 a1       	ldd	r18, Y+33	; 0x21
    3344:	3a a1       	ldd	r19, Y+34	; 0x22
    3346:	4b a1       	ldd	r20, Y+35	; 0x23
    3348:	5c a1       	ldd	r21, Y+36	; 0x24
    334a:	8d 81       	ldd	r24, Y+5	; 0x05
    334c:	9e 81       	ldd	r25, Y+6	; 0x06
    334e:	af 81       	ldd	r26, Y+7	; 0x07
    3350:	b8 85       	ldd	r27, Y+8	; 0x08
    3352:	79 01       	movw	r14, r18
    3354:	8a 01       	movw	r16, r20
    3356:	e8 1a       	sub	r14, r24
    3358:	f9 0a       	sbc	r15, r25
    335a:	0a 0b       	sbc	r16, r26
    335c:	1b 0b       	sbc	r17, r27
    335e:	d8 01       	movw	r26, r16
    3360:	c7 01       	movw	r24, r14
    3362:	89 83       	std	Y+1, r24	; 0x01
    3364:	9a 83       	std	Y+2, r25	; 0x02
    3366:	ab 83       	std	Y+3, r26	; 0x03
    3368:	bc 83       	std	Y+4, r27	; 0x04
	Loacl_s32Value = Loacl_s32Value * (Copy_s32OutputMax - Copy_s32OutputMin);
    336a:	29 89       	ldd	r18, Y+17	; 0x11
    336c:	3a 89       	ldd	r19, Y+18	; 0x12
    336e:	4b 89       	ldd	r20, Y+19	; 0x13
    3370:	5c 89       	ldd	r21, Y+20	; 0x14
    3372:	8d 85       	ldd	r24, Y+13	; 0x0d
    3374:	9e 85       	ldd	r25, Y+14	; 0x0e
    3376:	af 85       	ldd	r26, Y+15	; 0x0f
    3378:	b8 89       	ldd	r27, Y+16	; 0x10
    337a:	28 1b       	sub	r18, r24
    337c:	39 0b       	sbc	r19, r25
    337e:	4a 0b       	sbc	r20, r26
    3380:	5b 0b       	sbc	r21, r27
    3382:	89 81       	ldd	r24, Y+1	; 0x01
    3384:	9a 81       	ldd	r25, Y+2	; 0x02
    3386:	ab 81       	ldd	r26, Y+3	; 0x03
    3388:	bc 81       	ldd	r27, Y+4	; 0x04
    338a:	bc 01       	movw	r22, r24
    338c:	cd 01       	movw	r24, r26
    338e:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <__mulsi3>
    3392:	dc 01       	movw	r26, r24
    3394:	cb 01       	movw	r24, r22
    3396:	89 83       	std	Y+1, r24	; 0x01
    3398:	9a 83       	std	Y+2, r25	; 0x02
    339a:	ab 83       	std	Y+3, r26	; 0x03
    339c:	bc 83       	std	Y+4, r27	; 0x04
	Loacl_s32Value = Loacl_s32Value / (Copy_s32InputMax - Copy_s32InputMin);
    339e:	29 85       	ldd	r18, Y+9	; 0x09
    33a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    33a2:	4b 85       	ldd	r20, Y+11	; 0x0b
    33a4:	5c 85       	ldd	r21, Y+12	; 0x0c
    33a6:	8d 81       	ldd	r24, Y+5	; 0x05
    33a8:	9e 81       	ldd	r25, Y+6	; 0x06
    33aa:	af 81       	ldd	r26, Y+7	; 0x07
    33ac:	b8 85       	ldd	r27, Y+8	; 0x08
    33ae:	28 1b       	sub	r18, r24
    33b0:	39 0b       	sbc	r19, r25
    33b2:	4a 0b       	sbc	r20, r26
    33b4:	5b 0b       	sbc	r21, r27
    33b6:	89 81       	ldd	r24, Y+1	; 0x01
    33b8:	9a 81       	ldd	r25, Y+2	; 0x02
    33ba:	ab 81       	ldd	r26, Y+3	; 0x03
    33bc:	bc 81       	ldd	r27, Y+4	; 0x04
    33be:	bc 01       	movw	r22, r24
    33c0:	cd 01       	movw	r24, r26
    33c2:	0e 94 48 2b 	call	0x5690	; 0x5690 <__divmodsi4>
    33c6:	da 01       	movw	r26, r20
    33c8:	c9 01       	movw	r24, r18
    33ca:	89 83       	std	Y+1, r24	; 0x01
    33cc:	9a 83       	std	Y+2, r25	; 0x02
    33ce:	ab 83       	std	Y+3, r26	; 0x03
    33d0:	bc 83       	std	Y+4, r27	; 0x04
	Loacl_s32Value = Loacl_s32Value + Copy_s32OutputMin;
    33d2:	29 81       	ldd	r18, Y+1	; 0x01
    33d4:	3a 81       	ldd	r19, Y+2	; 0x02
    33d6:	4b 81       	ldd	r20, Y+3	; 0x03
    33d8:	5c 81       	ldd	r21, Y+4	; 0x04
    33da:	8d 85       	ldd	r24, Y+13	; 0x0d
    33dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    33de:	af 85       	ldd	r26, Y+15	; 0x0f
    33e0:	b8 89       	ldd	r27, Y+16	; 0x10
    33e2:	82 0f       	add	r24, r18
    33e4:	93 1f       	adc	r25, r19
    33e6:	a4 1f       	adc	r26, r20
    33e8:	b5 1f       	adc	r27, r21
    33ea:	89 83       	std	Y+1, r24	; 0x01
    33ec:	9a 83       	std	Y+2, r25	; 0x02
    33ee:	ab 83       	std	Y+3, r26	; 0x03
    33f0:	bc 83       	std	Y+4, r27	; 0x04
	return Loacl_s32Value;
    33f2:	89 81       	ldd	r24, Y+1	; 0x01
    33f4:	9a 81       	ldd	r25, Y+2	; 0x02
    33f6:	ab 81       	ldd	r26, Y+3	; 0x03
    33f8:	bc 81       	ldd	r27, Y+4	; 0x04
}
    33fa:	bc 01       	movw	r22, r24
    33fc:	cd 01       	movw	r24, r26
    33fe:	64 96       	adiw	r28, 0x14	; 20
    3400:	0f b6       	in	r0, 0x3f	; 63
    3402:	f8 94       	cli
    3404:	de bf       	out	0x3e, r29	; 62
    3406:	0f be       	out	0x3f, r0	; 63
    3408:	cd bf       	out	0x3d, r28	; 61
    340a:	cf 91       	pop	r28
    340c:	df 91       	pop	r29
    340e:	1f 91       	pop	r17
    3410:	0f 91       	pop	r16
    3412:	ff 90       	pop	r15
    3414:	ef 90       	pop	r14
    3416:	df 90       	pop	r13
    3418:	cf 90       	pop	r12
    341a:	bf 90       	pop	r11
    341c:	af 90       	pop	r10
    341e:	08 95       	ret

00003420 <SPI_voidInitMaster>:
#include "SPI_register.h"

static void (*SPI_ISR) (void)= NULL;

void SPI_voidInitMaster(void)
{
    3420:	df 93       	push	r29
    3422:	cf 93       	push	r28
    3424:	cd b7       	in	r28, 0x3d	; 61
    3426:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(DIO_u8PORTB , DIO_u8PIN5 ,DIO_u8PIN_OUTPUT);
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	65 e0       	ldi	r22, 0x05	; 5
    342c:	41 e0       	ldi	r20, 0x01	; 1
    342e:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB , DIO_u8PIN6 ,DIO_u8PIN_INPUT);
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	66 e0       	ldi	r22, 0x06	; 6
    3436:	40 e0       	ldi	r20, 0x00	; 0
    3438:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB , DIO_u8PIN7 ,DIO_u8PIN_OUTPUT);
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	67 e0       	ldi	r22, 0x07	; 7
    3440:	41 e0       	ldi	r20, 0x01	; 1
    3442:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB , DIO_u8PIN4 ,DIO_u8PIN_OUTPUT);
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	64 e0       	ldi	r22, 0x04	; 4
    344a:	41 e0       	ldi	r20, 0x01	; 1
    344c:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	/*Data Order By Default*/

	/*Master Initialization*/
	SET_BIT(SPCR,SPCR_MASTR);
    3450:	ad e2       	ldi	r26, 0x2D	; 45
    3452:	b0 e0       	ldi	r27, 0x00	; 0
    3454:	ed e2       	ldi	r30, 0x2D	; 45
    3456:	f0 e0       	ldi	r31, 0x00	; 0
    3458:	80 81       	ld	r24, Z
    345a:	80 61       	ori	r24, 0x10	; 16
    345c:	8c 93       	st	X, r24
	/*Clock Polarity By Default*/

	/*Clock Phase By Default*/

	/*Clock Prescaler: Divide by 16 */
	SET_BIT(SPCR,SPCR_SPR0);
    345e:	ad e2       	ldi	r26, 0x2D	; 45
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	ed e2       	ldi	r30, 0x2D	; 45
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	80 81       	ld	r24, Z
    3468:	81 60       	ori	r24, 0x01	; 1
    346a:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_SPR1);
    346c:	ad e2       	ldi	r26, 0x2D	; 45
    346e:	b0 e0       	ldi	r27, 0x00	; 0
    3470:	ed e2       	ldi	r30, 0x2D	; 45
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	80 81       	ld	r24, Z
    3476:	8d 7f       	andi	r24, 0xFD	; 253
    3478:	8c 93       	st	X, r24
	CLR_BIT(SPSR,SPSR_SPI2X);
    347a:	ae e2       	ldi	r26, 0x2E	; 46
    347c:	b0 e0       	ldi	r27, 0x00	; 0
    347e:	ee e2       	ldi	r30, 0x2E	; 46
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	80 81       	ld	r24, Z
    3484:	8e 7f       	andi	r24, 0xFE	; 254
    3486:	8c 93       	st	X, r24

	/*SPI Enable*/
	SET_BIT(SPCR,SPCR_SPE);
    3488:	ad e2       	ldi	r26, 0x2D	; 45
    348a:	b0 e0       	ldi	r27, 0x00	; 0
    348c:	ed e2       	ldi	r30, 0x2D	; 45
    348e:	f0 e0       	ldi	r31, 0x00	; 0
    3490:	80 81       	ld	r24, Z
    3492:	80 64       	ori	r24, 0x40	; 64
    3494:	8c 93       	st	X, r24
}
    3496:	cf 91       	pop	r28
    3498:	df 91       	pop	r29
    349a:	08 95       	ret

0000349c <SPI_voidInitSlave>:

void SPI_voidInitSlave(void)
{
    349c:	df 93       	push	r29
    349e:	cf 93       	push	r28
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(DIO_u8PORTB , DIO_u8PIN5 ,DIO_u8PIN_INPUT);
    34a4:	81 e0       	ldi	r24, 0x01	; 1
    34a6:	65 e0       	ldi	r22, 0x05	; 5
    34a8:	40 e0       	ldi	r20, 0x00	; 0
    34aa:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB , DIO_u8PIN6 ,DIO_u8PIN_OUTPUT);
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	66 e0       	ldi	r22, 0x06	; 6
    34b2:	41 e0       	ldi	r20, 0x01	; 1
    34b4:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB , DIO_u8PIN7 ,DIO_u8PIN_INPUT);
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	67 e0       	ldi	r22, 0x07	; 7
    34bc:	40 e0       	ldi	r20, 0x00	; 0
    34be:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB , DIO_u8PIN4 ,DIO_u8PIN_INPUT);
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	64 e0       	ldi	r22, 0x04	; 4
    34c6:	40 e0       	ldi	r20, 0x00	; 0
    34c8:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	/*Clock Polarity By Default*/

	/*Clock Phase By Default*/

	/*SPI Enable*/
	SET_BIT(SPCR,SPCR_SPE);
    34cc:	ad e2       	ldi	r26, 0x2D	; 45
    34ce:	b0 e0       	ldi	r27, 0x00	; 0
    34d0:	ed e2       	ldi	r30, 0x2D	; 45
    34d2:	f0 e0       	ldi	r31, 0x00	; 0
    34d4:	80 81       	ld	r24, Z
    34d6:	80 64       	ori	r24, 0x40	; 64
    34d8:	8c 93       	st	X, r24
}
    34da:	cf 91       	pop	r28
    34dc:	df 91       	pop	r29
    34de:	08 95       	ret

000034e0 <SPI_voidTransferByte>:

void SPI_voidTransferByte(u8 Copy_u8Data) {
    34e0:	df 93       	push	r29
    34e2:	cf 93       	push	r28
    34e4:	0f 92       	push	r0
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
    34ea:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_u8Data;
    34ec:	ef e2       	ldi	r30, 0x2F	; 47
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	89 81       	ldd	r24, Y+1	; 0x01
    34f2:	80 83       	st	Z, r24
	while(GET_BIT(SPSR,SPSR_SPIF) == 0);		/* wait here while SPIF flag set */
    34f4:	ee e2       	ldi	r30, 0x2E	; 46
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	80 81       	ld	r24, Z
    34fa:	88 23       	and	r24, r24
    34fc:	dc f7       	brge	.-10     	; 0x34f4 <SPI_voidTransferByte+0x14>
}
    34fe:	0f 90       	pop	r0
    3500:	cf 91       	pop	r28
    3502:	df 91       	pop	r29
    3504:	08 95       	ret

00003506 <SPI_u8ReceiveByte>:


u8 SPI_u8ReceiveByte(void) {
    3506:	df 93       	push	r29
    3508:	cf 93       	push	r28
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(SPSR,SPSR_SPIF) == 0);
    350e:	ee e2       	ldi	r30, 0x2E	; 46
    3510:	f0 e0       	ldi	r31, 0x00	; 0
    3512:	80 81       	ld	r24, Z
    3514:	88 23       	and	r24, r24
    3516:	dc f7       	brge	.-10     	; 0x350e <SPI_u8ReceiveByte+0x8>
	return SPDR;
    3518:	ef e2       	ldi	r30, 0x2F	; 47
    351a:	f0 e0       	ldi	r31, 0x00	; 0
    351c:	80 81       	ld	r24, Z
}
    351e:	cf 91       	pop	r28
    3520:	df 91       	pop	r29
    3522:	08 95       	ret

00003524 <SPI_u8Transceive>:

u8 SPI_u8Transceive(u8 Copy_u8Data)
{
    3524:	df 93       	push	r29
    3526:	cf 93       	push	r28
    3528:	0f 92       	push	r0
    352a:	cd b7       	in	r28, 0x3d	; 61
    352c:	de b7       	in	r29, 0x3e	; 62
    352e:	89 83       	std	Y+1, r24	; 0x01
	/*Send the data*/
	SPDR = Copy_u8Data;
    3530:	ef e2       	ldi	r30, 0x2F	; 47
    3532:	f0 e0       	ldi	r31, 0x00	; 0
    3534:	89 81       	ldd	r24, Y+1	; 0x01
    3536:	80 83       	st	Z, r24

	/*Wait (busy waiting) until transfer complete*/
	while(GET_BIT(SPSR,SPSR_SPIF) == 0); /*Time Out*/ /*1*/
    3538:	ee e2       	ldi	r30, 0x2E	; 46
    353a:	f0 e0       	ldi	r31, 0x00	; 0
    353c:	80 81       	ld	r24, Z
    353e:	88 23       	and	r24, r24
    3540:	dc f7       	brge	.-10     	; 0x3538 <SPI_u8Transceive+0x14>

	/*Get the exchanged data*/
	return SPDR; /*2*/
    3542:	ef e2       	ldi	r30, 0x2F	; 47
    3544:	f0 e0       	ldi	r31, 0x00	; 0
    3546:	80 81       	ld	r24, Z
	/*1 , 2 Clear Flag*/

}
    3548:	0f 90       	pop	r0
    354a:	cf 91       	pop	r28
    354c:	df 91       	pop	r29
    354e:	08 95       	ret

00003550 <SPI_voidEnableInterrupt>:

void SPI_voidEnableInterrupt(void)
{
    3550:	df 93       	push	r29
    3552:	cf 93       	push	r28
    3554:	cd b7       	in	r28, 0x3d	; 61
    3556:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR ,SPCR_SPIE);
    3558:	ad e2       	ldi	r26, 0x2D	; 45
    355a:	b0 e0       	ldi	r27, 0x00	; 0
    355c:	ed e2       	ldi	r30, 0x2D	; 45
    355e:	f0 e0       	ldi	r31, 0x00	; 0
    3560:	80 81       	ld	r24, Z
    3562:	80 68       	ori	r24, 0x80	; 128
    3564:	8c 93       	st	X, r24
}
    3566:	cf 91       	pop	r28
    3568:	df 91       	pop	r29
    356a:	08 95       	ret

0000356c <SPI_voidDisableInterrupt>:
void SPI_voidDisableInterrupt(void)
{
    356c:	df 93       	push	r29
    356e:	cf 93       	push	r28
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR , SPCR_SPIE);
    3574:	ad e2       	ldi	r26, 0x2D	; 45
    3576:	b0 e0       	ldi	r27, 0x00	; 0
    3578:	ed e2       	ldi	r30, 0x2D	; 45
    357a:	f0 e0       	ldi	r31, 0x00	; 0
    357c:	80 81       	ld	r24, Z
    357e:	8f 77       	andi	r24, 0x7F	; 127
    3580:	8c 93       	st	X, r24
}
    3582:	cf 91       	pop	r28
    3584:	df 91       	pop	r29
    3586:	08 95       	ret

00003588 <SPI_voidSetCallBack>:
void SPI_voidSetCallBack(void (*PtrToSPI_ISR)(void))
{
    3588:	df 93       	push	r29
    358a:	cf 93       	push	r28
    358c:	00 d0       	rcall	.+0      	; 0x358e <SPI_voidSetCallBack+0x6>
    358e:	cd b7       	in	r28, 0x3d	; 61
    3590:	de b7       	in	r29, 0x3e	; 62
    3592:	9a 83       	std	Y+2, r25	; 0x02
    3594:	89 83       	std	Y+1, r24	; 0x01
	SPI_ISR = PtrToSPI_ISR;
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	9a 81       	ldd	r25, Y+2	; 0x02
    359a:	90 93 9b 01 	sts	0x019B, r25
    359e:	80 93 9a 01 	sts	0x019A, r24
}
    35a2:	0f 90       	pop	r0
    35a4:	0f 90       	pop	r0
    35a6:	cf 91       	pop	r28
    35a8:	df 91       	pop	r29
    35aa:	08 95       	ret

000035ac <SERVO_voidTimer1InitOCR1AB>:

#include "SvM_interface.h"
#include "SvM_private.h"
#include "SvM_config.h"
void SERVO_voidTimer1InitOCR1AB(void)
{
    35ac:	df 93       	push	r29
    35ae:	cf 93       	push	r28
    35b0:	cd b7       	in	r28, 0x3d	; 61
    35b2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN5,DIO_u8PIN_OUTPUT);
    35b4:	83 e0       	ldi	r24, 0x03	; 3
    35b6:	65 e0       	ldi	r22, 0x05	; 5
    35b8:	41 e0       	ldi	r20, 0x01	; 1
    35ba:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN4,DIO_u8PIN_OUTPUT);
    35be:	83 e0       	ldi	r24, 0x03	; 3
    35c0:	64 e0       	ldi	r22, 0x04	; 4
    35c2:	41 e0       	ldi	r20, 0x01	; 1
    35c4:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	TIMER_voidTimer1Enable(TIMER1_MODE_FAST_PWM_ICR1,TIMER1_MODE_CHANNEL_A_CLEAR_OC1A,TIMER1_MODE_CHANNEL_B_CLEAR_OC1B);
    35c8:	8e e0       	ldi	r24, 0x0E	; 14
    35ca:	62 e0       	ldi	r22, 0x02	; 2
    35cc:	42 e0       	ldi	r20, 0x02	; 2
    35ce:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <TIMER_voidTimer1Enable>
	TIMER_voidTimer1SetICR1 (19999);
    35d2:	8f e1       	ldi	r24, 0x1F	; 31
    35d4:	9e e4       	ldi	r25, 0x4E	; 78
    35d6:	0e 94 1d 23 	call	0x463a	; 0x463a <TIMER_voidTimer1SetICR1>
}
    35da:	cf 91       	pop	r28
    35dc:	df 91       	pop	r29
    35de:	08 95       	ret

000035e0 <SERVO_voidTimer1InitOCR1B>:
void SERVO_voidTimer1InitOCR1B(void)
{
    35e0:	df 93       	push	r29
    35e2:	cf 93       	push	r28
    35e4:	cd b7       	in	r28, 0x3d	; 61
    35e6:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN4,DIO_u8PIN_OUTPUT);
    35e8:	83 e0       	ldi	r24, 0x03	; 3
    35ea:	64 e0       	ldi	r22, 0x04	; 4
    35ec:	41 e0       	ldi	r20, 0x01	; 1
    35ee:	0e 94 71 14 	call	0x28e2	; 0x28e2 <DIO_u8SetPinDirection>
	TIMER_voidTimer1Enable(TIMER1_MODE_FAST_PWM_ICR1,TIMER1_MODE_CHANNEL_A_CLEAR_OC1A,TIMER1_MODE_CHANNEL_B_CLEAR_OC1B);
    35f2:	8e e0       	ldi	r24, 0x0E	; 14
    35f4:	62 e0       	ldi	r22, 0x02	; 2
    35f6:	42 e0       	ldi	r20, 0x02	; 2
    35f8:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <TIMER_voidTimer1Enable>
	TIMER_voidTimer1SetICR1 (19999);
    35fc:	8f e1       	ldi	r24, 0x1F	; 31
    35fe:	9e e4       	ldi	r25, 0x4E	; 78
    3600:	0e 94 1d 23 	call	0x463a	; 0x463a <TIMER_voidTimer1SetICR1>
}
    3604:	cf 91       	pop	r28
    3606:	df 91       	pop	r29
    3608:	08 95       	ret

0000360a <SERVO_voidTimer1ServoSetAngleOCR1A>:
void SERVO_voidTimer1ServoSetAngleOCR1A(u32 Copy_u32Angle)
{
    360a:	af 92       	push	r10
    360c:	bf 92       	push	r11
    360e:	cf 92       	push	r12
    3610:	df 92       	push	r13
    3612:	ef 92       	push	r14
    3614:	ff 92       	push	r15
    3616:	0f 93       	push	r16
    3618:	1f 93       	push	r17
    361a:	df 93       	push	r29
    361c:	cf 93       	push	r28
    361e:	00 d0       	rcall	.+0      	; 0x3620 <SERVO_voidTimer1ServoSetAngleOCR1A+0x16>
    3620:	00 d0       	rcall	.+0      	; 0x3622 <SERVO_voidTimer1ServoSetAngleOCR1A+0x18>
    3622:	00 d0       	rcall	.+0      	; 0x3624 <SERVO_voidTimer1ServoSetAngleOCR1A+0x1a>
    3624:	cd b7       	in	r28, 0x3d	; 61
    3626:	de b7       	in	r29, 0x3e	; 62
    3628:	6b 83       	std	Y+3, r22	; 0x03
    362a:	7c 83       	std	Y+4, r23	; 0x04
    362c:	8d 83       	std	Y+5, r24	; 0x05
    362e:	9e 83       	std	Y+6, r25	; 0x06
	//TIMER_voidTimer1SetICR1 (19999);
	u16 Local_u32AnglePulse = Map(0,180,750,2500,Copy_u32Angle);
    3630:	8b 81       	ldd	r24, Y+3	; 0x03
    3632:	9c 81       	ldd	r25, Y+4	; 0x04
    3634:	ad 81       	ldd	r26, Y+5	; 0x05
    3636:	be 81       	ldd	r27, Y+6	; 0x06
    3638:	00 d0       	rcall	.+0      	; 0x363a <SERVO_voidTimer1ServoSetAngleOCR1A+0x30>
    363a:	00 d0       	rcall	.+0      	; 0x363c <SERVO_voidTimer1ServoSetAngleOCR1A+0x32>
    363c:	ed b7       	in	r30, 0x3d	; 61
    363e:	fe b7       	in	r31, 0x3e	; 62
    3640:	31 96       	adiw	r30, 0x01	; 1
    3642:	80 83       	st	Z, r24
    3644:	91 83       	std	Z+1, r25	; 0x01
    3646:	a2 83       	std	Z+2, r26	; 0x02
    3648:	b3 83       	std	Z+3, r27	; 0x03
    364a:	60 e0       	ldi	r22, 0x00	; 0
    364c:	70 e0       	ldi	r23, 0x00	; 0
    364e:	80 e0       	ldi	r24, 0x00	; 0
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	24 eb       	ldi	r18, 0xB4	; 180
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	40 e0       	ldi	r20, 0x00	; 0
    3658:	50 e0       	ldi	r21, 0x00	; 0
    365a:	0f 2e       	mov	r0, r31
    365c:	fe ee       	ldi	r31, 0xEE	; 238
    365e:	ef 2e       	mov	r14, r31
    3660:	f2 e0       	ldi	r31, 0x02	; 2
    3662:	ff 2e       	mov	r15, r31
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	0f 2f       	mov	r16, r31
    3668:	f0 e0       	ldi	r31, 0x00	; 0
    366a:	1f 2f       	mov	r17, r31
    366c:	f0 2d       	mov	r31, r0
    366e:	0f 2e       	mov	r0, r31
    3670:	f4 ec       	ldi	r31, 0xC4	; 196
    3672:	af 2e       	mov	r10, r31
    3674:	f9 e0       	ldi	r31, 0x09	; 9
    3676:	bf 2e       	mov	r11, r31
    3678:	f0 e0       	ldi	r31, 0x00	; 0
    367a:	cf 2e       	mov	r12, r31
    367c:	f0 e0       	ldi	r31, 0x00	; 0
    367e:	df 2e       	mov	r13, r31
    3680:	f0 2d       	mov	r31, r0
    3682:	0e 94 7f 19 	call	0x32fe	; 0x32fe <Map>
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	0f 90       	pop	r0
    368c:	0f 90       	pop	r0
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	9a 83       	std	Y+2, r25	; 0x02
    3694:	89 83       	std	Y+1, r24	; 0x01

	TIMER_voidTimer1SetOCR1A(Local_u32AnglePulse);
    3696:	89 81       	ldd	r24, Y+1	; 0x01
    3698:	9a 81       	ldd	r25, Y+2	; 0x02
    369a:	0e 94 ef 22 	call	0x45de	; 0x45de <TIMER_voidTimer1SetOCR1A>
}
    369e:	26 96       	adiw	r28, 0x06	; 6
    36a0:	0f b6       	in	r0, 0x3f	; 63
    36a2:	f8 94       	cli
    36a4:	de bf       	out	0x3e, r29	; 62
    36a6:	0f be       	out	0x3f, r0	; 63
    36a8:	cd bf       	out	0x3d, r28	; 61
    36aa:	cf 91       	pop	r28
    36ac:	df 91       	pop	r29
    36ae:	1f 91       	pop	r17
    36b0:	0f 91       	pop	r16
    36b2:	ff 90       	pop	r15
    36b4:	ef 90       	pop	r14
    36b6:	df 90       	pop	r13
    36b8:	cf 90       	pop	r12
    36ba:	bf 90       	pop	r11
    36bc:	af 90       	pop	r10
    36be:	08 95       	ret

000036c0 <SERVO_voidTimer1ServoSetAngleOCR1B>:
void SERVO_voidTimer1ServoSetAngleOCR1B(u32 Copy_u32Angle)
{
    36c0:	af 92       	push	r10
    36c2:	bf 92       	push	r11
    36c4:	cf 92       	push	r12
    36c6:	df 92       	push	r13
    36c8:	ef 92       	push	r14
    36ca:	ff 92       	push	r15
    36cc:	0f 93       	push	r16
    36ce:	1f 93       	push	r17
    36d0:	df 93       	push	r29
    36d2:	cf 93       	push	r28
    36d4:	00 d0       	rcall	.+0      	; 0x36d6 <SERVO_voidTimer1ServoSetAngleOCR1B+0x16>
    36d6:	00 d0       	rcall	.+0      	; 0x36d8 <SERVO_voidTimer1ServoSetAngleOCR1B+0x18>
    36d8:	00 d0       	rcall	.+0      	; 0x36da <SERVO_voidTimer1ServoSetAngleOCR1B+0x1a>
    36da:	cd b7       	in	r28, 0x3d	; 61
    36dc:	de b7       	in	r29, 0x3e	; 62
    36de:	6b 83       	std	Y+3, r22	; 0x03
    36e0:	7c 83       	std	Y+4, r23	; 0x04
    36e2:	8d 83       	std	Y+5, r24	; 0x05
    36e4:	9e 83       	std	Y+6, r25	; 0x06
	//TIMER_voidTimer1SetOCR1A (19999);
	u16 Local_u32AnglePulse = Map(0,180,750,2500,Copy_u32Angle);
    36e6:	8b 81       	ldd	r24, Y+3	; 0x03
    36e8:	9c 81       	ldd	r25, Y+4	; 0x04
    36ea:	ad 81       	ldd	r26, Y+5	; 0x05
    36ec:	be 81       	ldd	r27, Y+6	; 0x06
    36ee:	00 d0       	rcall	.+0      	; 0x36f0 <SERVO_voidTimer1ServoSetAngleOCR1B+0x30>
    36f0:	00 d0       	rcall	.+0      	; 0x36f2 <SERVO_voidTimer1ServoSetAngleOCR1B+0x32>
    36f2:	ed b7       	in	r30, 0x3d	; 61
    36f4:	fe b7       	in	r31, 0x3e	; 62
    36f6:	31 96       	adiw	r30, 0x01	; 1
    36f8:	80 83       	st	Z, r24
    36fa:	91 83       	std	Z+1, r25	; 0x01
    36fc:	a2 83       	std	Z+2, r26	; 0x02
    36fe:	b3 83       	std	Z+3, r27	; 0x03
    3700:	60 e0       	ldi	r22, 0x00	; 0
    3702:	70 e0       	ldi	r23, 0x00	; 0
    3704:	80 e0       	ldi	r24, 0x00	; 0
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	24 eb       	ldi	r18, 0xB4	; 180
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	40 e0       	ldi	r20, 0x00	; 0
    370e:	50 e0       	ldi	r21, 0x00	; 0
    3710:	0f 2e       	mov	r0, r31
    3712:	fe ee       	ldi	r31, 0xEE	; 238
    3714:	ef 2e       	mov	r14, r31
    3716:	f2 e0       	ldi	r31, 0x02	; 2
    3718:	ff 2e       	mov	r15, r31
    371a:	f0 e0       	ldi	r31, 0x00	; 0
    371c:	0f 2f       	mov	r16, r31
    371e:	f0 e0       	ldi	r31, 0x00	; 0
    3720:	1f 2f       	mov	r17, r31
    3722:	f0 2d       	mov	r31, r0
    3724:	0f 2e       	mov	r0, r31
    3726:	f4 ec       	ldi	r31, 0xC4	; 196
    3728:	af 2e       	mov	r10, r31
    372a:	f9 e0       	ldi	r31, 0x09	; 9
    372c:	bf 2e       	mov	r11, r31
    372e:	f0 e0       	ldi	r31, 0x00	; 0
    3730:	cf 2e       	mov	r12, r31
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	df 2e       	mov	r13, r31
    3736:	f0 2d       	mov	r31, r0
    3738:	0e 94 7f 19 	call	0x32fe	; 0x32fe <Map>
    373c:	0f 90       	pop	r0
    373e:	0f 90       	pop	r0
    3740:	0f 90       	pop	r0
    3742:	0f 90       	pop	r0
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	9a 83       	std	Y+2, r25	; 0x02
    374a:	89 83       	std	Y+1, r24	; 0x01
	TIMER_voidTimer1SetOCR1B(Local_u32AnglePulse);
    374c:	89 81       	ldd	r24, Y+1	; 0x01
    374e:	9a 81       	ldd	r25, Y+2	; 0x02
    3750:	0e 94 06 23 	call	0x460c	; 0x460c <TIMER_voidTimer1SetOCR1B>
}
    3754:	26 96       	adiw	r28, 0x06	; 6
    3756:	0f b6       	in	r0, 0x3f	; 63
    3758:	f8 94       	cli
    375a:	de bf       	out	0x3e, r29	; 62
    375c:	0f be       	out	0x3f, r0	; 63
    375e:	cd bf       	out	0x3d, r28	; 61
    3760:	cf 91       	pop	r28
    3762:	df 91       	pop	r29
    3764:	1f 91       	pop	r17
    3766:	0f 91       	pop	r16
    3768:	ff 90       	pop	r15
    376a:	ef 90       	pop	r14
    376c:	df 90       	pop	r13
    376e:	cf 90       	pop	r12
    3770:	bf 90       	pop	r11
    3772:	af 90       	pop	r10
    3774:	08 95       	ret

00003776 <TIMER_voidTimer0Init>:
u32 TIMER0_f32OVCounterTmp;
f32 TIMER0_u16Prescaller;
u32 TIMER0_f32CounterCTC;
/**********************************************************************************/
void TIMER_voidTimer0Init(void)
{
    3776:	df 93       	push	r29
    3778:	cf 93       	push	r28
    377a:	cd b7       	in	r28, 0x3d	; 61
    377c:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TIMSK,TIMSK_TOIE0);
		CLR_BIT(TIMSK,TIMSK_OCIE0);

		TCNT0=TIMER0_f32PreloodValue;
	#elif TIMER0_MODE  == TIMER0_MODE_PWM_PHASE_CORRECT
		SET_BIT(TCCR0,TCCR0_WGM00);
    377e:	a3 e5       	ldi	r26, 0x53	; 83
    3780:	b0 e0       	ldi	r27, 0x00	; 0
    3782:	e3 e5       	ldi	r30, 0x53	; 83
    3784:	f0 e0       	ldi	r31, 0x00	; 0
    3786:	80 81       	ld	r24, Z
    3788:	80 64       	ori	r24, 0x40	; 64
    378a:	8c 93       	st	X, r24
	    CLR_BIT(TCCR0,TCCR0_WGM01);
    378c:	a3 e5       	ldi	r26, 0x53	; 83
    378e:	b0 e0       	ldi	r27, 0x00	; 0
    3790:	e3 e5       	ldi	r30, 0x53	; 83
    3792:	f0 e0       	ldi	r31, 0x00	; 0
    3794:	80 81       	ld	r24, Z
    3796:	87 7f       	andi	r24, 0xF7	; 247
    3798:	8c 93       	st	X, r24
         CLR_BIT(TCCR0,TCCR0_COM01);
    #elif  TIMER0_COMPARE_OUTPUT_MODE==TIMER0_MODE_TOGGLE
         SET_BIT(TCCR0,TCCR0_COM00);
         CLR_BIT(TCCR0,TCCR0_COM01);
    #elif  TIMER0_COMPARE_OUTPUT_MODE==TIMER0_MODE_CLEAR_OC0
         CLR_BIT(TCCR0,TCCR0_COM00);
    379a:	a3 e5       	ldi	r26, 0x53	; 83
    379c:	b0 e0       	ldi	r27, 0x00	; 0
    379e:	e3 e5       	ldi	r30, 0x53	; 83
    37a0:	f0 e0       	ldi	r31, 0x00	; 0
    37a2:	80 81       	ld	r24, Z
    37a4:	8f 7e       	andi	r24, 0xEF	; 239
    37a6:	8c 93       	st	X, r24
         SET_BIT(TCCR0,TCCR0_COM01);
    37a8:	a3 e5       	ldi	r26, 0x53	; 83
    37aa:	b0 e0       	ldi	r27, 0x00	; 0
    37ac:	e3 e5       	ldi	r30, 0x53	; 83
    37ae:	f0 e0       	ldi	r31, 0x00	; 0
    37b0:	80 81       	ld	r24, Z
    37b2:	80 62       	ori	r24, 0x20	; 32
    37b4:	8c 93       	st	X, r24
        CLR_BIT(TCCR0,TCCR0_CS00);
	    CLR_BIT(TCCR0,TCCR0_CS01);
	    SET_BIT(TCCR0,TCCR0_CS02);
	    TIMER0_u16Prescaller=256;
    #elif  TIMER0_CLOCK_SELECT == TIMER0_SELECT_CLK_DIV_1024
        SET_BIT(TCCR0,TCCR0_CS00);
    37b6:	a3 e5       	ldi	r26, 0x53	; 83
    37b8:	b0 e0       	ldi	r27, 0x00	; 0
    37ba:	e3 e5       	ldi	r30, 0x53	; 83
    37bc:	f0 e0       	ldi	r31, 0x00	; 0
    37be:	80 81       	ld	r24, Z
    37c0:	81 60       	ori	r24, 0x01	; 1
    37c2:	8c 93       	st	X, r24
	    CLR_BIT(TCCR0,TCCR0_CS01);
    37c4:	a3 e5       	ldi	r26, 0x53	; 83
    37c6:	b0 e0       	ldi	r27, 0x00	; 0
    37c8:	e3 e5       	ldi	r30, 0x53	; 83
    37ca:	f0 e0       	ldi	r31, 0x00	; 0
    37cc:	80 81       	ld	r24, Z
    37ce:	8d 7f       	andi	r24, 0xFD	; 253
    37d0:	8c 93       	st	X, r24
	    SET_BIT(TCCR0,TCCR0_CS02);
    37d2:	a3 e5       	ldi	r26, 0x53	; 83
    37d4:	b0 e0       	ldi	r27, 0x00	; 0
    37d6:	e3 e5       	ldi	r30, 0x53	; 83
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	80 81       	ld	r24, Z
    37dc:	84 60       	ori	r24, 0x04	; 4
    37de:	8c 93       	st	X, r24
	    TIMER0_u16Prescaller=1024;
    37e0:	80 e0       	ldi	r24, 0x00	; 0
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	a0 e8       	ldi	r26, 0x80	; 128
    37e6:	b4 e4       	ldi	r27, 0x44	; 68
    37e8:	80 93 b5 01 	sts	0x01B5, r24
    37ec:	90 93 b6 01 	sts	0x01B6, r25
    37f0:	a0 93 b7 01 	sts	0x01B7, r26
    37f4:	b0 93 b8 01 	sts	0x01B8, r27
        SET_BIT(TCCR0,TCCR0_CS00);
	    SET_BIT(TCCR0,TCCR0_CS01);
	    SET_BIT(TCCR0,TCCR0_CS02);
	    TIMER0_u16Prescaller=0;
	#endif
}
    37f8:	cf 91       	pop	r28
    37fa:	df 91       	pop	r29
    37fc:	08 95       	ret

000037fe <TIMER_voidTimer0Delay>:
/**********************************************************************************/
void TIMER_voidTimer0Delay(u32 Copy_u32DTime,void(*Copy_pFun)(void))
{
    37fe:	df 93       	push	r29
    3800:	cf 93       	push	r28
    3802:	00 d0       	rcall	.+0      	; 0x3804 <TIMER_voidTimer0Delay+0x6>
    3804:	00 d0       	rcall	.+0      	; 0x3806 <TIMER_voidTimer0Delay+0x8>
    3806:	00 d0       	rcall	.+0      	; 0x3808 <TIMER_voidTimer0Delay+0xa>
    3808:	cd b7       	in	r28, 0x3d	; 61
    380a:	de b7       	in	r29, 0x3e	; 62
    380c:	69 83       	std	Y+1, r22	; 0x01
    380e:	7a 83       	std	Y+2, r23	; 0x02
    3810:	8b 83       	std	Y+3, r24	; 0x03
    3812:	9c 83       	std	Y+4, r25	; 0x04
    3814:	5e 83       	std	Y+6, r21	; 0x06
    3816:	4d 83       	std	Y+5, r20	; 0x05
    #elif TIMER0_MODE  == TIMER0_MODE_CTC
	   f32 Local_f32TCTC=((TIMER0_CTC_OCR0_VALUE)*(TIMER0_u16Prescaller/8000UL));
	   TIMER0_f32CounterCTC=((f32)Copy_u32DTime/Local_f32TCTC);
	   TIMER0_pSetCallBack=Copy_pFun;
    #endif
}
    3818:	26 96       	adiw	r28, 0x06	; 6
    381a:	0f b6       	in	r0, 0x3f	; 63
    381c:	f8 94       	cli
    381e:	de bf       	out	0x3e, r29	; 62
    3820:	0f be       	out	0x3f, r0	; 63
    3822:	cd bf       	out	0x3d, r28	; 61
    3824:	cf 91       	pop	r28
    3826:	df 91       	pop	r29
    3828:	08 95       	ret

0000382a <TIMER_voidTimer0GeneratePWM>:
/**********************************************************************************/
void TIMER_voidTimer0GeneratePWM(f32 Copy_u8Intensity)
{
    382a:	0f 93       	push	r16
    382c:	1f 93       	push	r17
    382e:	df 93       	push	r29
    3830:	cf 93       	push	r28
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
    3836:	28 97       	sbiw	r28, 0x08	; 8
    3838:	0f b6       	in	r0, 0x3f	; 63
    383a:	f8 94       	cli
    383c:	de bf       	out	0x3e, r29	; 62
    383e:	0f be       	out	0x3f, r0	; 63
    3840:	cd bf       	out	0x3d, r28	; 61
    3842:	6d 83       	std	Y+5, r22	; 0x05
    3844:	7e 83       	std	Y+6, r23	; 0x06
    3846:	8f 83       	std	Y+7, r24	; 0x07
    3848:	98 87       	std	Y+8, r25	; 0x08
   #if TIMER0_MODE  == TIMER0_MODE_PWM_PHASE_CORRECT
	   f32 Copy_u8OCRValue;
	   Copy_u8OCRValue=(511*Copy_u8Intensity/100);
    384a:	6d 81       	ldd	r22, Y+5	; 0x05
    384c:	7e 81       	ldd	r23, Y+6	; 0x06
    384e:	8f 81       	ldd	r24, Y+7	; 0x07
    3850:	98 85       	ldd	r25, Y+8	; 0x08
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	30 e8       	ldi	r19, 0x80	; 128
    3856:	4f ef       	ldi	r20, 0xFF	; 255
    3858:	53 e4       	ldi	r21, 0x43	; 67
    385a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385e:	dc 01       	movw	r26, r24
    3860:	cb 01       	movw	r24, r22
    3862:	bc 01       	movw	r22, r24
    3864:	cd 01       	movw	r24, r26
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	48 ec       	ldi	r20, 0xC8	; 200
    386c:	52 e4       	ldi	r21, 0x42	; 66
    386e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3872:	dc 01       	movw	r26, r24
    3874:	cb 01       	movw	r24, r22
    3876:	89 83       	std	Y+1, r24	; 0x01
    3878:	9a 83       	std	Y+2, r25	; 0x02
    387a:	ab 83       	std	Y+3, r26	; 0x03
    387c:	bc 83       	std	Y+4, r27	; 0x04
	   OCR0=Copy_u8OCRValue;
    387e:	0c e5       	ldi	r16, 0x5C	; 92
    3880:	10 e0       	ldi	r17, 0x00	; 0
    3882:	69 81       	ldd	r22, Y+1	; 0x01
    3884:	7a 81       	ldd	r23, Y+2	; 0x02
    3886:	8b 81       	ldd	r24, Y+3	; 0x03
    3888:	9c 81       	ldd	r25, Y+4	; 0x04
    388a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	f8 01       	movw	r30, r16
    3894:	80 83       	st	Z, r24
   #elif TIMER0_MODE  == TIMER0_MODE_FAST_PWM
	   f32 Copy_u8OCRValue;
	   Copy_u8OCRValue=(256*Copy_u8Intensity/100);
	   OCR0=Copy_u8OCRValue;
   #endif
}
    3896:	28 96       	adiw	r28, 0x08	; 8
    3898:	0f b6       	in	r0, 0x3f	; 63
    389a:	f8 94       	cli
    389c:	de bf       	out	0x3e, r29	; 62
    389e:	0f be       	out	0x3f, r0	; 63
    38a0:	cd bf       	out	0x3d, r28	; 61
    38a2:	cf 91       	pop	r28
    38a4:	df 91       	pop	r29
    38a6:	1f 91       	pop	r17
    38a8:	0f 91       	pop	r16
    38aa:	08 95       	ret

000038ac <__vector_10>:
		   TIMER0_pSetCallBack();
		   Local_u16Counter=0;
	   }
}*/
void __vector_10 (void)
{
    38ac:	1f 92       	push	r1
    38ae:	0f 92       	push	r0
    38b0:	0f b6       	in	r0, 0x3f	; 63
    38b2:	0f 92       	push	r0
    38b4:	11 24       	eor	r1, r1
    38b6:	2f 93       	push	r18
    38b8:	3f 93       	push	r19
    38ba:	4f 93       	push	r20
    38bc:	5f 93       	push	r21
    38be:	6f 93       	push	r22
    38c0:	7f 93       	push	r23
    38c2:	8f 93       	push	r24
    38c4:	9f 93       	push	r25
    38c6:	af 93       	push	r26
    38c8:	bf 93       	push	r27
    38ca:	ef 93       	push	r30
    38cc:	ff 93       	push	r31
    38ce:	df 93       	push	r29
    38d0:	cf 93       	push	r28
    38d2:	cd b7       	in	r28, 0x3d	; 61
    38d4:	de b7       	in	r29, 0x3e	; 62
	   static u16 Local_u8Counter=0;
	   Local_u8Counter++;
    38d6:	80 91 9c 01 	lds	r24, 0x019C
    38da:	90 91 9d 01 	lds	r25, 0x019D
    38de:	01 96       	adiw	r24, 0x01	; 1
    38e0:	90 93 9d 01 	sts	0x019D, r25
    38e4:	80 93 9c 01 	sts	0x019C, r24
	   if(TIMER0_f32CounterCTC==Local_u8Counter)
    38e8:	80 91 9c 01 	lds	r24, 0x019C
    38ec:	90 91 9d 01 	lds	r25, 0x019D
    38f0:	9c 01       	movw	r18, r24
    38f2:	40 e0       	ldi	r20, 0x00	; 0
    38f4:	50 e0       	ldi	r21, 0x00	; 0
    38f6:	80 91 c1 01 	lds	r24, 0x01C1
    38fa:	90 91 c2 01 	lds	r25, 0x01C2
    38fe:	a0 91 c3 01 	lds	r26, 0x01C3
    3902:	b0 91 c4 01 	lds	r27, 0x01C4
    3906:	28 17       	cp	r18, r24
    3908:	39 07       	cpc	r19, r25
    390a:	4a 07       	cpc	r20, r26
    390c:	5b 07       	cpc	r21, r27
    390e:	49 f4       	brne	.+18     	; 0x3922 <__vector_10+0x76>
	   {
		   Local_u8Counter=0;
    3910:	10 92 9d 01 	sts	0x019D, r1
    3914:	10 92 9c 01 	sts	0x019C, r1
		   TIMER0_pSetCallBack();
    3918:	e0 91 a2 01 	lds	r30, 0x01A2
    391c:	f0 91 a3 01 	lds	r31, 0x01A3
    3920:	09 95       	icall
	   }
}
    3922:	cf 91       	pop	r28
    3924:	df 91       	pop	r29
    3926:	ff 91       	pop	r31
    3928:	ef 91       	pop	r30
    392a:	bf 91       	pop	r27
    392c:	af 91       	pop	r26
    392e:	9f 91       	pop	r25
    3930:	8f 91       	pop	r24
    3932:	7f 91       	pop	r23
    3934:	6f 91       	pop	r22
    3936:	5f 91       	pop	r21
    3938:	4f 91       	pop	r20
    393a:	3f 91       	pop	r19
    393c:	2f 91       	pop	r18
    393e:	0f 90       	pop	r0
    3940:	0f be       	out	0x3f, r0	; 63
    3942:	0f 90       	pop	r0
    3944:	1f 90       	pop	r1
    3946:	18 95       	reti

00003948 <TIMER_voidTimer2Init>:
f32 TIMER2_u16Prescaller;
u32 TIMER2_f32CounterCTC;
/**********************************************************************************/

void TIMER_voidTimer2Init(void)
{
    3948:	df 93       	push	r29
    394a:	cf 93       	push	r28
    394c:	cd b7       	in	r28, 0x3d	; 61
    394e:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TIMSK,TIMSK_TOIE2);
		CLR_BIT(TIMSK,TIMSK_OCIE2);

		TCNT2=TIMER2_f32PreloodValue;
	#elif TIMER2_MODE  == TIMER2_MODE_PWM_PHASE_CORRECT
		SET_BIT(TCCR2,TCCR2_WGM20);
    3950:	a5 e4       	ldi	r26, 0x45	; 69
    3952:	b0 e0       	ldi	r27, 0x00	; 0
    3954:	e5 e4       	ldi	r30, 0x45	; 69
    3956:	f0 e0       	ldi	r31, 0x00	; 0
    3958:	80 81       	ld	r24, Z
    395a:	80 64       	ori	r24, 0x40	; 64
    395c:	8c 93       	st	X, r24
	    CLR_BIT(TCCR2,TCCR2_WGM21);
    395e:	a5 e4       	ldi	r26, 0x45	; 69
    3960:	b0 e0       	ldi	r27, 0x00	; 0
    3962:	e5 e4       	ldi	r30, 0x45	; 69
    3964:	f0 e0       	ldi	r31, 0x00	; 0
    3966:	80 81       	ld	r24, Z
    3968:	87 7f       	andi	r24, 0xF7	; 247
    396a:	8c 93       	st	X, r24
         CLR_BIT(TCCR2,TCCR2_COM21);
    #elif  TIMER2_COMPARE_OUTPUT_MODE==TIMER2_MODE_TOGGLE
         SET_BIT(TCCR2,TCCR2_COM20);
         CLR_BIT(TCCR2,TCCR2_COM21);
    #elif  TIMER2_COMPARE_OUTPUT_MODE==TIMER2_MODE_CLEAR_OC2
         CLR_BIT(TCCR2,TCCR2_COM20);
    396c:	a5 e4       	ldi	r26, 0x45	; 69
    396e:	b0 e0       	ldi	r27, 0x00	; 0
    3970:	e5 e4       	ldi	r30, 0x45	; 69
    3972:	f0 e0       	ldi	r31, 0x00	; 0
    3974:	80 81       	ld	r24, Z
    3976:	8f 7e       	andi	r24, 0xEF	; 239
    3978:	8c 93       	st	X, r24
         SET_BIT(TCCR2,TCCR2_COM21);
    397a:	a5 e4       	ldi	r26, 0x45	; 69
    397c:	b0 e0       	ldi	r27, 0x00	; 0
    397e:	e5 e4       	ldi	r30, 0x45	; 69
    3980:	f0 e0       	ldi	r31, 0x00	; 0
    3982:	80 81       	ld	r24, Z
    3984:	80 62       	ori	r24, 0x20	; 32
    3986:	8c 93       	st	X, r24
        CLR_BIT(TCCR2,TCCR2_CS20);
	    CLR_BIT(TCCR2,TCCR2_CS21);
	    SET_BIT(TCCR2,TCCR2_CS22);
	    TIMER2_u16Prescaller=256;
    #elif  TIMER2_CLOCK_SELECT == TIMER2_SELECT_CLK_DIV_1024
        SET_BIT(TCCR2,TCCR2_CS20);
    3988:	a5 e4       	ldi	r26, 0x45	; 69
    398a:	b0 e0       	ldi	r27, 0x00	; 0
    398c:	e5 e4       	ldi	r30, 0x45	; 69
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	80 81       	ld	r24, Z
    3992:	81 60       	ori	r24, 0x01	; 1
    3994:	8c 93       	st	X, r24
	    CLR_BIT(TCCR2,TCCR2_CS21);
    3996:	a5 e4       	ldi	r26, 0x45	; 69
    3998:	b0 e0       	ldi	r27, 0x00	; 0
    399a:	e5 e4       	ldi	r30, 0x45	; 69
    399c:	f0 e0       	ldi	r31, 0x00	; 0
    399e:	80 81       	ld	r24, Z
    39a0:	8d 7f       	andi	r24, 0xFD	; 253
    39a2:	8c 93       	st	X, r24
	    SET_BIT(TCCR2,TCCR2_CS22);
    39a4:	a5 e4       	ldi	r26, 0x45	; 69
    39a6:	b0 e0       	ldi	r27, 0x00	; 0
    39a8:	e5 e4       	ldi	r30, 0x45	; 69
    39aa:	f0 e0       	ldi	r31, 0x00	; 0
    39ac:	80 81       	ld	r24, Z
    39ae:	84 60       	ori	r24, 0x04	; 4
    39b0:	8c 93       	st	X, r24
	    TIMER2_u16Prescaller=1024;
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	a0 e8       	ldi	r26, 0x80	; 128
    39b8:	b4 e4       	ldi	r27, 0x44	; 68
    39ba:	80 93 bd 01 	sts	0x01BD, r24
    39be:	90 93 be 01 	sts	0x01BE, r25
    39c2:	a0 93 bf 01 	sts	0x01BF, r26
    39c6:	b0 93 c0 01 	sts	0x01C0, r27
        SET_BIT(TCCR2,TCCR2_CS20);
	    SET_BIT(TCCR2,TCCR2_CS21);
	    SET_BIT(TCCR2,TCCR2_CS22);
	    TIMER2_u16Prescaller=0;
	#endif
}
    39ca:	cf 91       	pop	r28
    39cc:	df 91       	pop	r29
    39ce:	08 95       	ret

000039d0 <TIMER_voidTimer2Delay>:
/**********************************************************************************/
void TIMER_voidTimer2Delay(u32 Copy_u32DTime,void(*Copy_pFun)(void))
{
    39d0:	df 93       	push	r29
    39d2:	cf 93       	push	r28
    39d4:	00 d0       	rcall	.+0      	; 0x39d6 <TIMER_voidTimer2Delay+0x6>
    39d6:	00 d0       	rcall	.+0      	; 0x39d8 <TIMER_voidTimer2Delay+0x8>
    39d8:	00 d0       	rcall	.+0      	; 0x39da <TIMER_voidTimer2Delay+0xa>
    39da:	cd b7       	in	r28, 0x3d	; 61
    39dc:	de b7       	in	r29, 0x3e	; 62
    39de:	69 83       	std	Y+1, r22	; 0x01
    39e0:	7a 83       	std	Y+2, r23	; 0x02
    39e2:	8b 83       	std	Y+3, r24	; 0x03
    39e4:	9c 83       	std	Y+4, r25	; 0x04
    39e6:	5e 83       	std	Y+6, r21	; 0x06
    39e8:	4d 83       	std	Y+5, r20	; 0x05
    #elif TIMER2_MODE  == TIMER2_MODE_CTC
	   f32 Local_f32TCTC=((TIMER2_CTC_OCR2_VALUE)*(TIMER2_u16Prescaller/8000UL));
	   TIMER2_f32CounterCTC=((f32)Copy_u32DTime/Local_f32TCTC);
	   TIMER2_pSetCallBack=Copy_pFun;
    #endif
}
    39ea:	26 96       	adiw	r28, 0x06	; 6
    39ec:	0f b6       	in	r0, 0x3f	; 63
    39ee:	f8 94       	cli
    39f0:	de bf       	out	0x3e, r29	; 62
    39f2:	0f be       	out	0x3f, r0	; 63
    39f4:	cd bf       	out	0x3d, r28	; 61
    39f6:	cf 91       	pop	r28
    39f8:	df 91       	pop	r29
    39fa:	08 95       	ret

000039fc <TIMER_voidTimer2GeneratePWM>:
/**********************************************************************************/
void TIMER_voidTimer2GeneratePWM(f32 Copy_u8Intensity)
{
    39fc:	0f 93       	push	r16
    39fe:	1f 93       	push	r17
    3a00:	df 93       	push	r29
    3a02:	cf 93       	push	r28
    3a04:	cd b7       	in	r28, 0x3d	; 61
    3a06:	de b7       	in	r29, 0x3e	; 62
    3a08:	28 97       	sbiw	r28, 0x08	; 8
    3a0a:	0f b6       	in	r0, 0x3f	; 63
    3a0c:	f8 94       	cli
    3a0e:	de bf       	out	0x3e, r29	; 62
    3a10:	0f be       	out	0x3f, r0	; 63
    3a12:	cd bf       	out	0x3d, r28	; 61
    3a14:	6d 83       	std	Y+5, r22	; 0x05
    3a16:	7e 83       	std	Y+6, r23	; 0x06
    3a18:	8f 83       	std	Y+7, r24	; 0x07
    3a1a:	98 87       	std	Y+8, r25	; 0x08
   #if TIMER2_MODE  == TIMER2_MODE_PWM_PHASE_CORRECT
	   f32 Copy_u8OCRValue;
	   Copy_u8OCRValue=(511*Copy_u8Intensity/100);
    3a1c:	6d 81       	ldd	r22, Y+5	; 0x05
    3a1e:	7e 81       	ldd	r23, Y+6	; 0x06
    3a20:	8f 81       	ldd	r24, Y+7	; 0x07
    3a22:	98 85       	ldd	r25, Y+8	; 0x08
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	30 e8       	ldi	r19, 0x80	; 128
    3a28:	4f ef       	ldi	r20, 0xFF	; 255
    3a2a:	53 e4       	ldi	r21, 0x43	; 67
    3a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a30:	dc 01       	movw	r26, r24
    3a32:	cb 01       	movw	r24, r22
    3a34:	bc 01       	movw	r22, r24
    3a36:	cd 01       	movw	r24, r26
    3a38:	20 e0       	ldi	r18, 0x00	; 0
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	48 ec       	ldi	r20, 0xC8	; 200
    3a3e:	52 e4       	ldi	r21, 0x42	; 66
    3a40:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a44:	dc 01       	movw	r26, r24
    3a46:	cb 01       	movw	r24, r22
    3a48:	89 83       	std	Y+1, r24	; 0x01
    3a4a:	9a 83       	std	Y+2, r25	; 0x02
    3a4c:	ab 83       	std	Y+3, r26	; 0x03
    3a4e:	bc 83       	std	Y+4, r27	; 0x04
	   OCR2=Copy_u8OCRValue;
    3a50:	03 e4       	ldi	r16, 0x43	; 67
    3a52:	10 e0       	ldi	r17, 0x00	; 0
    3a54:	69 81       	ldd	r22, Y+1	; 0x01
    3a56:	7a 81       	ldd	r23, Y+2	; 0x02
    3a58:	8b 81       	ldd	r24, Y+3	; 0x03
    3a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a60:	dc 01       	movw	r26, r24
    3a62:	cb 01       	movw	r24, r22
    3a64:	f8 01       	movw	r30, r16
    3a66:	80 83       	st	Z, r24
   #elif TIMER2_MODE  == TIMER2_MODE_FAST_PWM
	   f32 Copy_u8OCRValue;
	   Copy_u8OCRValue=(256*Copy_u8Intensity/100);
	   OCR2=Copy_u8OCRValue;
   #endif
}
    3a68:	28 96       	adiw	r28, 0x08	; 8
    3a6a:	0f b6       	in	r0, 0x3f	; 63
    3a6c:	f8 94       	cli
    3a6e:	de bf       	out	0x3e, r29	; 62
    3a70:	0f be       	out	0x3f, r0	; 63
    3a72:	cd bf       	out	0x3d, r28	; 61
    3a74:	cf 91       	pop	r28
    3a76:	df 91       	pop	r29
    3a78:	1f 91       	pop	r17
    3a7a:	0f 91       	pop	r16
    3a7c:	08 95       	ret

00003a7e <__vector_5>:
/**********************************************************************************/
void __vector_5 (void)
{
    3a7e:	1f 92       	push	r1
    3a80:	0f 92       	push	r0
    3a82:	0f b6       	in	r0, 0x3f	; 63
    3a84:	0f 92       	push	r0
    3a86:	11 24       	eor	r1, r1
    3a88:	2f 93       	push	r18
    3a8a:	3f 93       	push	r19
    3a8c:	4f 93       	push	r20
    3a8e:	5f 93       	push	r21
    3a90:	6f 93       	push	r22
    3a92:	7f 93       	push	r23
    3a94:	8f 93       	push	r24
    3a96:	9f 93       	push	r25
    3a98:	af 93       	push	r26
    3a9a:	bf 93       	push	r27
    3a9c:	ef 93       	push	r30
    3a9e:	ff 93       	push	r31
    3aa0:	df 93       	push	r29
    3aa2:	cf 93       	push	r28
    3aa4:	cd b7       	in	r28, 0x3d	; 61
    3aa6:	de b7       	in	r29, 0x3e	; 62
	   static u16 Local_u16Counter=0;
	   Local_u16Counter++;
    3aa8:	80 91 9e 01 	lds	r24, 0x019E
    3aac:	90 91 9f 01 	lds	r25, 0x019F
    3ab0:	01 96       	adiw	r24, 0x01	; 1
    3ab2:	90 93 9f 01 	sts	0x019F, r25
    3ab6:	80 93 9e 01 	sts	0x019E, r24
	   if(TIMER2_f32OVCounter==Local_u16Counter)
    3aba:	80 91 9e 01 	lds	r24, 0x019E
    3abe:	90 91 9f 01 	lds	r25, 0x019F
    3ac2:	9c 01       	movw	r18, r24
    3ac4:	40 e0       	ldi	r20, 0x00	; 0
    3ac6:	50 e0       	ldi	r21, 0x00	; 0
    3ac8:	80 91 b9 01 	lds	r24, 0x01B9
    3acc:	90 91 ba 01 	lds	r25, 0x01BA
    3ad0:	a0 91 bb 01 	lds	r26, 0x01BB
    3ad4:	b0 91 bc 01 	lds	r27, 0x01BC
    3ad8:	28 17       	cp	r18, r24
    3ada:	39 07       	cpc	r19, r25
    3adc:	4a 07       	cpc	r20, r26
    3ade:	5b 07       	cpc	r21, r27
    3ae0:	a1 f4       	brne	.+40     	; 0x3b0a <__vector_5+0x8c>
	   {
		   TCNT2=TIMER2_f32PreloodValue;
    3ae2:	e4 e4       	ldi	r30, 0x44	; 68
    3ae4:	f0 e0       	ldi	r31, 0x00	; 0
    3ae6:	80 91 c9 01 	lds	r24, 0x01C9
    3aea:	90 91 ca 01 	lds	r25, 0x01CA
    3aee:	a0 91 cb 01 	lds	r26, 0x01CB
    3af2:	b0 91 cc 01 	lds	r27, 0x01CC
    3af6:	80 83       	st	Z, r24
		   TIMER2_pSetCallBack();
    3af8:	e0 91 a4 01 	lds	r30, 0x01A4
    3afc:	f0 91 a5 01 	lds	r31, 0x01A5
    3b00:	09 95       	icall
		   Local_u16Counter=0;
    3b02:	10 92 9f 01 	sts	0x019F, r1
    3b06:	10 92 9e 01 	sts	0x019E, r1
	   }
}
    3b0a:	cf 91       	pop	r28
    3b0c:	df 91       	pop	r29
    3b0e:	ff 91       	pop	r31
    3b10:	ef 91       	pop	r30
    3b12:	bf 91       	pop	r27
    3b14:	af 91       	pop	r26
    3b16:	9f 91       	pop	r25
    3b18:	8f 91       	pop	r24
    3b1a:	7f 91       	pop	r23
    3b1c:	6f 91       	pop	r22
    3b1e:	5f 91       	pop	r21
    3b20:	4f 91       	pop	r20
    3b22:	3f 91       	pop	r19
    3b24:	2f 91       	pop	r18
    3b26:	0f 90       	pop	r0
    3b28:	0f be       	out	0x3f, r0	; 63
    3b2a:	0f 90       	pop	r0
    3b2c:	1f 90       	pop	r1
    3b2e:	18 95       	reti

00003b30 <__vector_4>:
void __vector_4 (void)
{
    3b30:	1f 92       	push	r1
    3b32:	0f 92       	push	r0
    3b34:	0f b6       	in	r0, 0x3f	; 63
    3b36:	0f 92       	push	r0
    3b38:	11 24       	eor	r1, r1
    3b3a:	2f 93       	push	r18
    3b3c:	3f 93       	push	r19
    3b3e:	4f 93       	push	r20
    3b40:	5f 93       	push	r21
    3b42:	6f 93       	push	r22
    3b44:	7f 93       	push	r23
    3b46:	8f 93       	push	r24
    3b48:	9f 93       	push	r25
    3b4a:	af 93       	push	r26
    3b4c:	bf 93       	push	r27
    3b4e:	ef 93       	push	r30
    3b50:	ff 93       	push	r31
    3b52:	df 93       	push	r29
    3b54:	cf 93       	push	r28
    3b56:	cd b7       	in	r28, 0x3d	; 61
    3b58:	de b7       	in	r29, 0x3e	; 62
	   static u16 Local_u8Counter=0;
	   Local_u8Counter++;
    3b5a:	80 91 a0 01 	lds	r24, 0x01A0
    3b5e:	90 91 a1 01 	lds	r25, 0x01A1
    3b62:	01 96       	adiw	r24, 0x01	; 1
    3b64:	90 93 a1 01 	sts	0x01A1, r25
    3b68:	80 93 a0 01 	sts	0x01A0, r24
	   if(TIMER2_f32CounterCTC==Local_u8Counter)
    3b6c:	80 91 a0 01 	lds	r24, 0x01A0
    3b70:	90 91 a1 01 	lds	r25, 0x01A1
    3b74:	9c 01       	movw	r18, r24
    3b76:	40 e0       	ldi	r20, 0x00	; 0
    3b78:	50 e0       	ldi	r21, 0x00	; 0
    3b7a:	80 91 c5 01 	lds	r24, 0x01C5
    3b7e:	90 91 c6 01 	lds	r25, 0x01C6
    3b82:	a0 91 c7 01 	lds	r26, 0x01C7
    3b86:	b0 91 c8 01 	lds	r27, 0x01C8
    3b8a:	28 17       	cp	r18, r24
    3b8c:	39 07       	cpc	r19, r25
    3b8e:	4a 07       	cpc	r20, r26
    3b90:	5b 07       	cpc	r21, r27
    3b92:	49 f4       	brne	.+18     	; 0x3ba6 <__vector_4+0x76>
	   {
		   TIMER2_pSetCallBack();
    3b94:	e0 91 a4 01 	lds	r30, 0x01A4
    3b98:	f0 91 a5 01 	lds	r31, 0x01A5
    3b9c:	09 95       	icall
		   Local_u8Counter=0;
    3b9e:	10 92 a1 01 	sts	0x01A1, r1
    3ba2:	10 92 a0 01 	sts	0x01A0, r1
	   }
}
    3ba6:	cf 91       	pop	r28
    3ba8:	df 91       	pop	r29
    3baa:	ff 91       	pop	r31
    3bac:	ef 91       	pop	r30
    3bae:	bf 91       	pop	r27
    3bb0:	af 91       	pop	r26
    3bb2:	9f 91       	pop	r25
    3bb4:	8f 91       	pop	r24
    3bb6:	7f 91       	pop	r23
    3bb8:	6f 91       	pop	r22
    3bba:	5f 91       	pop	r21
    3bbc:	4f 91       	pop	r20
    3bbe:	3f 91       	pop	r19
    3bc0:	2f 91       	pop	r18
    3bc2:	0f 90       	pop	r0
    3bc4:	0f be       	out	0x3f, r0	; 63
    3bc6:	0f 90       	pop	r0
    3bc8:	1f 90       	pop	r1
    3bca:	18 95       	reti

00003bcc <TIMER_voidTimer1Enable>:
*                                                               Timer 1                                                              *
**************************************************************************************************************************************/
u8 TIMER1_u8MODEPWM;
/************************************************************************************************************************************/
void TIMER_voidTimer1Enable(u8 Copy_u8Timer1Mode,u8 Copy_u8Timer1ModeChannelA,u8 Copy_u8Timer1ModeChannelB)
{
    3bcc:	df 93       	push	r29
    3bce:	cf 93       	push	r28
    3bd0:	cd b7       	in	r28, 0x3d	; 61
    3bd2:	de b7       	in	r29, 0x3e	; 62
    3bd4:	29 97       	sbiw	r28, 0x09	; 9
    3bd6:	0f b6       	in	r0, 0x3f	; 63
    3bd8:	f8 94       	cli
    3bda:	de bf       	out	0x3e, r29	; 62
    3bdc:	0f be       	out	0x3f, r0	; 63
    3bde:	cd bf       	out	0x3d, r28	; 61
    3be0:	89 83       	std	Y+1, r24	; 0x01
    3be2:	6a 83       	std	Y+2, r22	; 0x02
    3be4:	4b 83       	std	Y+3, r20	; 0x03
switch(Copy_u8Timer1Mode)
    3be6:	89 81       	ldd	r24, Y+1	; 0x01
    3be8:	28 2f       	mov	r18, r24
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	39 87       	std	Y+9, r19	; 0x09
    3bee:	28 87       	std	Y+8, r18	; 0x08
    3bf0:	88 85       	ldd	r24, Y+8	; 0x08
    3bf2:	99 85       	ldd	r25, Y+9	; 0x09
    3bf4:	87 30       	cpi	r24, 0x07	; 7
    3bf6:	91 05       	cpc	r25, r1
    3bf8:	09 f4       	brne	.+2      	; 0x3bfc <TIMER_voidTimer1Enable+0x30>
    3bfa:	6b c1       	rjmp	.+726    	; 0x3ed2 <TIMER_voidTimer1Enable+0x306>
    3bfc:	28 85       	ldd	r18, Y+8	; 0x08
    3bfe:	39 85       	ldd	r19, Y+9	; 0x09
    3c00:	28 30       	cpi	r18, 0x08	; 8
    3c02:	31 05       	cpc	r19, r1
    3c04:	4c f5       	brge	.+82     	; 0x3c58 <TIMER_voidTimer1Enable+0x8c>
    3c06:	88 85       	ldd	r24, Y+8	; 0x08
    3c08:	99 85       	ldd	r25, Y+9	; 0x09
    3c0a:	83 30       	cpi	r24, 0x03	; 3
    3c0c:	91 05       	cpc	r25, r1
    3c0e:	09 f4       	brne	.+2      	; 0x3c12 <TIMER_voidTimer1Enable+0x46>
    3c10:	c7 c0       	rjmp	.+398    	; 0x3da0 <TIMER_voidTimer1Enable+0x1d4>
    3c12:	28 85       	ldd	r18, Y+8	; 0x08
    3c14:	39 85       	ldd	r19, Y+9	; 0x09
    3c16:	24 30       	cpi	r18, 0x04	; 4
    3c18:	31 05       	cpc	r19, r1
    3c1a:	8c f4       	brge	.+34     	; 0x3c3e <TIMER_voidTimer1Enable+0x72>
    3c1c:	88 85       	ldd	r24, Y+8	; 0x08
    3c1e:	99 85       	ldd	r25, Y+9	; 0x09
    3c20:	81 30       	cpi	r24, 0x01	; 1
    3c22:	91 05       	cpc	r25, r1
    3c24:	09 f4       	brne	.+2      	; 0x3c28 <TIMER_voidTimer1Enable+0x5c>
    3c26:	7c c0       	rjmp	.+248    	; 0x3d20 <TIMER_voidTimer1Enable+0x154>
    3c28:	28 85       	ldd	r18, Y+8	; 0x08
    3c2a:	39 85       	ldd	r19, Y+9	; 0x09
    3c2c:	22 30       	cpi	r18, 0x02	; 2
    3c2e:	31 05       	cpc	r19, r1
    3c30:	0c f0       	brlt	.+2      	; 0x3c34 <TIMER_voidTimer1Enable+0x68>
    3c32:	96 c0       	rjmp	.+300    	; 0x3d60 <TIMER_voidTimer1Enable+0x194>
    3c34:	88 85       	ldd	r24, Y+8	; 0x08
    3c36:	99 85       	ldd	r25, Y+9	; 0x09
    3c38:	00 97       	sbiw	r24, 0x00	; 0
    3c3a:	c9 f1       	breq	.+114    	; 0x3cae <TIMER_voidTimer1Enable+0xe2>
    3c3c:	50 c2       	rjmp	.+1184   	; 0x40de <TIMER_voidTimer1Enable+0x512>
    3c3e:	28 85       	ldd	r18, Y+8	; 0x08
    3c40:	39 85       	ldd	r19, Y+9	; 0x09
    3c42:	25 30       	cpi	r18, 0x05	; 5
    3c44:	31 05       	cpc	r19, r1
    3c46:	09 f4       	brne	.+2      	; 0x3c4a <TIMER_voidTimer1Enable+0x7e>
    3c48:	04 c1       	rjmp	.+520    	; 0x3e52 <TIMER_voidTimer1Enable+0x286>
    3c4a:	88 85       	ldd	r24, Y+8	; 0x08
    3c4c:	99 85       	ldd	r25, Y+9	; 0x09
    3c4e:	86 30       	cpi	r24, 0x06	; 6
    3c50:	91 05       	cpc	r25, r1
    3c52:	0c f0       	brlt	.+2      	; 0x3c56 <TIMER_voidTimer1Enable+0x8a>
    3c54:	1e c1       	rjmp	.+572    	; 0x3e92 <TIMER_voidTimer1Enable+0x2c6>
    3c56:	c4 c0       	rjmp	.+392    	; 0x3de0 <TIMER_voidTimer1Enable+0x214>
    3c58:	28 85       	ldd	r18, Y+8	; 0x08
    3c5a:	39 85       	ldd	r19, Y+9	; 0x09
    3c5c:	2b 30       	cpi	r18, 0x0B	; 11
    3c5e:	31 05       	cpc	r19, r1
    3c60:	09 f4       	brne	.+2      	; 0x3c64 <TIMER_voidTimer1Enable+0x98>
    3c62:	ae c1       	rjmp	.+860    	; 0x3fc0 <TIMER_voidTimer1Enable+0x3f4>
    3c64:	88 85       	ldd	r24, Y+8	; 0x08
    3c66:	99 85       	ldd	r25, Y+9	; 0x09
    3c68:	8c 30       	cpi	r24, 0x0C	; 12
    3c6a:	91 05       	cpc	r25, r1
    3c6c:	6c f4       	brge	.+26     	; 0x3c88 <TIMER_voidTimer1Enable+0xbc>
    3c6e:	28 85       	ldd	r18, Y+8	; 0x08
    3c70:	39 85       	ldd	r19, Y+9	; 0x09
    3c72:	29 30       	cpi	r18, 0x09	; 9
    3c74:	31 05       	cpc	r19, r1
    3c76:	09 f4       	brne	.+2      	; 0x3c7a <TIMER_voidTimer1Enable+0xae>
    3c78:	69 c1       	rjmp	.+722    	; 0x3f4c <TIMER_voidTimer1Enable+0x380>
    3c7a:	88 85       	ldd	r24, Y+8	; 0x08
    3c7c:	99 85       	ldd	r25, Y+9	; 0x09
    3c7e:	8a 30       	cpi	r24, 0x0A	; 10
    3c80:	91 05       	cpc	r25, r1
    3c82:	0c f0       	brlt	.+2      	; 0x3c86 <TIMER_voidTimer1Enable+0xba>
    3c84:	80 c1       	rjmp	.+768    	; 0x3f86 <TIMER_voidTimer1Enable+0x3ba>
    3c86:	45 c1       	rjmp	.+650    	; 0x3f12 <TIMER_voidTimer1Enable+0x346>
    3c88:	28 85       	ldd	r18, Y+8	; 0x08
    3c8a:	39 85       	ldd	r19, Y+9	; 0x09
    3c8c:	2e 30       	cpi	r18, 0x0E	; 14
    3c8e:	31 05       	cpc	r19, r1
    3c90:	09 f4       	brne	.+2      	; 0x3c94 <TIMER_voidTimer1Enable+0xc8>
    3c92:	ec c1       	rjmp	.+984    	; 0x406c <TIMER_voidTimer1Enable+0x4a0>
    3c94:	88 85       	ldd	r24, Y+8	; 0x08
    3c96:	99 85       	ldd	r25, Y+9	; 0x09
    3c98:	8f 30       	cpi	r24, 0x0F	; 15
    3c9a:	91 05       	cpc	r25, r1
    3c9c:	09 f4       	brne	.+2      	; 0x3ca0 <TIMER_voidTimer1Enable+0xd4>
    3c9e:	03 c2       	rjmp	.+1030   	; 0x40a6 <TIMER_voidTimer1Enable+0x4da>
    3ca0:	28 85       	ldd	r18, Y+8	; 0x08
    3ca2:	39 85       	ldd	r19, Y+9	; 0x09
    3ca4:	2c 30       	cpi	r18, 0x0C	; 12
    3ca6:	31 05       	cpc	r19, r1
    3ca8:	09 f4       	brne	.+2      	; 0x3cac <TIMER_voidTimer1Enable+0xe0>
    3caa:	a7 c1       	rjmp	.+846    	; 0x3ffa <TIMER_voidTimer1Enable+0x42e>
    3cac:	18 c2       	rjmp	.+1072   	; 0x40de <TIMER_voidTimer1Enable+0x512>
{
   case  TIMER1_MODE_NORMAL :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3cae:	af e4       	ldi	r26, 0x4F	; 79
    3cb0:	b0 e0       	ldi	r27, 0x00	; 0
    3cb2:	ef e4       	ldi	r30, 0x4F	; 79
    3cb4:	f0 e0       	ldi	r31, 0x00	; 0
    3cb6:	80 81       	ld	r24, Z
    3cb8:	8e 7f       	andi	r24, 0xFE	; 254
    3cba:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3cbc:	af e4       	ldi	r26, 0x4F	; 79
    3cbe:	b0 e0       	ldi	r27, 0x00	; 0
    3cc0:	ef e4       	ldi	r30, 0x4F	; 79
    3cc2:	f0 e0       	ldi	r31, 0x00	; 0
    3cc4:	80 81       	ld	r24, Z
    3cc6:	8d 7f       	andi	r24, 0xFD	; 253
    3cc8:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3cca:	ae e4       	ldi	r26, 0x4E	; 78
    3ccc:	b0 e0       	ldi	r27, 0x00	; 0
    3cce:	ee e4       	ldi	r30, 0x4E	; 78
    3cd0:	f0 e0       	ldi	r31, 0x00	; 0
    3cd2:	80 81       	ld	r24, Z
    3cd4:	87 7f       	andi	r24, 0xF7	; 247
    3cd6:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3cd8:	ae e4       	ldi	r26, 0x4E	; 78
    3cda:	b0 e0       	ldi	r27, 0x00	; 0
    3cdc:	ee e4       	ldi	r30, 0x4E	; 78
    3cde:	f0 e0       	ldi	r31, 0x00	; 0
    3ce0:	80 81       	ld	r24, Z
    3ce2:	8f 7e       	andi	r24, 0xEF	; 239
    3ce4:	8c 93       	st	X, r24

		SET_BIT(TIMSK,TIMSK_TOIE1);
    3ce6:	a9 e5       	ldi	r26, 0x59	; 89
    3ce8:	b0 e0       	ldi	r27, 0x00	; 0
    3cea:	e9 e5       	ldi	r30, 0x59	; 89
    3cec:	f0 e0       	ldi	r31, 0x00	; 0
    3cee:	80 81       	ld	r24, Z
    3cf0:	84 60       	ori	r24, 0x04	; 4
    3cf2:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_OCIE1B);
    3cf4:	a9 e5       	ldi	r26, 0x59	; 89
    3cf6:	b0 e0       	ldi	r27, 0x00	; 0
    3cf8:	e9 e5       	ldi	r30, 0x59	; 89
    3cfa:	f0 e0       	ldi	r31, 0x00	; 0
    3cfc:	80 81       	ld	r24, Z
    3cfe:	87 7f       	andi	r24, 0xF7	; 247
    3d00:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_OCIE1A);
    3d02:	a9 e5       	ldi	r26, 0x59	; 89
    3d04:	b0 e0       	ldi	r27, 0x00	; 0
    3d06:	e9 e5       	ldi	r30, 0x59	; 89
    3d08:	f0 e0       	ldi	r31, 0x00	; 0
    3d0a:	80 81       	ld	r24, Z
    3d0c:	8f 7e       	andi	r24, 0xEF	; 239
    3d0e:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    3d10:	a9 e5       	ldi	r26, 0x59	; 89
    3d12:	b0 e0       	ldi	r27, 0x00	; 0
    3d14:	e9 e5       	ldi	r30, 0x59	; 89
    3d16:	f0 e0       	ldi	r31, 0x00	; 0
    3d18:	80 81       	ld	r24, Z
    3d1a:	8f 7d       	andi	r24, 0xDF	; 223
    3d1c:	8c 93       	st	X, r24
    3d1e:	df c1       	rjmp	.+958    	; 0x40de <TIMER_voidTimer1Enable+0x512>

		//TIMER_u16_TCNT1=TIMER_f32Timer1PreloodValue;
   break;
   case TIMER1_MODE_PWM_PHASE_CORRECT_8 :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    3d20:	af e4       	ldi	r26, 0x4F	; 79
    3d22:	b0 e0       	ldi	r27, 0x00	; 0
    3d24:	ef e4       	ldi	r30, 0x4F	; 79
    3d26:	f0 e0       	ldi	r31, 0x00	; 0
    3d28:	80 81       	ld	r24, Z
    3d2a:	81 60       	ori	r24, 0x01	; 1
    3d2c:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3d2e:	af e4       	ldi	r26, 0x4F	; 79
    3d30:	b0 e0       	ldi	r27, 0x00	; 0
    3d32:	ef e4       	ldi	r30, 0x4F	; 79
    3d34:	f0 e0       	ldi	r31, 0x00	; 0
    3d36:	80 81       	ld	r24, Z
    3d38:	8d 7f       	andi	r24, 0xFD	; 253
    3d3a:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3d3c:	ae e4       	ldi	r26, 0x4E	; 78
    3d3e:	b0 e0       	ldi	r27, 0x00	; 0
    3d40:	ee e4       	ldi	r30, 0x4E	; 78
    3d42:	f0 e0       	ldi	r31, 0x00	; 0
    3d44:	80 81       	ld	r24, Z
    3d46:	87 7f       	andi	r24, 0xF7	; 247
    3d48:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3d4a:	ae e4       	ldi	r26, 0x4E	; 78
    3d4c:	b0 e0       	ldi	r27, 0x00	; 0
    3d4e:	ee e4       	ldi	r30, 0x4E	; 78
    3d50:	f0 e0       	ldi	r31, 0x00	; 0
    3d52:	80 81       	ld	r24, Z
    3d54:	8f 7e       	andi	r24, 0xEF	; 239
    3d56:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_8;
    3d58:	81 e0       	ldi	r24, 0x01	; 1
    3d5a:	80 93 ac 01 	sts	0x01AC, r24
    3d5e:	bf c1       	rjmp	.+894    	; 0x40de <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_PWM_PHASE_CORRECT_9 :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3d60:	af e4       	ldi	r26, 0x4F	; 79
    3d62:	b0 e0       	ldi	r27, 0x00	; 0
    3d64:	ef e4       	ldi	r30, 0x4F	; 79
    3d66:	f0 e0       	ldi	r31, 0x00	; 0
    3d68:	80 81       	ld	r24, Z
    3d6a:	8e 7f       	andi	r24, 0xFE	; 254
    3d6c:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    3d6e:	af e4       	ldi	r26, 0x4F	; 79
    3d70:	b0 e0       	ldi	r27, 0x00	; 0
    3d72:	ef e4       	ldi	r30, 0x4F	; 79
    3d74:	f0 e0       	ldi	r31, 0x00	; 0
    3d76:	80 81       	ld	r24, Z
    3d78:	82 60       	ori	r24, 0x02	; 2
    3d7a:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3d7c:	ae e4       	ldi	r26, 0x4E	; 78
    3d7e:	b0 e0       	ldi	r27, 0x00	; 0
    3d80:	ee e4       	ldi	r30, 0x4E	; 78
    3d82:	f0 e0       	ldi	r31, 0x00	; 0
    3d84:	80 81       	ld	r24, Z
    3d86:	87 7f       	andi	r24, 0xF7	; 247
    3d88:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3d8a:	ae e4       	ldi	r26, 0x4E	; 78
    3d8c:	b0 e0       	ldi	r27, 0x00	; 0
    3d8e:	ee e4       	ldi	r30, 0x4E	; 78
    3d90:	f0 e0       	ldi	r31, 0x00	; 0
    3d92:	80 81       	ld	r24, Z
    3d94:	8f 7e       	andi	r24, 0xEF	; 239
    3d96:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_9;
    3d98:	82 e0       	ldi	r24, 0x02	; 2
    3d9a:	80 93 ac 01 	sts	0x01AC, r24
    3d9e:	9f c1       	rjmp	.+830    	; 0x40de <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_PWM_PHASE_CORRECT_10 :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    3da0:	af e4       	ldi	r26, 0x4F	; 79
    3da2:	b0 e0       	ldi	r27, 0x00	; 0
    3da4:	ef e4       	ldi	r30, 0x4F	; 79
    3da6:	f0 e0       	ldi	r31, 0x00	; 0
    3da8:	80 81       	ld	r24, Z
    3daa:	81 60       	ori	r24, 0x01	; 1
    3dac:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    3dae:	af e4       	ldi	r26, 0x4F	; 79
    3db0:	b0 e0       	ldi	r27, 0x00	; 0
    3db2:	ef e4       	ldi	r30, 0x4F	; 79
    3db4:	f0 e0       	ldi	r31, 0x00	; 0
    3db6:	80 81       	ld	r24, Z
    3db8:	82 60       	ori	r24, 0x02	; 2
    3dba:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3dbc:	ae e4       	ldi	r26, 0x4E	; 78
    3dbe:	b0 e0       	ldi	r27, 0x00	; 0
    3dc0:	ee e4       	ldi	r30, 0x4E	; 78
    3dc2:	f0 e0       	ldi	r31, 0x00	; 0
    3dc4:	80 81       	ld	r24, Z
    3dc6:	87 7f       	andi	r24, 0xF7	; 247
    3dc8:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3dca:	ae e4       	ldi	r26, 0x4E	; 78
    3dcc:	b0 e0       	ldi	r27, 0x00	; 0
    3dce:	ee e4       	ldi	r30, 0x4E	; 78
    3dd0:	f0 e0       	ldi	r31, 0x00	; 0
    3dd2:	80 81       	ld	r24, Z
    3dd4:	8f 7e       	andi	r24, 0xEF	; 239
    3dd6:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_10;
    3dd8:	83 e0       	ldi	r24, 0x03	; 3
    3dda:	80 93 ac 01 	sts	0x01AC, r24
    3dde:	7f c1       	rjmp	.+766    	; 0x40de <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_CTC_OCR1A :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3de0:	af e4       	ldi	r26, 0x4F	; 79
    3de2:	b0 e0       	ldi	r27, 0x00	; 0
    3de4:	ef e4       	ldi	r30, 0x4F	; 79
    3de6:	f0 e0       	ldi	r31, 0x00	; 0
    3de8:	80 81       	ld	r24, Z
    3dea:	8e 7f       	andi	r24, 0xFE	; 254
    3dec:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3dee:	af e4       	ldi	r26, 0x4F	; 79
    3df0:	b0 e0       	ldi	r27, 0x00	; 0
    3df2:	ef e4       	ldi	r30, 0x4F	; 79
    3df4:	f0 e0       	ldi	r31, 0x00	; 0
    3df6:	80 81       	ld	r24, Z
    3df8:	8d 7f       	andi	r24, 0xFD	; 253
    3dfa:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    3dfc:	ae e4       	ldi	r26, 0x4E	; 78
    3dfe:	b0 e0       	ldi	r27, 0x00	; 0
    3e00:	ee e4       	ldi	r30, 0x4E	; 78
    3e02:	f0 e0       	ldi	r31, 0x00	; 0
    3e04:	80 81       	ld	r24, Z
    3e06:	88 60       	ori	r24, 0x08	; 8
    3e08:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3e0a:	ae e4       	ldi	r26, 0x4E	; 78
    3e0c:	b0 e0       	ldi	r27, 0x00	; 0
    3e0e:	ee e4       	ldi	r30, 0x4E	; 78
    3e10:	f0 e0       	ldi	r31, 0x00	; 0
    3e12:	80 81       	ld	r24, Z
    3e14:	8f 7e       	andi	r24, 0xEF	; 239
    3e16:	8c 93       	st	X, r24

	   CLR_BIT(TIMSK,TIMSK_TOIE1);
    3e18:	a9 e5       	ldi	r26, 0x59	; 89
    3e1a:	b0 e0       	ldi	r27, 0x00	; 0
    3e1c:	e9 e5       	ldi	r30, 0x59	; 89
    3e1e:	f0 e0       	ldi	r31, 0x00	; 0
    3e20:	80 81       	ld	r24, Z
    3e22:	8b 7f       	andi	r24, 0xFB	; 251
    3e24:	8c 93       	st	X, r24
	   CLR_BIT(TIMSK,TIMSK_OCIE1B);
    3e26:	a9 e5       	ldi	r26, 0x59	; 89
    3e28:	b0 e0       	ldi	r27, 0x00	; 0
    3e2a:	e9 e5       	ldi	r30, 0x59	; 89
    3e2c:	f0 e0       	ldi	r31, 0x00	; 0
    3e2e:	80 81       	ld	r24, Z
    3e30:	87 7f       	andi	r24, 0xF7	; 247
    3e32:	8c 93       	st	X, r24
	   SET_BIT(TIMSK,TIMSK_OCIE1A);
    3e34:	a9 e5       	ldi	r26, 0x59	; 89
    3e36:	b0 e0       	ldi	r27, 0x00	; 0
    3e38:	e9 e5       	ldi	r30, 0x59	; 89
    3e3a:	f0 e0       	ldi	r31, 0x00	; 0
    3e3c:	80 81       	ld	r24, Z
    3e3e:	80 61       	ori	r24, 0x10	; 16
    3e40:	8c 93       	st	X, r24
	   CLR_BIT(TIMSK,TIMSK_TICIE1);
    3e42:	a9 e5       	ldi	r26, 0x59	; 89
    3e44:	b0 e0       	ldi	r27, 0x00	; 0
    3e46:	e9 e5       	ldi	r30, 0x59	; 89
    3e48:	f0 e0       	ldi	r31, 0x00	; 0
    3e4a:	80 81       	ld	r24, Z
    3e4c:	8f 7d       	andi	r24, 0xDF	; 223
    3e4e:	8c 93       	st	X, r24
    3e50:	46 c1       	rjmp	.+652    	; 0x40de <TIMER_voidTimer1Enable+0x512>

   break;
   case TIMER1_MODE_FAST_PWM_8 :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    3e52:	af e4       	ldi	r26, 0x4F	; 79
    3e54:	b0 e0       	ldi	r27, 0x00	; 0
    3e56:	ef e4       	ldi	r30, 0x4F	; 79
    3e58:	f0 e0       	ldi	r31, 0x00	; 0
    3e5a:	80 81       	ld	r24, Z
    3e5c:	81 60       	ori	r24, 0x01	; 1
    3e5e:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3e60:	af e4       	ldi	r26, 0x4F	; 79
    3e62:	b0 e0       	ldi	r27, 0x00	; 0
    3e64:	ef e4       	ldi	r30, 0x4F	; 79
    3e66:	f0 e0       	ldi	r31, 0x00	; 0
    3e68:	80 81       	ld	r24, Z
    3e6a:	8d 7f       	andi	r24, 0xFD	; 253
    3e6c:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    3e6e:	ae e4       	ldi	r26, 0x4E	; 78
    3e70:	b0 e0       	ldi	r27, 0x00	; 0
    3e72:	ee e4       	ldi	r30, 0x4E	; 78
    3e74:	f0 e0       	ldi	r31, 0x00	; 0
    3e76:	80 81       	ld	r24, Z
    3e78:	88 60       	ori	r24, 0x08	; 8
    3e7a:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3e7c:	ae e4       	ldi	r26, 0x4E	; 78
    3e7e:	b0 e0       	ldi	r27, 0x00	; 0
    3e80:	ee e4       	ldi	r30, 0x4E	; 78
    3e82:	f0 e0       	ldi	r31, 0x00	; 0
    3e84:	80 81       	ld	r24, Z
    3e86:	8f 7e       	andi	r24, 0xEF	; 239
    3e88:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_8;
    3e8a:	85 e0       	ldi	r24, 0x05	; 5
    3e8c:	80 93 ac 01 	sts	0x01AC, r24
    3e90:	26 c1       	rjmp	.+588    	; 0x40de <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_FAST_PWM_9 :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3e92:	af e4       	ldi	r26, 0x4F	; 79
    3e94:	b0 e0       	ldi	r27, 0x00	; 0
    3e96:	ef e4       	ldi	r30, 0x4F	; 79
    3e98:	f0 e0       	ldi	r31, 0x00	; 0
    3e9a:	80 81       	ld	r24, Z
    3e9c:	8e 7f       	andi	r24, 0xFE	; 254
    3e9e:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    3ea0:	af e4       	ldi	r26, 0x4F	; 79
    3ea2:	b0 e0       	ldi	r27, 0x00	; 0
    3ea4:	ef e4       	ldi	r30, 0x4F	; 79
    3ea6:	f0 e0       	ldi	r31, 0x00	; 0
    3ea8:	80 81       	ld	r24, Z
    3eaa:	82 60       	ori	r24, 0x02	; 2
    3eac:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    3eae:	ae e4       	ldi	r26, 0x4E	; 78
    3eb0:	b0 e0       	ldi	r27, 0x00	; 0
    3eb2:	ee e4       	ldi	r30, 0x4E	; 78
    3eb4:	f0 e0       	ldi	r31, 0x00	; 0
    3eb6:	80 81       	ld	r24, Z
    3eb8:	88 60       	ori	r24, 0x08	; 8
    3eba:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3ebc:	ae e4       	ldi	r26, 0x4E	; 78
    3ebe:	b0 e0       	ldi	r27, 0x00	; 0
    3ec0:	ee e4       	ldi	r30, 0x4E	; 78
    3ec2:	f0 e0       	ldi	r31, 0x00	; 0
    3ec4:	80 81       	ld	r24, Z
    3ec6:	8f 7e       	andi	r24, 0xEF	; 239
    3ec8:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_9;
    3eca:	86 e0       	ldi	r24, 0x06	; 6
    3ecc:	80 93 ac 01 	sts	0x01AC, r24
    3ed0:	06 c1       	rjmp	.+524    	; 0x40de <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_FAST_PWM_10 :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    3ed2:	af e4       	ldi	r26, 0x4F	; 79
    3ed4:	b0 e0       	ldi	r27, 0x00	; 0
    3ed6:	ef e4       	ldi	r30, 0x4F	; 79
    3ed8:	f0 e0       	ldi	r31, 0x00	; 0
    3eda:	80 81       	ld	r24, Z
    3edc:	81 60       	ori	r24, 0x01	; 1
    3ede:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    3ee0:	af e4       	ldi	r26, 0x4F	; 79
    3ee2:	b0 e0       	ldi	r27, 0x00	; 0
    3ee4:	ef e4       	ldi	r30, 0x4F	; 79
    3ee6:	f0 e0       	ldi	r31, 0x00	; 0
    3ee8:	80 81       	ld	r24, Z
    3eea:	82 60       	ori	r24, 0x02	; 2
    3eec:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    3eee:	ae e4       	ldi	r26, 0x4E	; 78
    3ef0:	b0 e0       	ldi	r27, 0x00	; 0
    3ef2:	ee e4       	ldi	r30, 0x4E	; 78
    3ef4:	f0 e0       	ldi	r31, 0x00	; 0
    3ef6:	80 81       	ld	r24, Z
    3ef8:	88 60       	ori	r24, 0x08	; 8
    3efa:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3efc:	ae e4       	ldi	r26, 0x4E	; 78
    3efe:	b0 e0       	ldi	r27, 0x00	; 0
    3f00:	ee e4       	ldi	r30, 0x4E	; 78
    3f02:	f0 e0       	ldi	r31, 0x00	; 0
    3f04:	80 81       	ld	r24, Z
    3f06:	8f 7e       	andi	r24, 0xEF	; 239
    3f08:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_10;
    3f0a:	87 e0       	ldi	r24, 0x07	; 7
    3f0c:	80 93 ac 01 	sts	0x01AC, r24
    3f10:	e6 c0       	rjmp	.+460    	; 0x40de <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_PWM_PHASE_AND_FRQUENCY_CORRECT_ICR1 :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3f12:	af e4       	ldi	r26, 0x4F	; 79
    3f14:	b0 e0       	ldi	r27, 0x00	; 0
    3f16:	ef e4       	ldi	r30, 0x4F	; 79
    3f18:	f0 e0       	ldi	r31, 0x00	; 0
    3f1a:	80 81       	ld	r24, Z
    3f1c:	8e 7f       	andi	r24, 0xFE	; 254
    3f1e:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3f20:	af e4       	ldi	r26, 0x4F	; 79
    3f22:	b0 e0       	ldi	r27, 0x00	; 0
    3f24:	ef e4       	ldi	r30, 0x4F	; 79
    3f26:	f0 e0       	ldi	r31, 0x00	; 0
    3f28:	80 81       	ld	r24, Z
    3f2a:	8d 7f       	andi	r24, 0xFD	; 253
    3f2c:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3f2e:	ae e4       	ldi	r26, 0x4E	; 78
    3f30:	b0 e0       	ldi	r27, 0x00	; 0
    3f32:	ee e4       	ldi	r30, 0x4E	; 78
    3f34:	f0 e0       	ldi	r31, 0x00	; 0
    3f36:	80 81       	ld	r24, Z
    3f38:	87 7f       	andi	r24, 0xF7	; 247
    3f3a:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    3f3c:	ae e4       	ldi	r26, 0x4E	; 78
    3f3e:	b0 e0       	ldi	r27, 0x00	; 0
    3f40:	ee e4       	ldi	r30, 0x4E	; 78
    3f42:	f0 e0       	ldi	r31, 0x00	; 0
    3f44:	80 81       	ld	r24, Z
    3f46:	80 61       	ori	r24, 0x10	; 16
    3f48:	8c 93       	st	X, r24
    3f4a:	c9 c0       	rjmp	.+402    	; 0x40de <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_PWM_PHASE_AND_FRQUENCY_CORRECT_OCR1A :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    3f4c:	af e4       	ldi	r26, 0x4F	; 79
    3f4e:	b0 e0       	ldi	r27, 0x00	; 0
    3f50:	ef e4       	ldi	r30, 0x4F	; 79
    3f52:	f0 e0       	ldi	r31, 0x00	; 0
    3f54:	80 81       	ld	r24, Z
    3f56:	81 60       	ori	r24, 0x01	; 1
    3f58:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3f5a:	af e4       	ldi	r26, 0x4F	; 79
    3f5c:	b0 e0       	ldi	r27, 0x00	; 0
    3f5e:	ef e4       	ldi	r30, 0x4F	; 79
    3f60:	f0 e0       	ldi	r31, 0x00	; 0
    3f62:	80 81       	ld	r24, Z
    3f64:	8d 7f       	andi	r24, 0xFD	; 253
    3f66:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3f68:	ae e4       	ldi	r26, 0x4E	; 78
    3f6a:	b0 e0       	ldi	r27, 0x00	; 0
    3f6c:	ee e4       	ldi	r30, 0x4E	; 78
    3f6e:	f0 e0       	ldi	r31, 0x00	; 0
    3f70:	80 81       	ld	r24, Z
    3f72:	87 7f       	andi	r24, 0xF7	; 247
    3f74:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    3f76:	ae e4       	ldi	r26, 0x4E	; 78
    3f78:	b0 e0       	ldi	r27, 0x00	; 0
    3f7a:	ee e4       	ldi	r30, 0x4E	; 78
    3f7c:	f0 e0       	ldi	r31, 0x00	; 0
    3f7e:	80 81       	ld	r24, Z
    3f80:	80 61       	ori	r24, 0x10	; 16
    3f82:	8c 93       	st	X, r24
    3f84:	ac c0       	rjmp	.+344    	; 0x40de <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_PWM_PHASE_CORRECT_ICR1 :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3f86:	af e4       	ldi	r26, 0x4F	; 79
    3f88:	b0 e0       	ldi	r27, 0x00	; 0
    3f8a:	ef e4       	ldi	r30, 0x4F	; 79
    3f8c:	f0 e0       	ldi	r31, 0x00	; 0
    3f8e:	80 81       	ld	r24, Z
    3f90:	8e 7f       	andi	r24, 0xFE	; 254
    3f92:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    3f94:	af e4       	ldi	r26, 0x4F	; 79
    3f96:	b0 e0       	ldi	r27, 0x00	; 0
    3f98:	ef e4       	ldi	r30, 0x4F	; 79
    3f9a:	f0 e0       	ldi	r31, 0x00	; 0
    3f9c:	80 81       	ld	r24, Z
    3f9e:	82 60       	ori	r24, 0x02	; 2
    3fa0:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3fa2:	ae e4       	ldi	r26, 0x4E	; 78
    3fa4:	b0 e0       	ldi	r27, 0x00	; 0
    3fa6:	ee e4       	ldi	r30, 0x4E	; 78
    3fa8:	f0 e0       	ldi	r31, 0x00	; 0
    3faa:	80 81       	ld	r24, Z
    3fac:	87 7f       	andi	r24, 0xF7	; 247
    3fae:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    3fb0:	ae e4       	ldi	r26, 0x4E	; 78
    3fb2:	b0 e0       	ldi	r27, 0x00	; 0
    3fb4:	ee e4       	ldi	r30, 0x4E	; 78
    3fb6:	f0 e0       	ldi	r31, 0x00	; 0
    3fb8:	80 81       	ld	r24, Z
    3fba:	80 61       	ori	r24, 0x10	; 16
    3fbc:	8c 93       	st	X, r24
    3fbe:	8f c0       	rjmp	.+286    	; 0x40de <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_PWM_PHASE_CORRECT_OCR1A :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    3fc0:	af e4       	ldi	r26, 0x4F	; 79
    3fc2:	b0 e0       	ldi	r27, 0x00	; 0
    3fc4:	ef e4       	ldi	r30, 0x4F	; 79
    3fc6:	f0 e0       	ldi	r31, 0x00	; 0
    3fc8:	80 81       	ld	r24, Z
    3fca:	81 60       	ori	r24, 0x01	; 1
    3fcc:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    3fce:	af e4       	ldi	r26, 0x4F	; 79
    3fd0:	b0 e0       	ldi	r27, 0x00	; 0
    3fd2:	ef e4       	ldi	r30, 0x4F	; 79
    3fd4:	f0 e0       	ldi	r31, 0x00	; 0
    3fd6:	80 81       	ld	r24, Z
    3fd8:	82 60       	ori	r24, 0x02	; 2
    3fda:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3fdc:	ae e4       	ldi	r26, 0x4E	; 78
    3fde:	b0 e0       	ldi	r27, 0x00	; 0
    3fe0:	ee e4       	ldi	r30, 0x4E	; 78
    3fe2:	f0 e0       	ldi	r31, 0x00	; 0
    3fe4:	80 81       	ld	r24, Z
    3fe6:	87 7f       	andi	r24, 0xF7	; 247
    3fe8:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    3fea:	ae e4       	ldi	r26, 0x4E	; 78
    3fec:	b0 e0       	ldi	r27, 0x00	; 0
    3fee:	ee e4       	ldi	r30, 0x4E	; 78
    3ff0:	f0 e0       	ldi	r31, 0x00	; 0
    3ff2:	80 81       	ld	r24, Z
    3ff4:	80 61       	ori	r24, 0x10	; 16
    3ff6:	8c 93       	st	X, r24
    3ff8:	72 c0       	rjmp	.+228    	; 0x40de <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_CTC_ICR1 :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3ffa:	af e4       	ldi	r26, 0x4F	; 79
    3ffc:	b0 e0       	ldi	r27, 0x00	; 0
    3ffe:	ef e4       	ldi	r30, 0x4F	; 79
    4000:	f0 e0       	ldi	r31, 0x00	; 0
    4002:	80 81       	ld	r24, Z
    4004:	8e 7f       	andi	r24, 0xFE	; 254
    4006:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    4008:	af e4       	ldi	r26, 0x4F	; 79
    400a:	b0 e0       	ldi	r27, 0x00	; 0
    400c:	ef e4       	ldi	r30, 0x4F	; 79
    400e:	f0 e0       	ldi	r31, 0x00	; 0
    4010:	80 81       	ld	r24, Z
    4012:	82 60       	ori	r24, 0x02	; 2
    4014:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    4016:	ae e4       	ldi	r26, 0x4E	; 78
    4018:	b0 e0       	ldi	r27, 0x00	; 0
    401a:	ee e4       	ldi	r30, 0x4E	; 78
    401c:	f0 e0       	ldi	r31, 0x00	; 0
    401e:	80 81       	ld	r24, Z
    4020:	88 60       	ori	r24, 0x08	; 8
    4022:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    4024:	ae e4       	ldi	r26, 0x4E	; 78
    4026:	b0 e0       	ldi	r27, 0x00	; 0
    4028:	ee e4       	ldi	r30, 0x4E	; 78
    402a:	f0 e0       	ldi	r31, 0x00	; 0
    402c:	80 81       	ld	r24, Z
    402e:	8f 7e       	andi	r24, 0xEF	; 239
    4030:	8c 93       	st	X, r24

	   CLR_BIT(TIMSK,TIMSK_TOIE1);
    4032:	a9 e5       	ldi	r26, 0x59	; 89
    4034:	b0 e0       	ldi	r27, 0x00	; 0
    4036:	e9 e5       	ldi	r30, 0x59	; 89
    4038:	f0 e0       	ldi	r31, 0x00	; 0
    403a:	80 81       	ld	r24, Z
    403c:	8b 7f       	andi	r24, 0xFB	; 251
    403e:	8c 93       	st	X, r24
	   SET_BIT(TIMSK,TIMSK_OCIE1B);
    4040:	a9 e5       	ldi	r26, 0x59	; 89
    4042:	b0 e0       	ldi	r27, 0x00	; 0
    4044:	e9 e5       	ldi	r30, 0x59	; 89
    4046:	f0 e0       	ldi	r31, 0x00	; 0
    4048:	80 81       	ld	r24, Z
    404a:	88 60       	ori	r24, 0x08	; 8
    404c:	8c 93       	st	X, r24
	   SET_BIT(TIMSK,TIMSK_OCIE1A);
    404e:	a9 e5       	ldi	r26, 0x59	; 89
    4050:	b0 e0       	ldi	r27, 0x00	; 0
    4052:	e9 e5       	ldi	r30, 0x59	; 89
    4054:	f0 e0       	ldi	r31, 0x00	; 0
    4056:	80 81       	ld	r24, Z
    4058:	80 61       	ori	r24, 0x10	; 16
    405a:	8c 93       	st	X, r24
	   CLR_BIT(TIMSK,TIMSK_TICIE1);
    405c:	a9 e5       	ldi	r26, 0x59	; 89
    405e:	b0 e0       	ldi	r27, 0x00	; 0
    4060:	e9 e5       	ldi	r30, 0x59	; 89
    4062:	f0 e0       	ldi	r31, 0x00	; 0
    4064:	80 81       	ld	r24, Z
    4066:	8f 7d       	andi	r24, 0xDF	; 223
    4068:	8c 93       	st	X, r24
    406a:	39 c0       	rjmp	.+114    	; 0x40de <TIMER_voidTimer1Enable+0x512>

   break;
   case  TIMER1_MODE_FAST_PWM_ICR1 :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    406c:	af e4       	ldi	r26, 0x4F	; 79
    406e:	b0 e0       	ldi	r27, 0x00	; 0
    4070:	ef e4       	ldi	r30, 0x4F	; 79
    4072:	f0 e0       	ldi	r31, 0x00	; 0
    4074:	80 81       	ld	r24, Z
    4076:	8e 7f       	andi	r24, 0xFE	; 254
    4078:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    407a:	af e4       	ldi	r26, 0x4F	; 79
    407c:	b0 e0       	ldi	r27, 0x00	; 0
    407e:	ef e4       	ldi	r30, 0x4F	; 79
    4080:	f0 e0       	ldi	r31, 0x00	; 0
    4082:	80 81       	ld	r24, Z
    4084:	82 60       	ori	r24, 0x02	; 2
    4086:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    4088:	ae e4       	ldi	r26, 0x4E	; 78
    408a:	b0 e0       	ldi	r27, 0x00	; 0
    408c:	ee e4       	ldi	r30, 0x4E	; 78
    408e:	f0 e0       	ldi	r31, 0x00	; 0
    4090:	80 81       	ld	r24, Z
    4092:	88 60       	ori	r24, 0x08	; 8
    4094:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    4096:	ae e4       	ldi	r26, 0x4E	; 78
    4098:	b0 e0       	ldi	r27, 0x00	; 0
    409a:	ee e4       	ldi	r30, 0x4E	; 78
    409c:	f0 e0       	ldi	r31, 0x00	; 0
    409e:	80 81       	ld	r24, Z
    40a0:	80 61       	ori	r24, 0x10	; 16
    40a2:	8c 93       	st	X, r24
    40a4:	1c c0       	rjmp	.+56     	; 0x40de <TIMER_voidTimer1Enable+0x512>
   break;
   case  TIMER1_MODE_FAST_PWM_OCR1A :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    40a6:	af e4       	ldi	r26, 0x4F	; 79
    40a8:	b0 e0       	ldi	r27, 0x00	; 0
    40aa:	ef e4       	ldi	r30, 0x4F	; 79
    40ac:	f0 e0       	ldi	r31, 0x00	; 0
    40ae:	80 81       	ld	r24, Z
    40b0:	81 60       	ori	r24, 0x01	; 1
    40b2:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    40b4:	af e4       	ldi	r26, 0x4F	; 79
    40b6:	b0 e0       	ldi	r27, 0x00	; 0
    40b8:	ef e4       	ldi	r30, 0x4F	; 79
    40ba:	f0 e0       	ldi	r31, 0x00	; 0
    40bc:	80 81       	ld	r24, Z
    40be:	82 60       	ori	r24, 0x02	; 2
    40c0:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    40c2:	ae e4       	ldi	r26, 0x4E	; 78
    40c4:	b0 e0       	ldi	r27, 0x00	; 0
    40c6:	ee e4       	ldi	r30, 0x4E	; 78
    40c8:	f0 e0       	ldi	r31, 0x00	; 0
    40ca:	80 81       	ld	r24, Z
    40cc:	88 60       	ori	r24, 0x08	; 8
    40ce:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    40d0:	ae e4       	ldi	r26, 0x4E	; 78
    40d2:	b0 e0       	ldi	r27, 0x00	; 0
    40d4:	ee e4       	ldi	r30, 0x4E	; 78
    40d6:	f0 e0       	ldi	r31, 0x00	; 0
    40d8:	80 81       	ld	r24, Z
    40da:	80 61       	ori	r24, 0x10	; 16
    40dc:	8c 93       	st	X, r24
   break;
}
/***********************************************************************************************************/
switch(Copy_u8Timer1ModeChannelA)
    40de:	8a 81       	ldd	r24, Y+2	; 0x02
    40e0:	28 2f       	mov	r18, r24
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	3f 83       	std	Y+7, r19	; 0x07
    40e6:	2e 83       	std	Y+6, r18	; 0x06
    40e8:	8e 81       	ldd	r24, Y+6	; 0x06
    40ea:	9f 81       	ldd	r25, Y+7	; 0x07
    40ec:	81 30       	cpi	r24, 0x01	; 1
    40ee:	91 05       	cpc	r25, r1
    40f0:	21 f1       	breq	.+72     	; 0x413a <TIMER_voidTimer1Enable+0x56e>
    40f2:	2e 81       	ldd	r18, Y+6	; 0x06
    40f4:	3f 81       	ldd	r19, Y+7	; 0x07
    40f6:	22 30       	cpi	r18, 0x02	; 2
    40f8:	31 05       	cpc	r19, r1
    40fa:	2c f4       	brge	.+10     	; 0x4106 <TIMER_voidTimer1Enable+0x53a>
    40fc:	8e 81       	ldd	r24, Y+6	; 0x06
    40fe:	9f 81       	ldd	r25, Y+7	; 0x07
    4100:	00 97       	sbiw	r24, 0x00	; 0
    4102:	61 f0       	breq	.+24     	; 0x411c <TIMER_voidTimer1Enable+0x550>
    4104:	46 c0       	rjmp	.+140    	; 0x4192 <TIMER_voidTimer1Enable+0x5c6>
    4106:	2e 81       	ldd	r18, Y+6	; 0x06
    4108:	3f 81       	ldd	r19, Y+7	; 0x07
    410a:	22 30       	cpi	r18, 0x02	; 2
    410c:	31 05       	cpc	r19, r1
    410e:	21 f1       	breq	.+72     	; 0x4158 <TIMER_voidTimer1Enable+0x58c>
    4110:	8e 81       	ldd	r24, Y+6	; 0x06
    4112:	9f 81       	ldd	r25, Y+7	; 0x07
    4114:	83 30       	cpi	r24, 0x03	; 3
    4116:	91 05       	cpc	r25, r1
    4118:	71 f1       	breq	.+92     	; 0x4176 <TIMER_voidTimer1Enable+0x5aa>
    411a:	3b c0       	rjmp	.+118    	; 0x4192 <TIMER_voidTimer1Enable+0x5c6>
{
    case   TIMER1_MODE_CHANNEL_A_NORMAL :
       CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    411c:	af e4       	ldi	r26, 0x4F	; 79
    411e:	b0 e0       	ldi	r27, 0x00	; 0
    4120:	ef e4       	ldi	r30, 0x4F	; 79
    4122:	f0 e0       	ldi	r31, 0x00	; 0
    4124:	80 81       	ld	r24, Z
    4126:	8f 7b       	andi	r24, 0xBF	; 191
    4128:	8c 93       	st	X, r24
       CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    412a:	af e4       	ldi	r26, 0x4F	; 79
    412c:	b0 e0       	ldi	r27, 0x00	; 0
    412e:	ef e4       	ldi	r30, 0x4F	; 79
    4130:	f0 e0       	ldi	r31, 0x00	; 0
    4132:	80 81       	ld	r24, Z
    4134:	8f 77       	andi	r24, 0x7F	; 127
    4136:	8c 93       	st	X, r24
    4138:	2c c0       	rjmp	.+88     	; 0x4192 <TIMER_voidTimer1Enable+0x5c6>
    break;
    case   TIMER1_MODE_CHANNEL_A_TOGGLE :
       SET_BIT(TCCR1A,TCCR1A_COM1A0);
    413a:	af e4       	ldi	r26, 0x4F	; 79
    413c:	b0 e0       	ldi	r27, 0x00	; 0
    413e:	ef e4       	ldi	r30, 0x4F	; 79
    4140:	f0 e0       	ldi	r31, 0x00	; 0
    4142:	80 81       	ld	r24, Z
    4144:	80 64       	ori	r24, 0x40	; 64
    4146:	8c 93       	st	X, r24
       CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    4148:	af e4       	ldi	r26, 0x4F	; 79
    414a:	b0 e0       	ldi	r27, 0x00	; 0
    414c:	ef e4       	ldi	r30, 0x4F	; 79
    414e:	f0 e0       	ldi	r31, 0x00	; 0
    4150:	80 81       	ld	r24, Z
    4152:	8f 77       	andi	r24, 0x7F	; 127
    4154:	8c 93       	st	X, r24
    4156:	1d c0       	rjmp	.+58     	; 0x4192 <TIMER_voidTimer1Enable+0x5c6>
    break;
    case   TIMER1_MODE_CHANNEL_A_CLEAR_OC1A :
       CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    4158:	af e4       	ldi	r26, 0x4F	; 79
    415a:	b0 e0       	ldi	r27, 0x00	; 0
    415c:	ef e4       	ldi	r30, 0x4F	; 79
    415e:	f0 e0       	ldi	r31, 0x00	; 0
    4160:	80 81       	ld	r24, Z
    4162:	8f 7b       	andi	r24, 0xBF	; 191
    4164:	8c 93       	st	X, r24
       SET_BIT(TCCR1A,TCCR1A_COM1A1);
    4166:	af e4       	ldi	r26, 0x4F	; 79
    4168:	b0 e0       	ldi	r27, 0x00	; 0
    416a:	ef e4       	ldi	r30, 0x4F	; 79
    416c:	f0 e0       	ldi	r31, 0x00	; 0
    416e:	80 81       	ld	r24, Z
    4170:	80 68       	ori	r24, 0x80	; 128
    4172:	8c 93       	st	X, r24
    4174:	0e c0       	rjmp	.+28     	; 0x4192 <TIMER_voidTimer1Enable+0x5c6>
    break;
    case   TIMER1_MODE_CHANNEL_A_SET_OC1A :
       SET_BIT(TCCR1A,TCCR1A_COM1A0);
    4176:	af e4       	ldi	r26, 0x4F	; 79
    4178:	b0 e0       	ldi	r27, 0x00	; 0
    417a:	ef e4       	ldi	r30, 0x4F	; 79
    417c:	f0 e0       	ldi	r31, 0x00	; 0
    417e:	80 81       	ld	r24, Z
    4180:	80 64       	ori	r24, 0x40	; 64
    4182:	8c 93       	st	X, r24
       SET_BIT(TCCR1A,TCCR1A_COM1A1);
    4184:	af e4       	ldi	r26, 0x4F	; 79
    4186:	b0 e0       	ldi	r27, 0x00	; 0
    4188:	ef e4       	ldi	r30, 0x4F	; 79
    418a:	f0 e0       	ldi	r31, 0x00	; 0
    418c:	80 81       	ld	r24, Z
    418e:	80 68       	ori	r24, 0x80	; 128
    4190:	8c 93       	st	X, r24
    break;
}
/***********************************************************************************************************/
switch(Copy_u8Timer1ModeChannelB)
    4192:	8b 81       	ldd	r24, Y+3	; 0x03
    4194:	28 2f       	mov	r18, r24
    4196:	30 e0       	ldi	r19, 0x00	; 0
    4198:	3d 83       	std	Y+5, r19	; 0x05
    419a:	2c 83       	std	Y+4, r18	; 0x04
    419c:	8c 81       	ldd	r24, Y+4	; 0x04
    419e:	9d 81       	ldd	r25, Y+5	; 0x05
    41a0:	81 30       	cpi	r24, 0x01	; 1
    41a2:	91 05       	cpc	r25, r1
    41a4:	21 f1       	breq	.+72     	; 0x41ee <TIMER_voidTimer1Enable+0x622>
    41a6:	2c 81       	ldd	r18, Y+4	; 0x04
    41a8:	3d 81       	ldd	r19, Y+5	; 0x05
    41aa:	22 30       	cpi	r18, 0x02	; 2
    41ac:	31 05       	cpc	r19, r1
    41ae:	2c f4       	brge	.+10     	; 0x41ba <TIMER_voidTimer1Enable+0x5ee>
    41b0:	8c 81       	ldd	r24, Y+4	; 0x04
    41b2:	9d 81       	ldd	r25, Y+5	; 0x05
    41b4:	00 97       	sbiw	r24, 0x00	; 0
    41b6:	61 f0       	breq	.+24     	; 0x41d0 <TIMER_voidTimer1Enable+0x604>
    41b8:	46 c0       	rjmp	.+140    	; 0x4246 <TIMER_voidTimer1Enable+0x67a>
    41ba:	2c 81       	ldd	r18, Y+4	; 0x04
    41bc:	3d 81       	ldd	r19, Y+5	; 0x05
    41be:	22 30       	cpi	r18, 0x02	; 2
    41c0:	31 05       	cpc	r19, r1
    41c2:	21 f1       	breq	.+72     	; 0x420c <TIMER_voidTimer1Enable+0x640>
    41c4:	8c 81       	ldd	r24, Y+4	; 0x04
    41c6:	9d 81       	ldd	r25, Y+5	; 0x05
    41c8:	83 30       	cpi	r24, 0x03	; 3
    41ca:	91 05       	cpc	r25, r1
    41cc:	71 f1       	breq	.+92     	; 0x422a <TIMER_voidTimer1Enable+0x65e>
    41ce:	3b c0       	rjmp	.+118    	; 0x4246 <TIMER_voidTimer1Enable+0x67a>
{
    case  TIMER1_MODE_CHANNEL_B_NORMAL :
       CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    41d0:	af e4       	ldi	r26, 0x4F	; 79
    41d2:	b0 e0       	ldi	r27, 0x00	; 0
    41d4:	ef e4       	ldi	r30, 0x4F	; 79
    41d6:	f0 e0       	ldi	r31, 0x00	; 0
    41d8:	80 81       	ld	r24, Z
    41da:	8f 7e       	andi	r24, 0xEF	; 239
    41dc:	8c 93       	st	X, r24
       CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    41de:	af e4       	ldi	r26, 0x4F	; 79
    41e0:	b0 e0       	ldi	r27, 0x00	; 0
    41e2:	ef e4       	ldi	r30, 0x4F	; 79
    41e4:	f0 e0       	ldi	r31, 0x00	; 0
    41e6:	80 81       	ld	r24, Z
    41e8:	8f 7d       	andi	r24, 0xDF	; 223
    41ea:	8c 93       	st	X, r24
    41ec:	2c c0       	rjmp	.+88     	; 0x4246 <TIMER_voidTimer1Enable+0x67a>
    break;
    case    TIMER1_MODE_CHANNEL_B_TOGGLE :
       SET_BIT(TCCR1A,TCCR1A_COM1B0);
    41ee:	af e4       	ldi	r26, 0x4F	; 79
    41f0:	b0 e0       	ldi	r27, 0x00	; 0
    41f2:	ef e4       	ldi	r30, 0x4F	; 79
    41f4:	f0 e0       	ldi	r31, 0x00	; 0
    41f6:	80 81       	ld	r24, Z
    41f8:	80 61       	ori	r24, 0x10	; 16
    41fa:	8c 93       	st	X, r24
       CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    41fc:	af e4       	ldi	r26, 0x4F	; 79
    41fe:	b0 e0       	ldi	r27, 0x00	; 0
    4200:	ef e4       	ldi	r30, 0x4F	; 79
    4202:	f0 e0       	ldi	r31, 0x00	; 0
    4204:	80 81       	ld	r24, Z
    4206:	8f 7d       	andi	r24, 0xDF	; 223
    4208:	8c 93       	st	X, r24
    420a:	1d c0       	rjmp	.+58     	; 0x4246 <TIMER_voidTimer1Enable+0x67a>
    break;
    case    TIMER1_MODE_CHANNEL_B_CLEAR_OC1B :
       CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    420c:	af e4       	ldi	r26, 0x4F	; 79
    420e:	b0 e0       	ldi	r27, 0x00	; 0
    4210:	ef e4       	ldi	r30, 0x4F	; 79
    4212:	f0 e0       	ldi	r31, 0x00	; 0
    4214:	80 81       	ld	r24, Z
    4216:	8f 7e       	andi	r24, 0xEF	; 239
    4218:	8c 93       	st	X, r24
       SET_BIT(TCCR1A,TCCR1A_COM1B1);
    421a:	af e4       	ldi	r26, 0x4F	; 79
    421c:	b0 e0       	ldi	r27, 0x00	; 0
    421e:	ef e4       	ldi	r30, 0x4F	; 79
    4220:	f0 e0       	ldi	r31, 0x00	; 0
    4222:	80 81       	ld	r24, Z
    4224:	80 62       	ori	r24, 0x20	; 32
    4226:	8c 93       	st	X, r24
    4228:	0e c0       	rjmp	.+28     	; 0x4246 <TIMER_voidTimer1Enable+0x67a>
    break;
    case    TIMER1_MODE_CHANNEL_B_SET_OC1B :
       SET_BIT(TCCR1A,TCCR1A_COM1B0);
    422a:	af e4       	ldi	r26, 0x4F	; 79
    422c:	b0 e0       	ldi	r27, 0x00	; 0
    422e:	ef e4       	ldi	r30, 0x4F	; 79
    4230:	f0 e0       	ldi	r31, 0x00	; 0
    4232:	80 81       	ld	r24, Z
    4234:	80 61       	ori	r24, 0x10	; 16
    4236:	8c 93       	st	X, r24
       SET_BIT(TCCR1A,TCCR1A_COM1B1);
    4238:	af e4       	ldi	r26, 0x4F	; 79
    423a:	b0 e0       	ldi	r27, 0x00	; 0
    423c:	ef e4       	ldi	r30, 0x4F	; 79
    423e:	f0 e0       	ldi	r31, 0x00	; 0
    4240:	80 81       	ld	r24, Z
    4242:	80 62       	ori	r24, 0x20	; 32
    4244:	8c 93       	st	X, r24
  #elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_NO_PRESCALING
      SET_BIT(TCCR1B,TCCR1B_CS10);
      CLR_BIT(TCCR1B,TCCR1B_CS11);
      CLR_BIT(TCCR1B,TCCR1B_CS12);
  #elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_CLK_DIV_8
      CLR_BIT(TCCR1B,TCCR1B_CS10);
    4246:	ae e4       	ldi	r26, 0x4E	; 78
    4248:	b0 e0       	ldi	r27, 0x00	; 0
    424a:	ee e4       	ldi	r30, 0x4E	; 78
    424c:	f0 e0       	ldi	r31, 0x00	; 0
    424e:	80 81       	ld	r24, Z
    4250:	8e 7f       	andi	r24, 0xFE	; 254
    4252:	8c 93       	st	X, r24
      SET_BIT(TCCR1B,TCCR1B_CS11);
    4254:	ae e4       	ldi	r26, 0x4E	; 78
    4256:	b0 e0       	ldi	r27, 0x00	; 0
    4258:	ee e4       	ldi	r30, 0x4E	; 78
    425a:	f0 e0       	ldi	r31, 0x00	; 0
    425c:	80 81       	ld	r24, Z
    425e:	82 60       	ori	r24, 0x02	; 2
    4260:	8c 93       	st	X, r24
      CLR_BIT(TCCR1B,TCCR1B_CS12);
    4262:	ae e4       	ldi	r26, 0x4E	; 78
    4264:	b0 e0       	ldi	r27, 0x00	; 0
    4266:	ee e4       	ldi	r30, 0x4E	; 78
    4268:	f0 e0       	ldi	r31, 0x00	; 0
    426a:	80 81       	ld	r24, Z
    426c:	8b 7f       	andi	r24, 0xFB	; 251
    426e:	8c 93       	st	X, r24
  #elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_EXIT_CLK_T0_RISING
      SET_BIT(TCCR1B,TCCR1B_CS10);
      SET_BIT(TCCR1B,TCCR1B_CS11);
      SET_BIT(TCCR1B,TCCR1B_CS12);
  #endif
}
    4270:	29 96       	adiw	r28, 0x09	; 9
    4272:	0f b6       	in	r0, 0x3f	; 63
    4274:	f8 94       	cli
    4276:	de bf       	out	0x3e, r29	; 62
    4278:	0f be       	out	0x3f, r0	; 63
    427a:	cd bf       	out	0x3d, r28	; 61
    427c:	cf 91       	pop	r28
    427e:	df 91       	pop	r29
    4280:	08 95       	ret

00004282 <TIMER_voidTimer1GeneratePWMOCR1A>:
/*******************************************************************************************************/
void TIMER_voidTimer1GeneratePWMOCR1A(u8 Copy_u8Intensity)
{
    4282:	df 93       	push	r29
    4284:	cf 93       	push	r28
    4286:	00 d0       	rcall	.+0      	; 0x4288 <TIMER_voidTimer1GeneratePWMOCR1A+0x6>
    4288:	00 d0       	rcall	.+0      	; 0x428a <TIMER_voidTimer1GeneratePWMOCR1A+0x8>
    428a:	0f 92       	push	r0
    428c:	cd b7       	in	r28, 0x3d	; 61
    428e:	de b7       	in	r29, 0x3e	; 62
    4290:	8b 83       	std	Y+3, r24	; 0x03
	u16 Copy_u16OCR1AValue;
	switch(TIMER1_u8MODEPWM)
    4292:	80 91 ac 01 	lds	r24, 0x01AC
    4296:	28 2f       	mov	r18, r24
    4298:	30 e0       	ldi	r19, 0x00	; 0
    429a:	3d 83       	std	Y+5, r19	; 0x05
    429c:	2c 83       	std	Y+4, r18	; 0x04
    429e:	4c 81       	ldd	r20, Y+4	; 0x04
    42a0:	5d 81       	ldd	r21, Y+5	; 0x05
    42a2:	43 30       	cpi	r20, 0x03	; 3
    42a4:	51 05       	cpc	r21, r1
    42a6:	09 f4       	brne	.+2      	; 0x42aa <TIMER_voidTimer1GeneratePWMOCR1A+0x28>
    42a8:	5b c0       	rjmp	.+182    	; 0x4360 <TIMER_voidTimer1GeneratePWMOCR1A+0xde>
    42aa:	8c 81       	ldd	r24, Y+4	; 0x04
    42ac:	9d 81       	ldd	r25, Y+5	; 0x05
    42ae:	84 30       	cpi	r24, 0x04	; 4
    42b0:	91 05       	cpc	r25, r1
    42b2:	5c f4       	brge	.+22     	; 0x42ca <TIMER_voidTimer1GeneratePWMOCR1A+0x48>
    42b4:	2c 81       	ldd	r18, Y+4	; 0x04
    42b6:	3d 81       	ldd	r19, Y+5	; 0x05
    42b8:	21 30       	cpi	r18, 0x01	; 1
    42ba:	31 05       	cpc	r19, r1
    42bc:	c9 f0       	breq	.+50     	; 0x42f0 <TIMER_voidTimer1GeneratePWMOCR1A+0x6e>
    42be:	4c 81       	ldd	r20, Y+4	; 0x04
    42c0:	5d 81       	ldd	r21, Y+5	; 0x05
    42c2:	42 30       	cpi	r20, 0x02	; 2
    42c4:	51 05       	cpc	r21, r1
    42c6:	81 f1       	breq	.+96     	; 0x4328 <TIMER_voidTimer1GeneratePWMOCR1A+0xa6>
    42c8:	ab c0       	rjmp	.+342    	; 0x4420 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
    42ca:	8c 81       	ldd	r24, Y+4	; 0x04
    42cc:	9d 81       	ldd	r25, Y+5	; 0x05
    42ce:	86 30       	cpi	r24, 0x06	; 6
    42d0:	91 05       	cpc	r25, r1
    42d2:	09 f4       	brne	.+2      	; 0x42d6 <TIMER_voidTimer1GeneratePWMOCR1A+0x54>
    42d4:	75 c0       	rjmp	.+234    	; 0x43c0 <TIMER_voidTimer1GeneratePWMOCR1A+0x13e>
    42d6:	2c 81       	ldd	r18, Y+4	; 0x04
    42d8:	3d 81       	ldd	r19, Y+5	; 0x05
    42da:	27 30       	cpi	r18, 0x07	; 7
    42dc:	31 05       	cpc	r19, r1
    42de:	09 f4       	brne	.+2      	; 0x42e2 <TIMER_voidTimer1GeneratePWMOCR1A+0x60>
    42e0:	84 c0       	rjmp	.+264    	; 0x43ea <TIMER_voidTimer1GeneratePWMOCR1A+0x168>
    42e2:	4c 81       	ldd	r20, Y+4	; 0x04
    42e4:	5d 81       	ldd	r21, Y+5	; 0x05
    42e6:	45 30       	cpi	r20, 0x05	; 5
    42e8:	51 05       	cpc	r21, r1
    42ea:	09 f4       	brne	.+2      	; 0x42ee <TIMER_voidTimer1GeneratePWMOCR1A+0x6c>
    42ec:	55 c0       	rjmp	.+170    	; 0x4398 <TIMER_voidTimer1GeneratePWMOCR1A+0x116>
    42ee:	98 c0       	rjmp	.+304    	; 0x4420 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	{
	   case TIMER1_MODE_PWM_PHASE_CORRECT_8 :
	        Copy_u16OCR1AValue=((u16)510*Copy_u8Intensity/100);
    42f0:	8b 81       	ldd	r24, Y+3	; 0x03
    42f2:	28 2f       	mov	r18, r24
    42f4:	30 e0       	ldi	r19, 0x00	; 0
    42f6:	8e ef       	ldi	r24, 0xFE	; 254
    42f8:	91 e0       	ldi	r25, 0x01	; 1
    42fa:	ac 01       	movw	r20, r24
    42fc:	24 9f       	mul	r18, r20
    42fe:	c0 01       	movw	r24, r0
    4300:	25 9f       	mul	r18, r21
    4302:	90 0d       	add	r25, r0
    4304:	34 9f       	mul	r19, r20
    4306:	90 0d       	add	r25, r0
    4308:	11 24       	eor	r1, r1
    430a:	24 e6       	ldi	r18, 0x64	; 100
    430c:	30 e0       	ldi	r19, 0x00	; 0
    430e:	b9 01       	movw	r22, r18
    4310:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <__udivmodhi4>
    4314:	cb 01       	movw	r24, r22
    4316:	9a 83       	std	Y+2, r25	; 0x02
    4318:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    431a:	ea e4       	ldi	r30, 0x4A	; 74
    431c:	f0 e0       	ldi	r31, 0x00	; 0
    431e:	89 81       	ldd	r24, Y+1	; 0x01
    4320:	9a 81       	ldd	r25, Y+2	; 0x02
    4322:	91 83       	std	Z+1, r25	; 0x01
    4324:	80 83       	st	Z, r24
    4326:	7c c0       	rjmp	.+248    	; 0x4420 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;
	   case TIMER1_MODE_PWM_PHASE_CORRECT_9 :
	        Copy_u16OCR1AValue=((u16)1022*Copy_u8Intensity/100);
    4328:	8b 81       	ldd	r24, Y+3	; 0x03
    432a:	28 2f       	mov	r18, r24
    432c:	30 e0       	ldi	r19, 0x00	; 0
    432e:	8e ef       	ldi	r24, 0xFE	; 254
    4330:	93 e0       	ldi	r25, 0x03	; 3
    4332:	ac 01       	movw	r20, r24
    4334:	24 9f       	mul	r18, r20
    4336:	c0 01       	movw	r24, r0
    4338:	25 9f       	mul	r18, r21
    433a:	90 0d       	add	r25, r0
    433c:	34 9f       	mul	r19, r20
    433e:	90 0d       	add	r25, r0
    4340:	11 24       	eor	r1, r1
    4342:	24 e6       	ldi	r18, 0x64	; 100
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	b9 01       	movw	r22, r18
    4348:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <__udivmodhi4>
    434c:	cb 01       	movw	r24, r22
    434e:	9a 83       	std	Y+2, r25	; 0x02
    4350:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    4352:	ea e4       	ldi	r30, 0x4A	; 74
    4354:	f0 e0       	ldi	r31, 0x00	; 0
    4356:	89 81       	ldd	r24, Y+1	; 0x01
    4358:	9a 81       	ldd	r25, Y+2	; 0x02
    435a:	91 83       	std	Z+1, r25	; 0x01
    435c:	80 83       	st	Z, r24
    435e:	60 c0       	rjmp	.+192    	; 0x4420 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;
	   case TIMER1_MODE_PWM_PHASE_CORRECT_10 :
	        Copy_u16OCR1AValue=((u16)2046*Copy_u8Intensity/100);
    4360:	8b 81       	ldd	r24, Y+3	; 0x03
    4362:	28 2f       	mov	r18, r24
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	8e ef       	ldi	r24, 0xFE	; 254
    4368:	97 e0       	ldi	r25, 0x07	; 7
    436a:	ac 01       	movw	r20, r24
    436c:	24 9f       	mul	r18, r20
    436e:	c0 01       	movw	r24, r0
    4370:	25 9f       	mul	r18, r21
    4372:	90 0d       	add	r25, r0
    4374:	34 9f       	mul	r19, r20
    4376:	90 0d       	add	r25, r0
    4378:	11 24       	eor	r1, r1
    437a:	24 e6       	ldi	r18, 0x64	; 100
    437c:	30 e0       	ldi	r19, 0x00	; 0
    437e:	b9 01       	movw	r22, r18
    4380:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <__udivmodhi4>
    4384:	cb 01       	movw	r24, r22
    4386:	9a 83       	std	Y+2, r25	; 0x02
    4388:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    438a:	ea e4       	ldi	r30, 0x4A	; 74
    438c:	f0 e0       	ldi	r31, 0x00	; 0
    438e:	89 81       	ldd	r24, Y+1	; 0x01
    4390:	9a 81       	ldd	r25, Y+2	; 0x02
    4392:	91 83       	std	Z+1, r25	; 0x01
    4394:	80 83       	st	Z, r24
    4396:	44 c0       	rjmp	.+136    	; 0x4420 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;

	   case TIMER1_MODE_FAST_PWM_8 :
	        Copy_u16OCR1AValue=(256*Copy_u8Intensity/100);
    4398:	8b 81       	ldd	r24, Y+3	; 0x03
    439a:	88 2f       	mov	r24, r24
    439c:	90 e0       	ldi	r25, 0x00	; 0
    439e:	98 2f       	mov	r25, r24
    43a0:	88 27       	eor	r24, r24
    43a2:	24 e6       	ldi	r18, 0x64	; 100
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	b9 01       	movw	r22, r18
    43a8:	0e 94 13 2b 	call	0x5626	; 0x5626 <__divmodhi4>
    43ac:	cb 01       	movw	r24, r22
    43ae:	9a 83       	std	Y+2, r25	; 0x02
    43b0:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    43b2:	ea e4       	ldi	r30, 0x4A	; 74
    43b4:	f0 e0       	ldi	r31, 0x00	; 0
    43b6:	89 81       	ldd	r24, Y+1	; 0x01
    43b8:	9a 81       	ldd	r25, Y+2	; 0x02
    43ba:	91 83       	std	Z+1, r25	; 0x01
    43bc:	80 83       	st	Z, r24
    43be:	30 c0       	rjmp	.+96     	; 0x4420 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;
	   case TIMER1_MODE_FAST_PWM_9 :
	        Copy_u16OCR1AValue=(512*Copy_u8Intensity/100);
    43c0:	8b 81       	ldd	r24, Y+3	; 0x03
    43c2:	88 2f       	mov	r24, r24
    43c4:	90 e0       	ldi	r25, 0x00	; 0
    43c6:	98 2f       	mov	r25, r24
    43c8:	88 27       	eor	r24, r24
    43ca:	99 0f       	add	r25, r25
    43cc:	24 e6       	ldi	r18, 0x64	; 100
    43ce:	30 e0       	ldi	r19, 0x00	; 0
    43d0:	b9 01       	movw	r22, r18
    43d2:	0e 94 13 2b 	call	0x5626	; 0x5626 <__divmodhi4>
    43d6:	cb 01       	movw	r24, r22
    43d8:	9a 83       	std	Y+2, r25	; 0x02
    43da:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    43dc:	ea e4       	ldi	r30, 0x4A	; 74
    43de:	f0 e0       	ldi	r31, 0x00	; 0
    43e0:	89 81       	ldd	r24, Y+1	; 0x01
    43e2:	9a 81       	ldd	r25, Y+2	; 0x02
    43e4:	91 83       	std	Z+1, r25	; 0x01
    43e6:	80 83       	st	Z, r24
    43e8:	1b c0       	rjmp	.+54     	; 0x4420 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;
	   case TIMER1_MODE_FAST_PWM_10 :
	        Copy_u16OCR1AValue=((u16)1023*Copy_u8Intensity/100);
    43ea:	8b 81       	ldd	r24, Y+3	; 0x03
    43ec:	28 2f       	mov	r18, r24
    43ee:	30 e0       	ldi	r19, 0x00	; 0
    43f0:	8f ef       	ldi	r24, 0xFF	; 255
    43f2:	93 e0       	ldi	r25, 0x03	; 3
    43f4:	ac 01       	movw	r20, r24
    43f6:	24 9f       	mul	r18, r20
    43f8:	c0 01       	movw	r24, r0
    43fa:	25 9f       	mul	r18, r21
    43fc:	90 0d       	add	r25, r0
    43fe:	34 9f       	mul	r19, r20
    4400:	90 0d       	add	r25, r0
    4402:	11 24       	eor	r1, r1
    4404:	24 e6       	ldi	r18, 0x64	; 100
    4406:	30 e0       	ldi	r19, 0x00	; 0
    4408:	b9 01       	movw	r22, r18
    440a:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <__udivmodhi4>
    440e:	cb 01       	movw	r24, r22
    4410:	9a 83       	std	Y+2, r25	; 0x02
    4412:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    4414:	ea e4       	ldi	r30, 0x4A	; 74
    4416:	f0 e0       	ldi	r31, 0x00	; 0
    4418:	89 81       	ldd	r24, Y+1	; 0x01
    441a:	9a 81       	ldd	r25, Y+2	; 0x02
    441c:	91 83       	std	Z+1, r25	; 0x01
    441e:	80 83       	st	Z, r24
	   break;
	}
}
    4420:	0f 90       	pop	r0
    4422:	0f 90       	pop	r0
    4424:	0f 90       	pop	r0
    4426:	0f 90       	pop	r0
    4428:	0f 90       	pop	r0
    442a:	cf 91       	pop	r28
    442c:	df 91       	pop	r29
    442e:	08 95       	ret

00004430 <TIMER_voidTimer1GeneratePWMOCR1B>:
void TIMER_voidTimer1GeneratePWMOCR1B(u8 Copy_u8Intensity)
{
    4430:	df 93       	push	r29
    4432:	cf 93       	push	r28
    4434:	00 d0       	rcall	.+0      	; 0x4436 <TIMER_voidTimer1GeneratePWMOCR1B+0x6>
    4436:	00 d0       	rcall	.+0      	; 0x4438 <TIMER_voidTimer1GeneratePWMOCR1B+0x8>
    4438:	0f 92       	push	r0
    443a:	cd b7       	in	r28, 0x3d	; 61
    443c:	de b7       	in	r29, 0x3e	; 62
    443e:	8b 83       	std	Y+3, r24	; 0x03
	u16 Copy_u16OCR1BValue;
	switch(TIMER1_u8MODEPWM)
    4440:	80 91 ac 01 	lds	r24, 0x01AC
    4444:	28 2f       	mov	r18, r24
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	3d 83       	std	Y+5, r19	; 0x05
    444a:	2c 83       	std	Y+4, r18	; 0x04
    444c:	4c 81       	ldd	r20, Y+4	; 0x04
    444e:	5d 81       	ldd	r21, Y+5	; 0x05
    4450:	43 30       	cpi	r20, 0x03	; 3
    4452:	51 05       	cpc	r21, r1
    4454:	09 f4       	brne	.+2      	; 0x4458 <TIMER_voidTimer1GeneratePWMOCR1B+0x28>
    4456:	5b c0       	rjmp	.+182    	; 0x450e <TIMER_voidTimer1GeneratePWMOCR1B+0xde>
    4458:	8c 81       	ldd	r24, Y+4	; 0x04
    445a:	9d 81       	ldd	r25, Y+5	; 0x05
    445c:	84 30       	cpi	r24, 0x04	; 4
    445e:	91 05       	cpc	r25, r1
    4460:	5c f4       	brge	.+22     	; 0x4478 <TIMER_voidTimer1GeneratePWMOCR1B+0x48>
    4462:	2c 81       	ldd	r18, Y+4	; 0x04
    4464:	3d 81       	ldd	r19, Y+5	; 0x05
    4466:	21 30       	cpi	r18, 0x01	; 1
    4468:	31 05       	cpc	r19, r1
    446a:	c9 f0       	breq	.+50     	; 0x449e <TIMER_voidTimer1GeneratePWMOCR1B+0x6e>
    446c:	4c 81       	ldd	r20, Y+4	; 0x04
    446e:	5d 81       	ldd	r21, Y+5	; 0x05
    4470:	42 30       	cpi	r20, 0x02	; 2
    4472:	51 05       	cpc	r21, r1
    4474:	81 f1       	breq	.+96     	; 0x44d6 <TIMER_voidTimer1GeneratePWMOCR1B+0xa6>
    4476:	ab c0       	rjmp	.+342    	; 0x45ce <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
    4478:	8c 81       	ldd	r24, Y+4	; 0x04
    447a:	9d 81       	ldd	r25, Y+5	; 0x05
    447c:	86 30       	cpi	r24, 0x06	; 6
    447e:	91 05       	cpc	r25, r1
    4480:	09 f4       	brne	.+2      	; 0x4484 <TIMER_voidTimer1GeneratePWMOCR1B+0x54>
    4482:	75 c0       	rjmp	.+234    	; 0x456e <TIMER_voidTimer1GeneratePWMOCR1B+0x13e>
    4484:	2c 81       	ldd	r18, Y+4	; 0x04
    4486:	3d 81       	ldd	r19, Y+5	; 0x05
    4488:	27 30       	cpi	r18, 0x07	; 7
    448a:	31 05       	cpc	r19, r1
    448c:	09 f4       	brne	.+2      	; 0x4490 <TIMER_voidTimer1GeneratePWMOCR1B+0x60>
    448e:	84 c0       	rjmp	.+264    	; 0x4598 <TIMER_voidTimer1GeneratePWMOCR1B+0x168>
    4490:	4c 81       	ldd	r20, Y+4	; 0x04
    4492:	5d 81       	ldd	r21, Y+5	; 0x05
    4494:	45 30       	cpi	r20, 0x05	; 5
    4496:	51 05       	cpc	r21, r1
    4498:	09 f4       	brne	.+2      	; 0x449c <TIMER_voidTimer1GeneratePWMOCR1B+0x6c>
    449a:	55 c0       	rjmp	.+170    	; 0x4546 <TIMER_voidTimer1GeneratePWMOCR1B+0x116>
    449c:	98 c0       	rjmp	.+304    	; 0x45ce <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	{
	   case TIMER1_MODE_PWM_PHASE_CORRECT_8 :
	        Copy_u16OCR1BValue=((u16)510*Copy_u8Intensity/100);
    449e:	8b 81       	ldd	r24, Y+3	; 0x03
    44a0:	28 2f       	mov	r18, r24
    44a2:	30 e0       	ldi	r19, 0x00	; 0
    44a4:	8e ef       	ldi	r24, 0xFE	; 254
    44a6:	91 e0       	ldi	r25, 0x01	; 1
    44a8:	ac 01       	movw	r20, r24
    44aa:	24 9f       	mul	r18, r20
    44ac:	c0 01       	movw	r24, r0
    44ae:	25 9f       	mul	r18, r21
    44b0:	90 0d       	add	r25, r0
    44b2:	34 9f       	mul	r19, r20
    44b4:	90 0d       	add	r25, r0
    44b6:	11 24       	eor	r1, r1
    44b8:	24 e6       	ldi	r18, 0x64	; 100
    44ba:	30 e0       	ldi	r19, 0x00	; 0
    44bc:	b9 01       	movw	r22, r18
    44be:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <__udivmodhi4>
    44c2:	cb 01       	movw	r24, r22
    44c4:	9a 83       	std	Y+2, r25	; 0x02
    44c6:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    44c8:	e8 e4       	ldi	r30, 0x48	; 72
    44ca:	f0 e0       	ldi	r31, 0x00	; 0
    44cc:	89 81       	ldd	r24, Y+1	; 0x01
    44ce:	9a 81       	ldd	r25, Y+2	; 0x02
    44d0:	91 83       	std	Z+1, r25	; 0x01
    44d2:	80 83       	st	Z, r24
    44d4:	7c c0       	rjmp	.+248    	; 0x45ce <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;
	   case TIMER1_MODE_PWM_PHASE_CORRECT_9 :
	        Copy_u16OCR1BValue=((u16)1022*Copy_u8Intensity/100);
    44d6:	8b 81       	ldd	r24, Y+3	; 0x03
    44d8:	28 2f       	mov	r18, r24
    44da:	30 e0       	ldi	r19, 0x00	; 0
    44dc:	8e ef       	ldi	r24, 0xFE	; 254
    44de:	93 e0       	ldi	r25, 0x03	; 3
    44e0:	ac 01       	movw	r20, r24
    44e2:	24 9f       	mul	r18, r20
    44e4:	c0 01       	movw	r24, r0
    44e6:	25 9f       	mul	r18, r21
    44e8:	90 0d       	add	r25, r0
    44ea:	34 9f       	mul	r19, r20
    44ec:	90 0d       	add	r25, r0
    44ee:	11 24       	eor	r1, r1
    44f0:	24 e6       	ldi	r18, 0x64	; 100
    44f2:	30 e0       	ldi	r19, 0x00	; 0
    44f4:	b9 01       	movw	r22, r18
    44f6:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <__udivmodhi4>
    44fa:	cb 01       	movw	r24, r22
    44fc:	9a 83       	std	Y+2, r25	; 0x02
    44fe:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    4500:	e8 e4       	ldi	r30, 0x48	; 72
    4502:	f0 e0       	ldi	r31, 0x00	; 0
    4504:	89 81       	ldd	r24, Y+1	; 0x01
    4506:	9a 81       	ldd	r25, Y+2	; 0x02
    4508:	91 83       	std	Z+1, r25	; 0x01
    450a:	80 83       	st	Z, r24
    450c:	60 c0       	rjmp	.+192    	; 0x45ce <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;
	   case TIMER1_MODE_PWM_PHASE_CORRECT_10 :
	        Copy_u16OCR1BValue=((u16)2046*Copy_u8Intensity/100);
    450e:	8b 81       	ldd	r24, Y+3	; 0x03
    4510:	28 2f       	mov	r18, r24
    4512:	30 e0       	ldi	r19, 0x00	; 0
    4514:	8e ef       	ldi	r24, 0xFE	; 254
    4516:	97 e0       	ldi	r25, 0x07	; 7
    4518:	ac 01       	movw	r20, r24
    451a:	24 9f       	mul	r18, r20
    451c:	c0 01       	movw	r24, r0
    451e:	25 9f       	mul	r18, r21
    4520:	90 0d       	add	r25, r0
    4522:	34 9f       	mul	r19, r20
    4524:	90 0d       	add	r25, r0
    4526:	11 24       	eor	r1, r1
    4528:	24 e6       	ldi	r18, 0x64	; 100
    452a:	30 e0       	ldi	r19, 0x00	; 0
    452c:	b9 01       	movw	r22, r18
    452e:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <__udivmodhi4>
    4532:	cb 01       	movw	r24, r22
    4534:	9a 83       	std	Y+2, r25	; 0x02
    4536:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    4538:	e8 e4       	ldi	r30, 0x48	; 72
    453a:	f0 e0       	ldi	r31, 0x00	; 0
    453c:	89 81       	ldd	r24, Y+1	; 0x01
    453e:	9a 81       	ldd	r25, Y+2	; 0x02
    4540:	91 83       	std	Z+1, r25	; 0x01
    4542:	80 83       	st	Z, r24
    4544:	44 c0       	rjmp	.+136    	; 0x45ce <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;

	   case TIMER1_MODE_FAST_PWM_8 :
	        Copy_u16OCR1BValue=(256*Copy_u8Intensity/100);
    4546:	8b 81       	ldd	r24, Y+3	; 0x03
    4548:	88 2f       	mov	r24, r24
    454a:	90 e0       	ldi	r25, 0x00	; 0
    454c:	98 2f       	mov	r25, r24
    454e:	88 27       	eor	r24, r24
    4550:	24 e6       	ldi	r18, 0x64	; 100
    4552:	30 e0       	ldi	r19, 0x00	; 0
    4554:	b9 01       	movw	r22, r18
    4556:	0e 94 13 2b 	call	0x5626	; 0x5626 <__divmodhi4>
    455a:	cb 01       	movw	r24, r22
    455c:	9a 83       	std	Y+2, r25	; 0x02
    455e:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    4560:	e8 e4       	ldi	r30, 0x48	; 72
    4562:	f0 e0       	ldi	r31, 0x00	; 0
    4564:	89 81       	ldd	r24, Y+1	; 0x01
    4566:	9a 81       	ldd	r25, Y+2	; 0x02
    4568:	91 83       	std	Z+1, r25	; 0x01
    456a:	80 83       	st	Z, r24
    456c:	30 c0       	rjmp	.+96     	; 0x45ce <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;
	   case TIMER1_MODE_FAST_PWM_9 :
	        Copy_u16OCR1BValue=(512*Copy_u8Intensity/100);
    456e:	8b 81       	ldd	r24, Y+3	; 0x03
    4570:	88 2f       	mov	r24, r24
    4572:	90 e0       	ldi	r25, 0x00	; 0
    4574:	98 2f       	mov	r25, r24
    4576:	88 27       	eor	r24, r24
    4578:	99 0f       	add	r25, r25
    457a:	24 e6       	ldi	r18, 0x64	; 100
    457c:	30 e0       	ldi	r19, 0x00	; 0
    457e:	b9 01       	movw	r22, r18
    4580:	0e 94 13 2b 	call	0x5626	; 0x5626 <__divmodhi4>
    4584:	cb 01       	movw	r24, r22
    4586:	9a 83       	std	Y+2, r25	; 0x02
    4588:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    458a:	e8 e4       	ldi	r30, 0x48	; 72
    458c:	f0 e0       	ldi	r31, 0x00	; 0
    458e:	89 81       	ldd	r24, Y+1	; 0x01
    4590:	9a 81       	ldd	r25, Y+2	; 0x02
    4592:	91 83       	std	Z+1, r25	; 0x01
    4594:	80 83       	st	Z, r24
    4596:	1b c0       	rjmp	.+54     	; 0x45ce <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;
	   case TIMER1_MODE_FAST_PWM_10 :
	        Copy_u16OCR1BValue=((u16)1023*Copy_u8Intensity/100);
    4598:	8b 81       	ldd	r24, Y+3	; 0x03
    459a:	28 2f       	mov	r18, r24
    459c:	30 e0       	ldi	r19, 0x00	; 0
    459e:	8f ef       	ldi	r24, 0xFF	; 255
    45a0:	93 e0       	ldi	r25, 0x03	; 3
    45a2:	ac 01       	movw	r20, r24
    45a4:	24 9f       	mul	r18, r20
    45a6:	c0 01       	movw	r24, r0
    45a8:	25 9f       	mul	r18, r21
    45aa:	90 0d       	add	r25, r0
    45ac:	34 9f       	mul	r19, r20
    45ae:	90 0d       	add	r25, r0
    45b0:	11 24       	eor	r1, r1
    45b2:	24 e6       	ldi	r18, 0x64	; 100
    45b4:	30 e0       	ldi	r19, 0x00	; 0
    45b6:	b9 01       	movw	r22, r18
    45b8:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <__udivmodhi4>
    45bc:	cb 01       	movw	r24, r22
    45be:	9a 83       	std	Y+2, r25	; 0x02
    45c0:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    45c2:	e8 e4       	ldi	r30, 0x48	; 72
    45c4:	f0 e0       	ldi	r31, 0x00	; 0
    45c6:	89 81       	ldd	r24, Y+1	; 0x01
    45c8:	9a 81       	ldd	r25, Y+2	; 0x02
    45ca:	91 83       	std	Z+1, r25	; 0x01
    45cc:	80 83       	st	Z, r24
	   break;
	}
}
    45ce:	0f 90       	pop	r0
    45d0:	0f 90       	pop	r0
    45d2:	0f 90       	pop	r0
    45d4:	0f 90       	pop	r0
    45d6:	0f 90       	pop	r0
    45d8:	cf 91       	pop	r28
    45da:	df 91       	pop	r29
    45dc:	08 95       	ret

000045de <TIMER_voidTimer1SetOCR1A>:

/*************************************************************************************************************/
void TIMER_voidTimer1SetOCR1A(u16 Copy_u16OCR1A)
{
    45de:	df 93       	push	r29
    45e0:	cf 93       	push	r28
    45e2:	00 d0       	rcall	.+0      	; 0x45e4 <TIMER_voidTimer1SetOCR1A+0x6>
    45e4:	cd b7       	in	r28, 0x3d	; 61
    45e6:	de b7       	in	r29, 0x3e	; 62
    45e8:	9a 83       	std	Y+2, r25	; 0x02
    45ea:	89 83       	std	Y+1, r24	; 0x01
	  OCR1AH = (u8)(Copy_u16OCR1A>>8);
    45ec:	eb e4       	ldi	r30, 0x4B	; 75
    45ee:	f0 e0       	ldi	r31, 0x00	; 0
    45f0:	89 81       	ldd	r24, Y+1	; 0x01
    45f2:	9a 81       	ldd	r25, Y+2	; 0x02
    45f4:	89 2f       	mov	r24, r25
    45f6:	99 27       	eor	r25, r25
    45f8:	80 83       	st	Z, r24
	  OCR1AL = (u8)(Copy_u16OCR1A);
    45fa:	ea e4       	ldi	r30, 0x4A	; 74
    45fc:	f0 e0       	ldi	r31, 0x00	; 0
    45fe:	89 81       	ldd	r24, Y+1	; 0x01
    4600:	80 83       	st	Z, r24
}
    4602:	0f 90       	pop	r0
    4604:	0f 90       	pop	r0
    4606:	cf 91       	pop	r28
    4608:	df 91       	pop	r29
    460a:	08 95       	ret

0000460c <TIMER_voidTimer1SetOCR1B>:
void TIMER_voidTimer1SetOCR1B(u16 Copy_u16OCR1B)
{
    460c:	df 93       	push	r29
    460e:	cf 93       	push	r28
    4610:	00 d0       	rcall	.+0      	; 0x4612 <TIMER_voidTimer1SetOCR1B+0x6>
    4612:	cd b7       	in	r28, 0x3d	; 61
    4614:	de b7       	in	r29, 0x3e	; 62
    4616:	9a 83       	std	Y+2, r25	; 0x02
    4618:	89 83       	std	Y+1, r24	; 0x01
	  OCR1BH = (u8)(Copy_u16OCR1B>>8);
    461a:	e9 e4       	ldi	r30, 0x49	; 73
    461c:	f0 e0       	ldi	r31, 0x00	; 0
    461e:	89 81       	ldd	r24, Y+1	; 0x01
    4620:	9a 81       	ldd	r25, Y+2	; 0x02
    4622:	89 2f       	mov	r24, r25
    4624:	99 27       	eor	r25, r25
    4626:	80 83       	st	Z, r24
	  OCR1BL = (u8)(Copy_u16OCR1B);
    4628:	e8 e4       	ldi	r30, 0x48	; 72
    462a:	f0 e0       	ldi	r31, 0x00	; 0
    462c:	89 81       	ldd	r24, Y+1	; 0x01
    462e:	80 83       	st	Z, r24
}
    4630:	0f 90       	pop	r0
    4632:	0f 90       	pop	r0
    4634:	cf 91       	pop	r28
    4636:	df 91       	pop	r29
    4638:	08 95       	ret

0000463a <TIMER_voidTimer1SetICR1>:
void TIMER_voidTimer1SetICR1(u16 Copy_u16ICR1)
{
    463a:	df 93       	push	r29
    463c:	cf 93       	push	r28
    463e:	00 d0       	rcall	.+0      	; 0x4640 <TIMER_voidTimer1SetICR1+0x6>
    4640:	cd b7       	in	r28, 0x3d	; 61
    4642:	de b7       	in	r29, 0x3e	; 62
    4644:	9a 83       	std	Y+2, r25	; 0x02
    4646:	89 83       	std	Y+1, r24	; 0x01
	  ICR1H = (u8)(Copy_u16ICR1>>8);
    4648:	e7 e4       	ldi	r30, 0x47	; 71
    464a:	f0 e0       	ldi	r31, 0x00	; 0
    464c:	89 81       	ldd	r24, Y+1	; 0x01
    464e:	9a 81       	ldd	r25, Y+2	; 0x02
    4650:	89 2f       	mov	r24, r25
    4652:	99 27       	eor	r25, r25
    4654:	80 83       	st	Z, r24
	  ICR1L = (u8)(Copy_u16ICR1);
    4656:	e6 e4       	ldi	r30, 0x46	; 70
    4658:	f0 e0       	ldi	r31, 0x00	; 0
    465a:	89 81       	ldd	r24, Y+1	; 0x01
    465c:	80 83       	st	Z, r24
}
    465e:	0f 90       	pop	r0
    4660:	0f 90       	pop	r0
    4662:	cf 91       	pop	r28
    4664:	df 91       	pop	r29
    4666:	08 95       	ret

00004668 <TIMER_voidTimer1ICUInit>:
 *                                                           ICU Timer 1                                                             *
 **************************************************************************************************************************************/
static void(*Timer1_pICUSetCallBack)(void);
/************************************************************************************************************************************/
void TIMER_voidTimer1ICUInit(void)
{
    4668:	df 93       	push	r29
    466a:	cf 93       	push	r28
    466c:	cd b7       	in	r28, 0x3d	; 61
    466e:	de b7       	in	r29, 0x3e	; 62
	 SET_BIT(TCCR1B,TCCR1B_ICES1);
    4670:	ae e4       	ldi	r26, 0x4E	; 78
    4672:	b0 e0       	ldi	r27, 0x00	; 0
    4674:	ee e4       	ldi	r30, 0x4E	; 78
    4676:	f0 e0       	ldi	r31, 0x00	; 0
    4678:	80 81       	ld	r24, Z
    467a:	80 64       	ori	r24, 0x40	; 64
    467c:	8c 93       	st	X, r24
	 SET_BIT(TIMSK,TIMSK_TICIE1);
    467e:	a9 e5       	ldi	r26, 0x59	; 89
    4680:	b0 e0       	ldi	r27, 0x00	; 0
    4682:	e9 e5       	ldi	r30, 0x59	; 89
    4684:	f0 e0       	ldi	r31, 0x00	; 0
    4686:	80 81       	ld	r24, Z
    4688:	80 62       	ori	r24, 0x20	; 32
    468a:	8c 93       	st	X, r24

	 CLR_BIT(TCCR1B,TCCR1B_CS10);
    468c:	ae e4       	ldi	r26, 0x4E	; 78
    468e:	b0 e0       	ldi	r27, 0x00	; 0
    4690:	ee e4       	ldi	r30, 0x4E	; 78
    4692:	f0 e0       	ldi	r31, 0x00	; 0
    4694:	80 81       	ld	r24, Z
    4696:	8e 7f       	andi	r24, 0xFE	; 254
    4698:	8c 93       	st	X, r24
	 SET_BIT(TCCR1B,TCCR1B_CS11);
    469a:	ae e4       	ldi	r26, 0x4E	; 78
    469c:	b0 e0       	ldi	r27, 0x00	; 0
    469e:	ee e4       	ldi	r30, 0x4E	; 78
    46a0:	f0 e0       	ldi	r31, 0x00	; 0
    46a2:	80 81       	ld	r24, Z
    46a4:	82 60       	ori	r24, 0x02	; 2
    46a6:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1B,TCCR1B_CS12);
    46a8:	ae e4       	ldi	r26, 0x4E	; 78
    46aa:	b0 e0       	ldi	r27, 0x00	; 0
    46ac:	ee e4       	ldi	r30, 0x4E	; 78
    46ae:	f0 e0       	ldi	r31, 0x00	; 0
    46b0:	80 81       	ld	r24, Z
    46b2:	8b 7f       	andi	r24, 0xFB	; 251
    46b4:	8c 93       	st	X, r24
}
    46b6:	cf 91       	pop	r28
    46b8:	df 91       	pop	r29
    46ba:	08 95       	ret

000046bc <TIMER_voidTimer1ICUSetTriggerEdge>:
void TIMER_voidTimer1ICUSetTriggerEdge(u8 Copy_u8ICUEdgeType)
{
    46bc:	df 93       	push	r29
    46be:	cf 93       	push	r28
    46c0:	0f 92       	push	r0
    46c2:	cd b7       	in	r28, 0x3d	; 61
    46c4:	de b7       	in	r29, 0x3e	; 62
    46c6:	89 83       	std	Y+1, r24	; 0x01
   if(Copy_u8ICUEdgeType==TIMER1_ICU_RISING_EDGY_TYPE_MODE)
    46c8:	89 81       	ldd	r24, Y+1	; 0x01
    46ca:	81 30       	cpi	r24, 0x01	; 1
    46cc:	41 f4       	brne	.+16     	; 0x46de <TIMER_voidTimer1ICUSetTriggerEdge+0x22>
   {
	  SET_BIT(TCCR1B,TCCR1B_ICES1);
    46ce:	ae e4       	ldi	r26, 0x4E	; 78
    46d0:	b0 e0       	ldi	r27, 0x00	; 0
    46d2:	ee e4       	ldi	r30, 0x4E	; 78
    46d4:	f0 e0       	ldi	r31, 0x00	; 0
    46d6:	80 81       	ld	r24, Z
    46d8:	80 64       	ori	r24, 0x40	; 64
    46da:	8c 93       	st	X, r24
    46dc:	0a c0       	rjmp	.+20     	; 0x46f2 <TIMER_voidTimer1ICUSetTriggerEdge+0x36>
   }
   else if(Copy_u8ICUEdgeType==TIMER1_ICU_FALLING_EDGY_TYPE_MODE)
    46de:	89 81       	ldd	r24, Y+1	; 0x01
    46e0:	88 23       	and	r24, r24
    46e2:	39 f4       	brne	.+14     	; 0x46f2 <TIMER_voidTimer1ICUSetTriggerEdge+0x36>
   {
	  CLR_BIT(TCCR1B,TCCR1B_ICES1);
    46e4:	ae e4       	ldi	r26, 0x4E	; 78
    46e6:	b0 e0       	ldi	r27, 0x00	; 0
    46e8:	ee e4       	ldi	r30, 0x4E	; 78
    46ea:	f0 e0       	ldi	r31, 0x00	; 0
    46ec:	80 81       	ld	r24, Z
    46ee:	8f 7b       	andi	r24, 0xBF	; 191
    46f0:	8c 93       	st	X, r24
   }
}
    46f2:	0f 90       	pop	r0
    46f4:	cf 91       	pop	r28
    46f6:	df 91       	pop	r29
    46f8:	08 95       	ret

000046fa <TIMER_voidTimer1ICUGetInputCaptureValue>:
u16 TIMER_voidTimer1ICUGetInputCaptureValue(void)
{
    46fa:	df 93       	push	r29
    46fc:	cf 93       	push	r28
    46fe:	cd b7       	in	r28, 0x3d	; 61
    4700:	de b7       	in	r29, 0x3e	; 62
	 return TIMER_u16_ICR1;
    4702:	e6 e4       	ldi	r30, 0x46	; 70
    4704:	f0 e0       	ldi	r31, 0x00	; 0
    4706:	80 81       	ld	r24, Z
    4708:	91 81       	ldd	r25, Z+1	; 0x01
}
    470a:	cf 91       	pop	r28
    470c:	df 91       	pop	r29
    470e:	08 95       	ret

00004710 <TIMER_voidTimer1ICUSetCallBack>:
void TIMER_voidTimer1ICUSetCallBack(void (*Copy_pFun) (void))
{
    4710:	df 93       	push	r29
    4712:	cf 93       	push	r28
    4714:	00 d0       	rcall	.+0      	; 0x4716 <TIMER_voidTimer1ICUSetCallBack+0x6>
    4716:	cd b7       	in	r28, 0x3d	; 61
    4718:	de b7       	in	r29, 0x3e	; 62
    471a:	9a 83       	std	Y+2, r25	; 0x02
    471c:	89 83       	std	Y+1, r24	; 0x01
	 Timer1_pICUSetCallBack = Copy_pFun;
    471e:	89 81       	ldd	r24, Y+1	; 0x01
    4720:	9a 81       	ldd	r25, Y+2	; 0x02
    4722:	90 93 a7 01 	sts	0x01A7, r25
    4726:	80 93 a6 01 	sts	0x01A6, r24
}
    472a:	0f 90       	pop	r0
    472c:	0f 90       	pop	r0
    472e:	cf 91       	pop	r28
    4730:	df 91       	pop	r29
    4732:	08 95       	ret

00004734 <TIMER_voidClearTimer1Value>:
void TIMER_voidClearTimer1Value(void)
{
    4734:	df 93       	push	r29
    4736:	cf 93       	push	r28
    4738:	cd b7       	in	r28, 0x3d	; 61
    473a:	de b7       	in	r29, 0x3e	; 62
	 TIMER_u16_TCNT1 = 0;
    473c:	ec e4       	ldi	r30, 0x4C	; 76
    473e:	f0 e0       	ldi	r31, 0x00	; 0
    4740:	11 82       	std	Z+1, r1	; 0x01
    4742:	10 82       	st	Z, r1
}
    4744:	cf 91       	pop	r28
    4746:	df 91       	pop	r29
    4748:	08 95       	ret

0000474a <__vector_6>:
void __vector_6 (void)
{
    474a:	1f 92       	push	r1
    474c:	0f 92       	push	r0
    474e:	0f b6       	in	r0, 0x3f	; 63
    4750:	0f 92       	push	r0
    4752:	11 24       	eor	r1, r1
    4754:	2f 93       	push	r18
    4756:	3f 93       	push	r19
    4758:	4f 93       	push	r20
    475a:	5f 93       	push	r21
    475c:	6f 93       	push	r22
    475e:	7f 93       	push	r23
    4760:	8f 93       	push	r24
    4762:	9f 93       	push	r25
    4764:	af 93       	push	r26
    4766:	bf 93       	push	r27
    4768:	ef 93       	push	r30
    476a:	ff 93       	push	r31
    476c:	df 93       	push	r29
    476e:	cf 93       	push	r28
    4770:	cd b7       	in	r28, 0x3d	; 61
    4772:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_pICUSetCallBack!=NULL)
    4774:	80 91 a6 01 	lds	r24, 0x01A6
    4778:	90 91 a7 01 	lds	r25, 0x01A7
    477c:	00 97       	sbiw	r24, 0x00	; 0
    477e:	29 f0       	breq	.+10     	; 0x478a <__vector_6+0x40>
	{
		Timer1_pICUSetCallBack();
    4780:	e0 91 a6 01 	lds	r30, 0x01A6
    4784:	f0 91 a7 01 	lds	r31, 0x01A7
    4788:	09 95       	icall
	}
}
    478a:	cf 91       	pop	r28
    478c:	df 91       	pop	r29
    478e:	ff 91       	pop	r31
    4790:	ef 91       	pop	r30
    4792:	bf 91       	pop	r27
    4794:	af 91       	pop	r26
    4796:	9f 91       	pop	r25
    4798:	8f 91       	pop	r24
    479a:	7f 91       	pop	r23
    479c:	6f 91       	pop	r22
    479e:	5f 91       	pop	r21
    47a0:	4f 91       	pop	r20
    47a2:	3f 91       	pop	r19
    47a4:	2f 91       	pop	r18
    47a6:	0f 90       	pop	r0
    47a8:	0f be       	out	0x3f, r0	; 63
    47aa:	0f 90       	pop	r0
    47ac:	1f 90       	pop	r1
    47ae:	18 95       	reti

000047b0 <UART_voidInit>:

static void (*UART_RX_Fptr) (void) = NULL;
static void (*UART_TX_Fptr) (void) = NULL;

void UART_voidInit(void)
{	
    47b0:	df 93       	push	r29
    47b2:	cf 93       	push	r28
    47b4:	00 d0       	rcall	.+0      	; 0x47b6 <UART_voidInit+0x6>
    47b6:	0f 92       	push	r0
    47b8:	cd b7       	in	r28, 0x3d	; 61
    47ba:	de b7       	in	r29, 0x3e	; 62

/********************************************************** UBRR ***************************************/
	u16 Local_u16UBRRValue ;
	Local_u16UBRRValue = UART_BAUD_RATE_UBRR;
    47bc:	83 e3       	ldi	r24, 0x33	; 51
    47be:	90 e0       	ldi	r25, 0x00	; 0
    47c0:	9b 83       	std	Y+3, r25	; 0x03
    47c2:	8a 83       	std	Y+2, r24	; 0x02
	UBRRL=(u8)Local_u16UBRRValue;
    47c4:	e9 e2       	ldi	r30, 0x29	; 41
    47c6:	f0 e0       	ldi	r31, 0x00	; 0
    47c8:	8a 81       	ldd	r24, Y+2	; 0x02
    47ca:	80 83       	st	Z, r24
	UBRRH=(u8)(Local_u16UBRRValue>>8);
    47cc:	e0 e4       	ldi	r30, 0x40	; 64
    47ce:	f0 e0       	ldi	r31, 0x00	; 0
    47d0:	8a 81       	ldd	r24, Y+2	; 0x02
    47d2:	9b 81       	ldd	r25, Y+3	; 0x03
    47d4:	89 2f       	mov	r24, r25
    47d6:	99 27       	eor	r25, r25
    47d8:	80 83       	st	Z, r24
/************************************* UCSRA *******************************************************/
    #if     UART_SPEED == UART_NORMAL_SPEED
	        CLR_BIT(UCSRA,UCSRA_U2X);
    47da:	ab e2       	ldi	r26, 0x2B	; 43
    47dc:	b0 e0       	ldi	r27, 0x00	; 0
    47de:	eb e2       	ldi	r30, 0x2B	; 43
    47e0:	f0 e0       	ldi	r31, 0x00	; 0
    47e2:	80 81       	ld	r24, Z
    47e4:	8d 7f       	andi	r24, 0xFD	; 253
    47e6:	8c 93       	st	X, r24
    #elif   UART_SPEED == UART_DOUBLE_SPEED
	        SET_BIT(UCSRA,UCSRA_U2X);
    #endif

    #if     UART_PROCESSOR_COMMUNICATION == UART_SINGLE_CYCLE_PRICESSOR
            CLR_BIT(UCSRA,UCSRA_MPCM);
    47e8:	ab e2       	ldi	r26, 0x2B	; 43
    47ea:	b0 e0       	ldi	r27, 0x00	; 0
    47ec:	eb e2       	ldi	r30, 0x2B	; 43
    47ee:	f0 e0       	ldi	r31, 0x00	; 0
    47f0:	80 81       	ld	r24, Z
    47f2:	8e 7f       	andi	r24, 0xFE	; 254
    47f4:	8c 93       	st	X, r24
    #elif   UART_PROCESSOR_COMMUNICATION == UART_MULTI_PRICESSOR
            SET_BIT(UCSRA,UCSRA_MPCM);
    #endif
/**************************************** UCSRB ****************************************************/
    #if     UART_RX_INTERRUPR == UART_RX_DISABLE_INTERRUPR
            CLR_BIT(UCSRB,UCSRB_RXCIE);
    47f6:	aa e2       	ldi	r26, 0x2A	; 42
    47f8:	b0 e0       	ldi	r27, 0x00	; 0
    47fa:	ea e2       	ldi	r30, 0x2A	; 42
    47fc:	f0 e0       	ldi	r31, 0x00	; 0
    47fe:	80 81       	ld	r24, Z
    4800:	8f 77       	andi	r24, 0x7F	; 127
    4802:	8c 93       	st	X, r24
    #elif   UART_RX_INTERRUPR == UART_RX_ENABLE_INTERRUPR
            SET_BIT(UCSRB,UCSRB_RXCIEREG);
    #endif

    #if     UART_RX_INTERRUPR == UART_RX_DISABLE_INTERRUPR
            CLR_BIT(UCSRB,UCSRB_RXCIE);
    4804:	aa e2       	ldi	r26, 0x2A	; 42
    4806:	b0 e0       	ldi	r27, 0x00	; 0
    4808:	ea e2       	ldi	r30, 0x2A	; 42
    480a:	f0 e0       	ldi	r31, 0x00	; 0
    480c:	80 81       	ld	r24, Z
    480e:	8f 77       	andi	r24, 0x7F	; 127
    4810:	8c 93       	st	X, r24
            SET_BIT(UCSRB,UCSRB_RXCIE);
    #endif


    #if     UART_TX_INTERRUPR == UART_TX_DISABLE_INTERRUPR
            CLR_BIT(UCSRB,UCSRB_TXCIE);
    4812:	aa e2       	ldi	r26, 0x2A	; 42
    4814:	b0 e0       	ldi	r27, 0x00	; 0
    4816:	ea e2       	ldi	r30, 0x2A	; 42
    4818:	f0 e0       	ldi	r31, 0x00	; 0
    481a:	80 81       	ld	r24, Z
    481c:	8f 7b       	andi	r24, 0xBF	; 191
    481e:	8c 93       	st	X, r24
    #elif   UART_TX_INTERRUPR == UART_TX_ENABLE_INTERRUPR
            SET_BIT(UCSRB,UCSRB_TXCIE);
    #endif

    #if     UART_UDRE_EMPTY_INTEREGRRUPR == UART_UDRE_EMPTY_DISABLE_INTERRUPR
            CLR_BIT(UCSRB,UCSRB_UDRIE);
    4820:	aa e2       	ldi	r26, 0x2A	; 42
    4822:	b0 e0       	ldi	r27, 0x00	; 0
    4824:	ea e2       	ldi	r30, 0x2A	; 42
    4826:	f0 e0       	ldi	r31, 0x00	; 0
    4828:	80 81       	ld	r24, Z
    482a:	8f 7d       	andi	r24, 0xDF	; 223
    482c:	8c 93       	st	X, r24
    #elif   UART_UDRE_EMPTY_INTERRUPR == UART_UDRE_EMPTY_ENABLE_INTERRUPR
            SET_BIT(UCSRB,UCSRB_UDRIEREG);
    #endif

     //enable UART  transmitter
    SET_BIT(UCSRB,UCSRB_TXEN);
    482e:	aa e2       	ldi	r26, 0x2A	; 42
    4830:	b0 e0       	ldi	r27, 0x00	; 0
    4832:	ea e2       	ldi	r30, 0x2A	; 42
    4834:	f0 e0       	ldi	r31, 0x00	; 0
    4836:	80 81       	ld	r24, Z
    4838:	88 60       	ori	r24, 0x08	; 8
    483a:	8c 93       	st	X, r24

    //enable UART  receiver
    SET_BIT(UCSRB,UCSRB_RXEN);
    483c:	aa e2       	ldi	r26, 0x2A	; 42
    483e:	b0 e0       	ldi	r27, 0x00	; 0
    4840:	ea e2       	ldi	r30, 0x2A	; 42
    4842:	f0 e0       	ldi	r31, 0x00	; 0
    4844:	80 81       	ld	r24, Z
    4846:	80 61       	ori	r24, 0x10	; 16
    4848:	8c 93       	st	X, r24

 /********************************************** UCSRC **********************************************/
    u8 Local_u8UCSRCValue= 0b10000000;
    484a:	80 e8       	ldi	r24, 0x80	; 128
    484c:	89 83       	std	Y+1, r24	; 0x01
    #if     UART_MODE_SELECT == UART_ASYNCHRONOUS_OPERATION
            CLR_BIT(Local_u8UCSRCValue,UCSRC_UMSEL);
    484e:	89 81       	ldd	r24, Y+1	; 0x01
    4850:	8f 7b       	andi	r24, 0xBF	; 191
    4852:	89 83       	std	Y+1, r24	; 0x01
    #elif   UART_MODE_SELECT == UART_SYNCHRONOUS_OPERATION
            SET_BIT(Local_u8UCSRCValue,UCSRC_UMSEL);
    #endif

    #if     UART_PARITY_MODE == UART_DISABLE_PARITY
            CLR_BIT(Local_u8UCSRCValue,UCSRC_UPM0);
    4854:	89 81       	ldd	r24, Y+1	; 0x01
    4856:	8f 7e       	andi	r24, 0xEF	; 239
    4858:	89 83       	std	Y+1, r24	; 0x01
            CLR_BIT(Local_u8UCSRCValue,UCSRC_UPM1);
    485a:	89 81       	ldd	r24, Y+1	; 0x01
    485c:	8f 7d       	andi	r24, 0xDF	; 223
    485e:	89 83       	std	Y+1, r24	; 0x01
            SET_BIT(Local_u8UCSRCValue,UCSRC_UPM1);
    #endif


    #if     UART_STOPREG_SELECT == UART_1REG_STOP_SELECT
            CLR_BIT(Local_u8UCSRCValue,UCSRC_USBS);
    4860:	89 81       	ldd	r24, Y+1	; 0x01
    4862:	87 7f       	andi	r24, 0xF7	; 247
    4864:	89 83       	std	Y+1, r24	; 0x01
    #elif   UART_CHARACTER_SIZE == UART_7_CHARACTER_SIZE
            CLR_BIT(Local_u8UCSRCValue,UCSRC_UCSZ0);
            SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ1);
            CLR_BIT(UCSRB,UCSRB_UCSZ2);
    #elif   UART_CHARACTER_SIZE == UART_8_CHARACTER_SIZE
            SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ0);
    4866:	89 81       	ldd	r24, Y+1	; 0x01
    4868:	82 60       	ori	r24, 0x02	; 2
    486a:	89 83       	std	Y+1, r24	; 0x01
            SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ1);
    486c:	89 81       	ldd	r24, Y+1	; 0x01
    486e:	84 60       	ori	r24, 0x04	; 4
    4870:	89 83       	std	Y+1, r24	; 0x01
            CLR_BIT(UCSRB,UCSRB_UCSZ2);
    4872:	aa e2       	ldi	r26, 0x2A	; 42
    4874:	b0 e0       	ldi	r27, 0x00	; 0
    4876:	ea e2       	ldi	r30, 0x2A	; 42
    4878:	f0 e0       	ldi	r31, 0x00	; 0
    487a:	80 81       	ld	r24, Z
    487c:	8b 7f       	andi	r24, 0xFB	; 251
    487e:	8c 93       	st	X, r24
    #elif   UART_CHARACTER_SIZE == UART_9_CHARACTER_SIZE
            SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ0);
            SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ1);
            SET_BIT(UCSRB,UCSRB_UCSZ2);
    #endif
    UCSRC=Local_u8UCSRCValue;
    4880:	e0 e4       	ldi	r30, 0x40	; 64
    4882:	f0 e0       	ldi	r31, 0x00	; 0
    4884:	89 81       	ldd	r24, Y+1	; 0x01
    4886:	80 83       	st	Z, r24
}
    4888:	0f 90       	pop	r0
    488a:	0f 90       	pop	r0
    488c:	0f 90       	pop	r0
    488e:	cf 91       	pop	r28
    4890:	df 91       	pop	r29
    4892:	08 95       	ret

00004894 <UART_voidSendChar>:
void UART_voidSendChar(u8 Copy_u8Char)
{
    4894:	df 93       	push	r29
    4896:	cf 93       	push	r28
    4898:	0f 92       	push	r0
    489a:	cd b7       	in	r28, 0x3d	; 61
    489c:	de b7       	in	r29, 0x3e	; 62
    489e:	89 83       	std	Y+1, r24	; 0x01
	/*UDRE flag is set when the buffer is empty and ready
	for transmitting a new byte so wait until this flag is set to one
	and it will cleared by hardware when u write  new data to puffer.*/

    while((0==GET_BIT(UCSRA,UCSRA_UDRE)));
    48a0:	eb e2       	ldi	r30, 0x2B	; 43
    48a2:	f0 e0       	ldi	r31, 0x00	; 0
    48a4:	80 81       	ld	r24, Z
    48a6:	82 95       	swap	r24
    48a8:	86 95       	lsr	r24
    48aa:	87 70       	andi	r24, 0x07	; 7
    48ac:	88 2f       	mov	r24, r24
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	81 70       	andi	r24, 0x01	; 1
    48b2:	90 70       	andi	r25, 0x00	; 0
    48b4:	00 97       	sbiw	r24, 0x00	; 0
    48b6:	a1 f3       	breq	.-24     	; 0x48a0 <UART_voidSendChar+0xc>
    UDR = Copy_u8Char;
    48b8:	ec e2       	ldi	r30, 0x2C	; 44
    48ba:	f0 e0       	ldi	r31, 0x00	; 0
    48bc:	89 81       	ldd	r24, Y+1	; 0x01
    48be:	80 83       	st	Z, r24
}
    48c0:	0f 90       	pop	r0
    48c2:	cf 91       	pop	r28
    48c4:	df 91       	pop	r29
    48c6:	08 95       	ret

000048c8 <UART_voidSendString>:
void UART_voidSendString(u8  *Copy_pu8String)
{
    48c8:	df 93       	push	r29
    48ca:	cf 93       	push	r28
    48cc:	cd b7       	in	r28, 0x3d	; 61
    48ce:	de b7       	in	r29, 0x3e	; 62
    48d0:	61 97       	sbiw	r28, 0x11	; 17
    48d2:	0f b6       	in	r0, 0x3f	; 63
    48d4:	f8 94       	cli
    48d6:	de bf       	out	0x3e, r29	; 62
    48d8:	0f be       	out	0x3f, r0	; 63
    48da:	cd bf       	out	0x3d, r28	; 61
    48dc:	99 8b       	std	Y+17, r25	; 0x11
    48de:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 Local_u8Counter=0; Copy_pu8String[Local_u8Counter] != '\0' ; Local_u8Counter++)
    48e0:	1f 86       	std	Y+15, r1	; 0x0f
    48e2:	80 c0       	rjmp	.+256    	; 0x49e4 <UART_voidSendString+0x11c>
	{
		  UART_voidSendChar(Copy_pu8String[Local_u8Counter]);
    48e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    48e6:	28 2f       	mov	r18, r24
    48e8:	30 e0       	ldi	r19, 0x00	; 0
    48ea:	88 89       	ldd	r24, Y+16	; 0x10
    48ec:	99 89       	ldd	r25, Y+17	; 0x11
    48ee:	fc 01       	movw	r30, r24
    48f0:	e2 0f       	add	r30, r18
    48f2:	f3 1f       	adc	r31, r19
    48f4:	80 81       	ld	r24, Z
    48f6:	0e 94 4a 24 	call	0x4894	; 0x4894 <UART_voidSendChar>
    48fa:	80 e0       	ldi	r24, 0x00	; 0
    48fc:	90 e0       	ldi	r25, 0x00	; 0
    48fe:	a0 e8       	ldi	r26, 0x80	; 128
    4900:	bf e3       	ldi	r27, 0x3F	; 63
    4902:	8b 87       	std	Y+11, r24	; 0x0b
    4904:	9c 87       	std	Y+12, r25	; 0x0c
    4906:	ad 87       	std	Y+13, r26	; 0x0d
    4908:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    490a:	6b 85       	ldd	r22, Y+11	; 0x0b
    490c:	7c 85       	ldd	r23, Y+12	; 0x0c
    490e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4910:	9e 85       	ldd	r25, Y+14	; 0x0e
    4912:	20 e0       	ldi	r18, 0x00	; 0
    4914:	30 e0       	ldi	r19, 0x00	; 0
    4916:	4a ef       	ldi	r20, 0xFA	; 250
    4918:	54 e4       	ldi	r21, 0x44	; 68
    491a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    491e:	dc 01       	movw	r26, r24
    4920:	cb 01       	movw	r24, r22
    4922:	8f 83       	std	Y+7, r24	; 0x07
    4924:	98 87       	std	Y+8, r25	; 0x08
    4926:	a9 87       	std	Y+9, r26	; 0x09
    4928:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    492a:	6f 81       	ldd	r22, Y+7	; 0x07
    492c:	78 85       	ldd	r23, Y+8	; 0x08
    492e:	89 85       	ldd	r24, Y+9	; 0x09
    4930:	9a 85       	ldd	r25, Y+10	; 0x0a
    4932:	20 e0       	ldi	r18, 0x00	; 0
    4934:	30 e0       	ldi	r19, 0x00	; 0
    4936:	40 e8       	ldi	r20, 0x80	; 128
    4938:	5f e3       	ldi	r21, 0x3F	; 63
    493a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    493e:	88 23       	and	r24, r24
    4940:	2c f4       	brge	.+10     	; 0x494c <UART_voidSendString+0x84>
		__ticks = 1;
    4942:	81 e0       	ldi	r24, 0x01	; 1
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	9e 83       	std	Y+6, r25	; 0x06
    4948:	8d 83       	std	Y+5, r24	; 0x05
    494a:	3f c0       	rjmp	.+126    	; 0x49ca <UART_voidSendString+0x102>
	else if (__tmp > 65535)
    494c:	6f 81       	ldd	r22, Y+7	; 0x07
    494e:	78 85       	ldd	r23, Y+8	; 0x08
    4950:	89 85       	ldd	r24, Y+9	; 0x09
    4952:	9a 85       	ldd	r25, Y+10	; 0x0a
    4954:	20 e0       	ldi	r18, 0x00	; 0
    4956:	3f ef       	ldi	r19, 0xFF	; 255
    4958:	4f e7       	ldi	r20, 0x7F	; 127
    495a:	57 e4       	ldi	r21, 0x47	; 71
    495c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4960:	18 16       	cp	r1, r24
    4962:	4c f5       	brge	.+82     	; 0x49b6 <UART_voidSendString+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4964:	6b 85       	ldd	r22, Y+11	; 0x0b
    4966:	7c 85       	ldd	r23, Y+12	; 0x0c
    4968:	8d 85       	ldd	r24, Y+13	; 0x0d
    496a:	9e 85       	ldd	r25, Y+14	; 0x0e
    496c:	20 e0       	ldi	r18, 0x00	; 0
    496e:	30 e0       	ldi	r19, 0x00	; 0
    4970:	40 e2       	ldi	r20, 0x20	; 32
    4972:	51 e4       	ldi	r21, 0x41	; 65
    4974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4978:	dc 01       	movw	r26, r24
    497a:	cb 01       	movw	r24, r22
    497c:	bc 01       	movw	r22, r24
    497e:	cd 01       	movw	r24, r26
    4980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4984:	dc 01       	movw	r26, r24
    4986:	cb 01       	movw	r24, r22
    4988:	9e 83       	std	Y+6, r25	; 0x06
    498a:	8d 83       	std	Y+5, r24	; 0x05
    498c:	0f c0       	rjmp	.+30     	; 0x49ac <UART_voidSendString+0xe4>
    498e:	88 ec       	ldi	r24, 0xC8	; 200
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	9c 83       	std	Y+4, r25	; 0x04
    4994:	8b 83       	std	Y+3, r24	; 0x03
    4996:	8b 81       	ldd	r24, Y+3	; 0x03
    4998:	9c 81       	ldd	r25, Y+4	; 0x04
    499a:	01 97       	sbiw	r24, 0x01	; 1
    499c:	f1 f7       	brne	.-4      	; 0x499a <UART_voidSendString+0xd2>
    499e:	9c 83       	std	Y+4, r25	; 0x04
    49a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49a2:	8d 81       	ldd	r24, Y+5	; 0x05
    49a4:	9e 81       	ldd	r25, Y+6	; 0x06
    49a6:	01 97       	sbiw	r24, 0x01	; 1
    49a8:	9e 83       	std	Y+6, r25	; 0x06
    49aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49ac:	8d 81       	ldd	r24, Y+5	; 0x05
    49ae:	9e 81       	ldd	r25, Y+6	; 0x06
    49b0:	00 97       	sbiw	r24, 0x00	; 0
    49b2:	69 f7       	brne	.-38     	; 0x498e <UART_voidSendString+0xc6>
    49b4:	14 c0       	rjmp	.+40     	; 0x49de <UART_voidSendString+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49b6:	6f 81       	ldd	r22, Y+7	; 0x07
    49b8:	78 85       	ldd	r23, Y+8	; 0x08
    49ba:	89 85       	ldd	r24, Y+9	; 0x09
    49bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    49be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49c2:	dc 01       	movw	r26, r24
    49c4:	cb 01       	movw	r24, r22
    49c6:	9e 83       	std	Y+6, r25	; 0x06
    49c8:	8d 83       	std	Y+5, r24	; 0x05
    49ca:	8d 81       	ldd	r24, Y+5	; 0x05
    49cc:	9e 81       	ldd	r25, Y+6	; 0x06
    49ce:	9a 83       	std	Y+2, r25	; 0x02
    49d0:	89 83       	std	Y+1, r24	; 0x01
    49d2:	89 81       	ldd	r24, Y+1	; 0x01
    49d4:	9a 81       	ldd	r25, Y+2	; 0x02
    49d6:	01 97       	sbiw	r24, 0x01	; 1
    49d8:	f1 f7       	brne	.-4      	; 0x49d6 <UART_voidSendString+0x10e>
    49da:	9a 83       	std	Y+2, r25	; 0x02
    49dc:	89 83       	std	Y+1, r24	; 0x01
    while((0==GET_BIT(UCSRA,UCSRA_UDRE)));
    UDR = Copy_u8Char;
}
void UART_voidSendString(u8  *Copy_pu8String)
{
	for(u8 Local_u8Counter=0; Copy_pu8String[Local_u8Counter] != '\0' ; Local_u8Counter++)
    49de:	8f 85       	ldd	r24, Y+15	; 0x0f
    49e0:	8f 5f       	subi	r24, 0xFF	; 255
    49e2:	8f 87       	std	Y+15, r24	; 0x0f
    49e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    49e6:	28 2f       	mov	r18, r24
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	88 89       	ldd	r24, Y+16	; 0x10
    49ec:	99 89       	ldd	r25, Y+17	; 0x11
    49ee:	fc 01       	movw	r30, r24
    49f0:	e2 0f       	add	r30, r18
    49f2:	f3 1f       	adc	r31, r19
    49f4:	80 81       	ld	r24, Z
    49f6:	88 23       	and	r24, r24
    49f8:	09 f0       	breq	.+2      	; 0x49fc <UART_voidSendString+0x134>
    49fa:	74 cf       	rjmp	.-280    	; 0x48e4 <UART_voidSendString+0x1c>
	{
		  UART_voidSendChar(Copy_pu8String[Local_u8Counter]);
		  _delay_ms(1);
	}

}
    49fc:	61 96       	adiw	r28, 0x11	; 17
    49fe:	0f b6       	in	r0, 0x3f	; 63
    4a00:	f8 94       	cli
    4a02:	de bf       	out	0x3e, r29	; 62
    4a04:	0f be       	out	0x3f, r0	; 63
    4a06:	cd bf       	out	0x3d, r28	; 61
    4a08:	cf 91       	pop	r28
    4a0a:	df 91       	pop	r29
    4a0c:	08 95       	ret

00004a0e <UART_voidReceiveChar>:

u8 UART_voidReceiveChar(void)
{
    4a0e:	df 93       	push	r29
    4a10:	cf 93       	push	r28
    4a12:	cd b7       	in	r28, 0x3d	; 61
    4a14:	de b7       	in	r29, 0x3e	; 62
	/*RXC flag is set when the UART receive data so  wait until this flag is set to one
	and it will cleared by hardware when u read the data*/

	while((0==GET_BIT(UCSRA,UCSRA_RXC)));
    4a16:	eb e2       	ldi	r30, 0x2B	; 43
    4a18:	f0 e0       	ldi	r31, 0x00	; 0
    4a1a:	80 81       	ld	r24, Z
    4a1c:	88 23       	and	r24, r24
    4a1e:	dc f7       	brge	.-10     	; 0x4a16 <UART_voidReceiveChar+0x8>
	return UDR;
    4a20:	ec e2       	ldi	r30, 0x2C	; 44
    4a22:	f0 e0       	ldi	r31, 0x00	; 0
    4a24:	80 81       	ld	r24, Z
}
    4a26:	cf 91       	pop	r28
    4a28:	df 91       	pop	r29
    4a2a:	08 95       	ret

00004a2c <UART_voidRX_InterruptEnable>:

void UART_voidRX_InterruptEnable(void)
{
    4a2c:	df 93       	push	r29
    4a2e:	cf 93       	push	r28
    4a30:	cd b7       	in	r28, 0x3d	; 61
    4a32:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,UCSRB_RXCIE);
    4a34:	aa e2       	ldi	r26, 0x2A	; 42
    4a36:	b0 e0       	ldi	r27, 0x00	; 0
    4a38:	ea e2       	ldi	r30, 0x2A	; 42
    4a3a:	f0 e0       	ldi	r31, 0x00	; 0
    4a3c:	80 81       	ld	r24, Z
    4a3e:	80 68       	ori	r24, 0x80	; 128
    4a40:	8c 93       	st	X, r24
}
    4a42:	cf 91       	pop	r28
    4a44:	df 91       	pop	r29
    4a46:	08 95       	ret

00004a48 <UART_voidRX_InterruptDisable>:

void UART_voidRX_InterruptDisable(void)
{
    4a48:	df 93       	push	r29
    4a4a:	cf 93       	push	r28
    4a4c:	cd b7       	in	r28, 0x3d	; 61
    4a4e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,UCSRB_RXCIE);
    4a50:	aa e2       	ldi	r26, 0x2A	; 42
    4a52:	b0 e0       	ldi	r27, 0x00	; 0
    4a54:	ea e2       	ldi	r30, 0x2A	; 42
    4a56:	f0 e0       	ldi	r31, 0x00	; 0
    4a58:	80 81       	ld	r24, Z
    4a5a:	8f 77       	andi	r24, 0x7F	; 127
    4a5c:	8c 93       	st	X, r24
}
    4a5e:	cf 91       	pop	r28
    4a60:	df 91       	pop	r29
    4a62:	08 95       	ret

00004a64 <UART_voidTX_InterruptEnable>:

void UART_voidTX_InterruptEnable(void)
{
    4a64:	df 93       	push	r29
    4a66:	cf 93       	push	r28
    4a68:	cd b7       	in	r28, 0x3d	; 61
    4a6a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,UCSRB_TXCIE);
    4a6c:	aa e2       	ldi	r26, 0x2A	; 42
    4a6e:	b0 e0       	ldi	r27, 0x00	; 0
    4a70:	ea e2       	ldi	r30, 0x2A	; 42
    4a72:	f0 e0       	ldi	r31, 0x00	; 0
    4a74:	80 81       	ld	r24, Z
    4a76:	80 64       	ori	r24, 0x40	; 64
    4a78:	8c 93       	st	X, r24
}
    4a7a:	cf 91       	pop	r28
    4a7c:	df 91       	pop	r29
    4a7e:	08 95       	ret

00004a80 <UART_voidTX_InterruptDisable>:

void UART_voidTX_InterruptDisable(void)
{
    4a80:	df 93       	push	r29
    4a82:	cf 93       	push	r28
    4a84:	cd b7       	in	r28, 0x3d	; 61
    4a86:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,UCSRB_TXCIE);
    4a88:	aa e2       	ldi	r26, 0x2A	; 42
    4a8a:	b0 e0       	ldi	r27, 0x00	; 0
    4a8c:	ea e2       	ldi	r30, 0x2A	; 42
    4a8e:	f0 e0       	ldi	r31, 0x00	; 0
    4a90:	80 81       	ld	r24, Z
    4a92:	8f 7b       	andi	r24, 0xBF	; 191
    4a94:	8c 93       	st	X, r24
}
    4a96:	cf 91       	pop	r28
    4a98:	df 91       	pop	r29
    4a9a:	08 95       	ret

00004a9c <UART_voidRX_SetCallBack>:

void UART_voidRX_SetCallBack(void (*LocalFptr)(void))
{
    4a9c:	df 93       	push	r29
    4a9e:	cf 93       	push	r28
    4aa0:	00 d0       	rcall	.+0      	; 0x4aa2 <UART_voidRX_SetCallBack+0x6>
    4aa2:	cd b7       	in	r28, 0x3d	; 61
    4aa4:	de b7       	in	r29, 0x3e	; 62
    4aa6:	9a 83       	std	Y+2, r25	; 0x02
    4aa8:	89 83       	std	Y+1, r24	; 0x01
	UART_RX_Fptr = LocalFptr;
    4aaa:	89 81       	ldd	r24, Y+1	; 0x01
    4aac:	9a 81       	ldd	r25, Y+2	; 0x02
    4aae:	90 93 a9 01 	sts	0x01A9, r25
    4ab2:	80 93 a8 01 	sts	0x01A8, r24
}
    4ab6:	0f 90       	pop	r0
    4ab8:	0f 90       	pop	r0
    4aba:	cf 91       	pop	r28
    4abc:	df 91       	pop	r29
    4abe:	08 95       	ret

00004ac0 <__vector_11>:

void __vector_11(void) __attribute__((signal , used));
void __vector_11(void)
{
    4ac0:	1f 92       	push	r1
    4ac2:	0f 92       	push	r0
    4ac4:	0f b6       	in	r0, 0x3f	; 63
    4ac6:	0f 92       	push	r0
    4ac8:	11 24       	eor	r1, r1
    4aca:	2f 93       	push	r18
    4acc:	3f 93       	push	r19
    4ace:	4f 93       	push	r20
    4ad0:	5f 93       	push	r21
    4ad2:	6f 93       	push	r22
    4ad4:	7f 93       	push	r23
    4ad6:	8f 93       	push	r24
    4ad8:	9f 93       	push	r25
    4ada:	af 93       	push	r26
    4adc:	bf 93       	push	r27
    4ade:	ef 93       	push	r30
    4ae0:	ff 93       	push	r31
    4ae2:	df 93       	push	r29
    4ae4:	cf 93       	push	r28
    4ae6:	cd b7       	in	r28, 0x3d	; 61
    4ae8:	de b7       	in	r29, 0x3e	; 62
	UART_RX_Fptr();
    4aea:	e0 91 a8 01 	lds	r30, 0x01A8
    4aee:	f0 91 a9 01 	lds	r31, 0x01A9
    4af2:	09 95       	icall
}
    4af4:	cf 91       	pop	r28
    4af6:	df 91       	pop	r29
    4af8:	ff 91       	pop	r31
    4afa:	ef 91       	pop	r30
    4afc:	bf 91       	pop	r27
    4afe:	af 91       	pop	r26
    4b00:	9f 91       	pop	r25
    4b02:	8f 91       	pop	r24
    4b04:	7f 91       	pop	r23
    4b06:	6f 91       	pop	r22
    4b08:	5f 91       	pop	r21
    4b0a:	4f 91       	pop	r20
    4b0c:	3f 91       	pop	r19
    4b0e:	2f 91       	pop	r18
    4b10:	0f 90       	pop	r0
    4b12:	0f be       	out	0x3f, r0	; 63
    4b14:	0f 90       	pop	r0
    4b16:	1f 90       	pop	r1
    4b18:	18 95       	reti

00004b1a <UART_voidTX_SetCallBack>:

void UART_voidTX_SetCallBack(void (*LocalFptr)(void))
{
    4b1a:	df 93       	push	r29
    4b1c:	cf 93       	push	r28
    4b1e:	00 d0       	rcall	.+0      	; 0x4b20 <UART_voidTX_SetCallBack+0x6>
    4b20:	cd b7       	in	r28, 0x3d	; 61
    4b22:	de b7       	in	r29, 0x3e	; 62
    4b24:	9a 83       	std	Y+2, r25	; 0x02
    4b26:	89 83       	std	Y+1, r24	; 0x01
	UART_TX_Fptr = LocalFptr;
    4b28:	89 81       	ldd	r24, Y+1	; 0x01
    4b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b2c:	90 93 ab 01 	sts	0x01AB, r25
    4b30:	80 93 aa 01 	sts	0x01AA, r24
}
    4b34:	0f 90       	pop	r0
    4b36:	0f 90       	pop	r0
    4b38:	cf 91       	pop	r28
    4b3a:	df 91       	pop	r29
    4b3c:	08 95       	ret

00004b3e <UART_voidWriteDecimalNumber>:

void UART_voidWriteDecimalNumber(u16 Copy_u32Number)
{
    4b3e:	df 93       	push	r29
    4b40:	cf 93       	push	r28
    4b42:	00 d0       	rcall	.+0      	; 0x4b44 <UART_voidWriteDecimalNumber+0x6>
    4b44:	00 d0       	rcall	.+0      	; 0x4b46 <UART_voidWriteDecimalNumber+0x8>
    4b46:	cd b7       	in	r28, 0x3d	; 61
    4b48:	de b7       	in	r29, 0x3e	; 62
    4b4a:	9c 83       	std	Y+4, r25	; 0x04
    4b4c:	8b 83       	std	Y+3, r24	; 0x03

	u16 Local_u8Reversed = 1;
    4b4e:	81 e0       	ldi	r24, 0x01	; 1
    4b50:	90 e0       	ldi	r25, 0x00	; 0
    4b52:	9a 83       	std	Y+2, r25	; 0x02
    4b54:	89 83       	std	Y+1, r24	; 0x01

	if(0 == Copy_u32Number)
    4b56:	8b 81       	ldd	r24, Y+3	; 0x03
    4b58:	9c 81       	ldd	r25, Y+4	; 0x04
    4b5a:	00 97       	sbiw	r24, 0x00	; 0
    4b5c:	31 f5       	brne	.+76     	; 0x4baa <UART_voidWriteDecimalNumber+0x6c>
	{
		UART_voidSendChar('0');
    4b5e:	80 e3       	ldi	r24, 0x30	; 48
    4b60:	0e 94 4a 24 	call	0x4894	; 0x4894 <UART_voidSendChar>
    4b64:	22 c0       	rjmp	.+68     	; 0x4baa <UART_voidWriteDecimalNumber+0x6c>
	}
	while(0 != Copy_u32Number)
	{
		Local_u8Reversed = ((Local_u8Reversed * 10) + (Copy_u32Number % 10));
    4b66:	89 81       	ldd	r24, Y+1	; 0x01
    4b68:	9a 81       	ldd	r25, Y+2	; 0x02
    4b6a:	9c 01       	movw	r18, r24
    4b6c:	22 0f       	add	r18, r18
    4b6e:	33 1f       	adc	r19, r19
    4b70:	c9 01       	movw	r24, r18
    4b72:	88 0f       	add	r24, r24
    4b74:	99 1f       	adc	r25, r25
    4b76:	88 0f       	add	r24, r24
    4b78:	99 1f       	adc	r25, r25
    4b7a:	f9 01       	movw	r30, r18
    4b7c:	e8 0f       	add	r30, r24
    4b7e:	f9 1f       	adc	r31, r25
    4b80:	8b 81       	ldd	r24, Y+3	; 0x03
    4b82:	9c 81       	ldd	r25, Y+4	; 0x04
    4b84:	2a e0       	ldi	r18, 0x0A	; 10
    4b86:	30 e0       	ldi	r19, 0x00	; 0
    4b88:	b9 01       	movw	r22, r18
    4b8a:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <__udivmodhi4>
    4b8e:	8e 0f       	add	r24, r30
    4b90:	9f 1f       	adc	r25, r31
    4b92:	9a 83       	std	Y+2, r25	; 0x02
    4b94:	89 83       	std	Y+1, r24	; 0x01
		Copy_u32Number /= 10;
    4b96:	8b 81       	ldd	r24, Y+3	; 0x03
    4b98:	9c 81       	ldd	r25, Y+4	; 0x04
    4b9a:	2a e0       	ldi	r18, 0x0A	; 10
    4b9c:	30 e0       	ldi	r19, 0x00	; 0
    4b9e:	b9 01       	movw	r22, r18
    4ba0:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <__udivmodhi4>
    4ba4:	cb 01       	movw	r24, r22
    4ba6:	9c 83       	std	Y+4, r25	; 0x04
    4ba8:	8b 83       	std	Y+3, r24	; 0x03

	if(0 == Copy_u32Number)
	{
		UART_voidSendChar('0');
	}
	while(0 != Copy_u32Number)
    4baa:	8b 81       	ldd	r24, Y+3	; 0x03
    4bac:	9c 81       	ldd	r25, Y+4	; 0x04
    4bae:	00 97       	sbiw	r24, 0x00	; 0
    4bb0:	d1 f6       	brne	.-76     	; 0x4b66 <UART_voidWriteDecimalNumber+0x28>
    4bb2:	14 c0       	rjmp	.+40     	; 0x4bdc <UART_voidWriteDecimalNumber+0x9e>
		Local_u8Reversed = ((Local_u8Reversed * 10) + (Copy_u32Number % 10));
		Copy_u32Number /= 10;
	}
	while(1 != Local_u8Reversed)
	{
		UART_voidSendChar((Local_u8Reversed % 10 ) + 48);
    4bb4:	89 81       	ldd	r24, Y+1	; 0x01
    4bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    4bb8:	2a e0       	ldi	r18, 0x0A	; 10
    4bba:	30 e0       	ldi	r19, 0x00	; 0
    4bbc:	b9 01       	movw	r22, r18
    4bbe:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <__udivmodhi4>
    4bc2:	80 5d       	subi	r24, 0xD0	; 208
    4bc4:	0e 94 4a 24 	call	0x4894	; 0x4894 <UART_voidSendChar>
		Local_u8Reversed /= 10;
    4bc8:	89 81       	ldd	r24, Y+1	; 0x01
    4bca:	9a 81       	ldd	r25, Y+2	; 0x02
    4bcc:	2a e0       	ldi	r18, 0x0A	; 10
    4bce:	30 e0       	ldi	r19, 0x00	; 0
    4bd0:	b9 01       	movw	r22, r18
    4bd2:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <__udivmodhi4>
    4bd6:	cb 01       	movw	r24, r22
    4bd8:	9a 83       	std	Y+2, r25	; 0x02
    4bda:	89 83       	std	Y+1, r24	; 0x01
	while(0 != Copy_u32Number)
	{
		Local_u8Reversed = ((Local_u8Reversed * 10) + (Copy_u32Number % 10));
		Copy_u32Number /= 10;
	}
	while(1 != Local_u8Reversed)
    4bdc:	89 81       	ldd	r24, Y+1	; 0x01
    4bde:	9a 81       	ldd	r25, Y+2	; 0x02
    4be0:	81 30       	cpi	r24, 0x01	; 1
    4be2:	91 05       	cpc	r25, r1
    4be4:	39 f7       	brne	.-50     	; 0x4bb4 <UART_voidWriteDecimalNumber+0x76>
		Local_u8Reversed /= 10;
	}



}
    4be6:	0f 90       	pop	r0
    4be8:	0f 90       	pop	r0
    4bea:	0f 90       	pop	r0
    4bec:	0f 90       	pop	r0
    4bee:	cf 91       	pop	r28
    4bf0:	df 91       	pop	r29
    4bf2:	08 95       	ret

00004bf4 <UART_u8GetCharBlocking>:

u8 UART_u8GetCharBlocking(void)
{
    4bf4:	df 93       	push	r29
    4bf6:	cf 93       	push	r28
    4bf8:	00 d0       	rcall	.+0      	; 0x4bfa <UART_u8GetCharBlocking+0x6>
    4bfa:	0f 92       	push	r0
    4bfc:	cd b7       	in	r28, 0x3d	; 61
    4bfe:	de b7       	in	r29, 0x3e	; 62
	 u8 Local_u8Char;
	 u16 Counter;
	 while((0==GET_BIT(UCSRA,UCSRA_RXC)));
    4c00:	eb e2       	ldi	r30, 0x2B	; 43
    4c02:	f0 e0       	ldi	r31, 0x00	; 0
    4c04:	80 81       	ld	r24, Z
    4c06:	88 23       	and	r24, r24
    4c08:	dc f7       	brge	.-10     	; 0x4c00 <UART_u8GetCharBlocking+0xc>
	 Local_u8Char=UDR;
    4c0a:	ec e2       	ldi	r30, 0x2C	; 44
    4c0c:	f0 e0       	ldi	r31, 0x00	; 0
    4c0e:	80 81       	ld	r24, Z
    4c10:	8b 83       	std	Y+3, r24	; 0x03
     return Local_u8Char;
    4c12:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4c14:	0f 90       	pop	r0
    4c16:	0f 90       	pop	r0
    4c18:	0f 90       	pop	r0
    4c1a:	cf 91       	pop	r28
    4c1c:	df 91       	pop	r29
    4c1e:	08 95       	ret

00004c20 <UART_u8GetCharNonBlocking>:
u8 UART_u8GetCharNonBlocking(void)
{
    4c20:	df 93       	push	r29
    4c22:	cf 93       	push	r28
    4c24:	00 d0       	rcall	.+0      	; 0x4c26 <UART_u8GetCharNonBlocking+0x6>
    4c26:	0f 92       	push	r0
    4c28:	cd b7       	in	r28, 0x3d	; 61
    4c2a:	de b7       	in	r29, 0x3e	; 62
    4c2c:	05 c0       	rjmp	.+10     	; 0x4c38 <UART_u8GetCharNonBlocking+0x18>
	 u8 Local_u8Char;
	 u16 Local_u16Counter;
	 while((Local_u16Counter<2000)&&(0==GET_BIT(UCSRA,UCSRA_RXC)))
	 {
		 Local_u16Counter++;
    4c2e:	89 81       	ldd	r24, Y+1	; 0x01
    4c30:	9a 81       	ldd	r25, Y+2	; 0x02
    4c32:	01 96       	adiw	r24, 0x01	; 1
    4c34:	9a 83       	std	Y+2, r25	; 0x02
    4c36:	89 83       	std	Y+1, r24	; 0x01
}
u8 UART_u8GetCharNonBlocking(void)
{
	 u8 Local_u8Char;
	 u16 Local_u16Counter;
	 while((Local_u16Counter<2000)&&(0==GET_BIT(UCSRA,UCSRA_RXC)))
    4c38:	89 81       	ldd	r24, Y+1	; 0x01
    4c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c3c:	27 e0       	ldi	r18, 0x07	; 7
    4c3e:	80 3d       	cpi	r24, 0xD0	; 208
    4c40:	92 07       	cpc	r25, r18
    4c42:	28 f4       	brcc	.+10     	; 0x4c4e <UART_u8GetCharNonBlocking+0x2e>
    4c44:	eb e2       	ldi	r30, 0x2B	; 43
    4c46:	f0 e0       	ldi	r31, 0x00	; 0
    4c48:	80 81       	ld	r24, Z
    4c4a:	88 23       	and	r24, r24
    4c4c:	84 f7       	brge	.-32     	; 0x4c2e <UART_u8GetCharNonBlocking+0xe>
	 {
		 Local_u16Counter++;
	 }
	 Local_u8Char=UDR;
    4c4e:	ec e2       	ldi	r30, 0x2C	; 44
    4c50:	f0 e0       	ldi	r31, 0x00	; 0
    4c52:	80 81       	ld	r24, Z
    4c54:	8b 83       	std	Y+3, r24	; 0x03
     return Local_u8Char;
    4c56:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4c58:	0f 90       	pop	r0
    4c5a:	0f 90       	pop	r0
    4c5c:	0f 90       	pop	r0
    4c5e:	cf 91       	pop	r28
    4c60:	df 91       	pop	r29
    4c62:	08 95       	ret

00004c64 <main>:
/* Function Prototype */
void WIFI_voidReceiveMessage(void);

/**************************************** Entry point *******************************************/
void main (void)
{
    4c64:	0f 93       	push	r16
    4c66:	1f 93       	push	r17
    4c68:	df 93       	push	r29
    4c6a:	cf 93       	push	r28
    4c6c:	cd b7       	in	r28, 0x3d	; 61
    4c6e:	de b7       	in	r29, 0x3e	; 62
    4c70:	c5 54       	subi	r28, 0x45	; 69
    4c72:	d0 40       	sbci	r29, 0x00	; 0
    4c74:	0f b6       	in	r0, 0x3f	; 63
    4c76:	f8 94       	cli
    4c78:	de bf       	out	0x3e, r29	; 62
    4c7a:	0f be       	out	0x3f, r0	; 63
    4c7c:	cd bf       	out	0x3d, r28	; 61
	u8 Soil_Moisture,Soil_Moisture_Value;
	u16 Local_u16AnalogLDRValue,Local_u16AnalogTempValue,Local_u16AnalogSoilValue;
	u16 Temperature;

	/* Initialize DIO */
	DIO_voidInit();
    4c7e:	0e 94 10 14 	call	0x2820	; 0x2820 <DIO_voidInit>

	/* Initialize ADC */
	ADC_voidInit();
    4c82:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_voidInit>

	/* Initialize SPI to be master MCU */
	SPI_voidInitMaster();
    4c86:	0e 94 10 1a 	call	0x3420	; 0x3420 <SPI_voidInitMaster>

	/* Initialize UART */
	UART_voidInit();
    4c8a:	0e 94 d8 23 	call	0x47b0	; 0x47b0 <UART_voidInit>

	/* Enable UART receiver interrupt */
	UART_voidRX_InterruptEnable();
    4c8e:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <UART_voidRX_InterruptEnable>

	/* Uart set call back function to interrupt */
	UART_voidRX_SetCallBack(WIFI_voidReceiveMessage);
    4c92:	8e ec       	ldi	r24, 0xCE	; 206
    4c94:	99 e2       	ldi	r25, 0x29	; 41
    4c96:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <UART_voidRX_SetCallBack>

	/* Initialize LCD */
	CLCD_voidInit();
    4c9a:	0e 94 14 12 	call	0x2428	; 0x2428 <CLCD_voidInit>

	/* Enable global interrupt */
	GIE_voidEnable();
    4c9e:	0e 94 63 19 	call	0x32c6	; 0x32c6 <GIE_voidEnable>

	/* Initialize Servo Motors */
	SERVO_voidTimer1InitOCR1AB();
    4ca2:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <SERVO_voidTimer1InitOCR1AB>

	/* Initialize angle to be 90 */
	SERVO_voidTimer1ServoSetAngleOCR1A(90);
    4ca6:	6a e5       	ldi	r22, 0x5A	; 90
    4ca8:	70 e0       	ldi	r23, 0x00	; 0
    4caa:	80 e0       	ldi	r24, 0x00	; 0
    4cac:	90 e0       	ldi	r25, 0x00	; 0
    4cae:	0e 94 05 1b 	call	0x360a	; 0x360a <SERVO_voidTimer1ServoSetAngleOCR1A>
	SERVO_voidTimer1ServoSetAngleOCR1B(90);
    4cb2:	6a e5       	ldi	r22, 0x5A	; 90
    4cb4:	70 e0       	ldi	r23, 0x00	; 0
    4cb6:	80 e0       	ldi	r24, 0x00	; 0
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <SERVO_voidTimer1ServoSetAngleOCR1B>
	{


		//********************************Flame_Sensor*********************************//

		DIO_u8GetPinValue(DIO_u8PORTA,DIO_u8PIN0,&Local_u8DigitalFireValue);
    4cbe:	9e 01       	movw	r18, r28
    4cc0:	2d 5b       	subi	r18, 0xBD	; 189
    4cc2:	3f 4f       	sbci	r19, 0xFF	; 255
    4cc4:	80 e0       	ldi	r24, 0x00	; 0
    4cc6:	60 e0       	ldi	r22, 0x00	; 0
    4cc8:	a9 01       	movw	r20, r18
    4cca:	0e 94 6e 18 	call	0x30dc	; 0x30dc <DIO_u8GetPinValue>

		if (Local_u8DigitalFireValue == 1)
    4cce:	fe 01       	movw	r30, r28
    4cd0:	ed 5b       	subi	r30, 0xBD	; 189
    4cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd4:	80 81       	ld	r24, Z
    4cd6:	81 30       	cpi	r24, 0x01	; 1
    4cd8:	09 f0       	breq	.+2      	; 0x4cdc <main+0x78>
    4cda:	f7 c0       	rjmp	.+494    	; 0x4eca <main+0x266>
		{
			DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN6,DIO_u8PIN_HIGH);
    4cdc:	83 e0       	ldi	r24, 0x03	; 3
    4cde:	66 e0       	ldi	r22, 0x06	; 6
    4ce0:	41 e0       	ldi	r20, 0x01	; 1
    4ce2:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
			SPI_voidTransferByte('Z');
    4ce6:	8a e5       	ldi	r24, 0x5A	; 90
    4ce8:	90 e0       	ldi	r25, 0x00	; 0
    4cea:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <SPI_voidTransferByte>
    4cee:	80 e0       	ldi	r24, 0x00	; 0
    4cf0:	90 e0       	ldi	r25, 0x00	; 0
    4cf2:	a6 e1       	ldi	r26, 0x16	; 22
    4cf4:	b3 e4       	ldi	r27, 0x43	; 67
    4cf6:	8d ab       	std	Y+53, r24	; 0x35
    4cf8:	9e ab       	std	Y+54, r25	; 0x36
    4cfa:	af ab       	std	Y+55, r26	; 0x37
    4cfc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cfe:	6d a9       	ldd	r22, Y+53	; 0x35
    4d00:	7e a9       	ldd	r23, Y+54	; 0x36
    4d02:	8f a9       	ldd	r24, Y+55	; 0x37
    4d04:	98 ad       	ldd	r25, Y+56	; 0x38
    4d06:	20 e0       	ldi	r18, 0x00	; 0
    4d08:	30 e0       	ldi	r19, 0x00	; 0
    4d0a:	4a ef       	ldi	r20, 0xFA	; 250
    4d0c:	54 e4       	ldi	r21, 0x44	; 68
    4d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d12:	dc 01       	movw	r26, r24
    4d14:	cb 01       	movw	r24, r22
    4d16:	89 ab       	std	Y+49, r24	; 0x31
    4d18:	9a ab       	std	Y+50, r25	; 0x32
    4d1a:	ab ab       	std	Y+51, r26	; 0x33
    4d1c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4d1e:	69 a9       	ldd	r22, Y+49	; 0x31
    4d20:	7a a9       	ldd	r23, Y+50	; 0x32
    4d22:	8b a9       	ldd	r24, Y+51	; 0x33
    4d24:	9c a9       	ldd	r25, Y+52	; 0x34
    4d26:	20 e0       	ldi	r18, 0x00	; 0
    4d28:	30 e0       	ldi	r19, 0x00	; 0
    4d2a:	40 e8       	ldi	r20, 0x80	; 128
    4d2c:	5f e3       	ldi	r21, 0x3F	; 63
    4d2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d32:	88 23       	and	r24, r24
    4d34:	2c f4       	brge	.+10     	; 0x4d40 <main+0xdc>
		__ticks = 1;
    4d36:	81 e0       	ldi	r24, 0x01	; 1
    4d38:	90 e0       	ldi	r25, 0x00	; 0
    4d3a:	98 ab       	std	Y+48, r25	; 0x30
    4d3c:	8f a7       	std	Y+47, r24	; 0x2f
    4d3e:	3f c0       	rjmp	.+126    	; 0x4dbe <main+0x15a>
	else if (__tmp > 65535)
    4d40:	69 a9       	ldd	r22, Y+49	; 0x31
    4d42:	7a a9       	ldd	r23, Y+50	; 0x32
    4d44:	8b a9       	ldd	r24, Y+51	; 0x33
    4d46:	9c a9       	ldd	r25, Y+52	; 0x34
    4d48:	20 e0       	ldi	r18, 0x00	; 0
    4d4a:	3f ef       	ldi	r19, 0xFF	; 255
    4d4c:	4f e7       	ldi	r20, 0x7F	; 127
    4d4e:	57 e4       	ldi	r21, 0x47	; 71
    4d50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d54:	18 16       	cp	r1, r24
    4d56:	4c f5       	brge	.+82     	; 0x4daa <main+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d58:	6d a9       	ldd	r22, Y+53	; 0x35
    4d5a:	7e a9       	ldd	r23, Y+54	; 0x36
    4d5c:	8f a9       	ldd	r24, Y+55	; 0x37
    4d5e:	98 ad       	ldd	r25, Y+56	; 0x38
    4d60:	20 e0       	ldi	r18, 0x00	; 0
    4d62:	30 e0       	ldi	r19, 0x00	; 0
    4d64:	40 e2       	ldi	r20, 0x20	; 32
    4d66:	51 e4       	ldi	r21, 0x41	; 65
    4d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d6c:	dc 01       	movw	r26, r24
    4d6e:	cb 01       	movw	r24, r22
    4d70:	bc 01       	movw	r22, r24
    4d72:	cd 01       	movw	r24, r26
    4d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d78:	dc 01       	movw	r26, r24
    4d7a:	cb 01       	movw	r24, r22
    4d7c:	98 ab       	std	Y+48, r25	; 0x30
    4d7e:	8f a7       	std	Y+47, r24	; 0x2f
    4d80:	0f c0       	rjmp	.+30     	; 0x4da0 <main+0x13c>
    4d82:	88 ec       	ldi	r24, 0xC8	; 200
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	9e a7       	std	Y+46, r25	; 0x2e
    4d88:	8d a7       	std	Y+45, r24	; 0x2d
    4d8a:	8d a5       	ldd	r24, Y+45	; 0x2d
    4d8c:	9e a5       	ldd	r25, Y+46	; 0x2e
    4d8e:	01 97       	sbiw	r24, 0x01	; 1
    4d90:	f1 f7       	brne	.-4      	; 0x4d8e <main+0x12a>
    4d92:	9e a7       	std	Y+46, r25	; 0x2e
    4d94:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d96:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d98:	98 a9       	ldd	r25, Y+48	; 0x30
    4d9a:	01 97       	sbiw	r24, 0x01	; 1
    4d9c:	98 ab       	std	Y+48, r25	; 0x30
    4d9e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4da0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4da2:	98 a9       	ldd	r25, Y+48	; 0x30
    4da4:	00 97       	sbiw	r24, 0x00	; 0
    4da6:	69 f7       	brne	.-38     	; 0x4d82 <main+0x11e>
    4da8:	14 c0       	rjmp	.+40     	; 0x4dd2 <main+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4daa:	69 a9       	ldd	r22, Y+49	; 0x31
    4dac:	7a a9       	ldd	r23, Y+50	; 0x32
    4dae:	8b a9       	ldd	r24, Y+51	; 0x33
    4db0:	9c a9       	ldd	r25, Y+52	; 0x34
    4db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4db6:	dc 01       	movw	r26, r24
    4db8:	cb 01       	movw	r24, r22
    4dba:	98 ab       	std	Y+48, r25	; 0x30
    4dbc:	8f a7       	std	Y+47, r24	; 0x2f
    4dbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    4dc0:	98 a9       	ldd	r25, Y+48	; 0x30
    4dc2:	9c a7       	std	Y+44, r25	; 0x2c
    4dc4:	8b a7       	std	Y+43, r24	; 0x2b
    4dc6:	8b a5       	ldd	r24, Y+43	; 0x2b
    4dc8:	9c a5       	ldd	r25, Y+44	; 0x2c
    4dca:	01 97       	sbiw	r24, 0x01	; 1
    4dcc:	f1 f7       	brne	.-4      	; 0x4dca <main+0x166>
    4dce:	9c a7       	std	Y+44, r25	; 0x2c
    4dd0:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(150);
			DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN6,DIO_u8PIN_LOW);
    4dd2:	83 e0       	ldi	r24, 0x03	; 3
    4dd4:	66 e0       	ldi	r22, 0x06	; 6
    4dd6:	40 e0       	ldi	r20, 0x00	; 0
    4dd8:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
			SPI_voidTransferByte('z');
    4ddc:	8a e7       	ldi	r24, 0x7A	; 122
    4dde:	90 e0       	ldi	r25, 0x00	; 0
    4de0:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <SPI_voidTransferByte>
    4de4:	80 e0       	ldi	r24, 0x00	; 0
    4de6:	90 e0       	ldi	r25, 0x00	; 0
    4de8:	a6 e1       	ldi	r26, 0x16	; 22
    4dea:	b3 e4       	ldi	r27, 0x43	; 67
    4dec:	8f a3       	std	Y+39, r24	; 0x27
    4dee:	98 a7       	std	Y+40, r25	; 0x28
    4df0:	a9 a7       	std	Y+41, r26	; 0x29
    4df2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4df4:	6f a1       	ldd	r22, Y+39	; 0x27
    4df6:	78 a5       	ldd	r23, Y+40	; 0x28
    4df8:	89 a5       	ldd	r24, Y+41	; 0x29
    4dfa:	9a a5       	ldd	r25, Y+42	; 0x2a
    4dfc:	20 e0       	ldi	r18, 0x00	; 0
    4dfe:	30 e0       	ldi	r19, 0x00	; 0
    4e00:	4a ef       	ldi	r20, 0xFA	; 250
    4e02:	54 e4       	ldi	r21, 0x44	; 68
    4e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e08:	dc 01       	movw	r26, r24
    4e0a:	cb 01       	movw	r24, r22
    4e0c:	8b a3       	std	Y+35, r24	; 0x23
    4e0e:	9c a3       	std	Y+36, r25	; 0x24
    4e10:	ad a3       	std	Y+37, r26	; 0x25
    4e12:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4e14:	6b a1       	ldd	r22, Y+35	; 0x23
    4e16:	7c a1       	ldd	r23, Y+36	; 0x24
    4e18:	8d a1       	ldd	r24, Y+37	; 0x25
    4e1a:	9e a1       	ldd	r25, Y+38	; 0x26
    4e1c:	20 e0       	ldi	r18, 0x00	; 0
    4e1e:	30 e0       	ldi	r19, 0x00	; 0
    4e20:	40 e8       	ldi	r20, 0x80	; 128
    4e22:	5f e3       	ldi	r21, 0x3F	; 63
    4e24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e28:	88 23       	and	r24, r24
    4e2a:	2c f4       	brge	.+10     	; 0x4e36 <main+0x1d2>
		__ticks = 1;
    4e2c:	81 e0       	ldi	r24, 0x01	; 1
    4e2e:	90 e0       	ldi	r25, 0x00	; 0
    4e30:	9a a3       	std	Y+34, r25	; 0x22
    4e32:	89 a3       	std	Y+33, r24	; 0x21
    4e34:	3f c0       	rjmp	.+126    	; 0x4eb4 <main+0x250>
	else if (__tmp > 65535)
    4e36:	6b a1       	ldd	r22, Y+35	; 0x23
    4e38:	7c a1       	ldd	r23, Y+36	; 0x24
    4e3a:	8d a1       	ldd	r24, Y+37	; 0x25
    4e3c:	9e a1       	ldd	r25, Y+38	; 0x26
    4e3e:	20 e0       	ldi	r18, 0x00	; 0
    4e40:	3f ef       	ldi	r19, 0xFF	; 255
    4e42:	4f e7       	ldi	r20, 0x7F	; 127
    4e44:	57 e4       	ldi	r21, 0x47	; 71
    4e46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e4a:	18 16       	cp	r1, r24
    4e4c:	4c f5       	brge	.+82     	; 0x4ea0 <main+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e4e:	6f a1       	ldd	r22, Y+39	; 0x27
    4e50:	78 a5       	ldd	r23, Y+40	; 0x28
    4e52:	89 a5       	ldd	r24, Y+41	; 0x29
    4e54:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e56:	20 e0       	ldi	r18, 0x00	; 0
    4e58:	30 e0       	ldi	r19, 0x00	; 0
    4e5a:	40 e2       	ldi	r20, 0x20	; 32
    4e5c:	51 e4       	ldi	r21, 0x41	; 65
    4e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e62:	dc 01       	movw	r26, r24
    4e64:	cb 01       	movw	r24, r22
    4e66:	bc 01       	movw	r22, r24
    4e68:	cd 01       	movw	r24, r26
    4e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e6e:	dc 01       	movw	r26, r24
    4e70:	cb 01       	movw	r24, r22
    4e72:	9a a3       	std	Y+34, r25	; 0x22
    4e74:	89 a3       	std	Y+33, r24	; 0x21
    4e76:	0f c0       	rjmp	.+30     	; 0x4e96 <main+0x232>
    4e78:	88 ec       	ldi	r24, 0xC8	; 200
    4e7a:	90 e0       	ldi	r25, 0x00	; 0
    4e7c:	98 a3       	std	Y+32, r25	; 0x20
    4e7e:	8f 8f       	std	Y+31, r24	; 0x1f
    4e80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4e82:	98 a1       	ldd	r25, Y+32	; 0x20
    4e84:	01 97       	sbiw	r24, 0x01	; 1
    4e86:	f1 f7       	brne	.-4      	; 0x4e84 <main+0x220>
    4e88:	98 a3       	std	Y+32, r25	; 0x20
    4e8a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e8c:	89 a1       	ldd	r24, Y+33	; 0x21
    4e8e:	9a a1       	ldd	r25, Y+34	; 0x22
    4e90:	01 97       	sbiw	r24, 0x01	; 1
    4e92:	9a a3       	std	Y+34, r25	; 0x22
    4e94:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e96:	89 a1       	ldd	r24, Y+33	; 0x21
    4e98:	9a a1       	ldd	r25, Y+34	; 0x22
    4e9a:	00 97       	sbiw	r24, 0x00	; 0
    4e9c:	69 f7       	brne	.-38     	; 0x4e78 <main+0x214>
    4e9e:	1a c0       	rjmp	.+52     	; 0x4ed4 <main+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ea0:	6b a1       	ldd	r22, Y+35	; 0x23
    4ea2:	7c a1       	ldd	r23, Y+36	; 0x24
    4ea4:	8d a1       	ldd	r24, Y+37	; 0x25
    4ea6:	9e a1       	ldd	r25, Y+38	; 0x26
    4ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eac:	dc 01       	movw	r26, r24
    4eae:	cb 01       	movw	r24, r22
    4eb0:	9a a3       	std	Y+34, r25	; 0x22
    4eb2:	89 a3       	std	Y+33, r24	; 0x21
    4eb4:	89 a1       	ldd	r24, Y+33	; 0x21
    4eb6:	9a a1       	ldd	r25, Y+34	; 0x22
    4eb8:	9e 8f       	std	Y+30, r25	; 0x1e
    4eba:	8d 8f       	std	Y+29, r24	; 0x1d
    4ebc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ebe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ec0:	01 97       	sbiw	r24, 0x01	; 1
    4ec2:	f1 f7       	brne	.-4      	; 0x4ec0 <main+0x25c>
    4ec4:	9e 8f       	std	Y+30, r25	; 0x1e
    4ec6:	8d 8f       	std	Y+29, r24	; 0x1d
    4ec8:	05 c0       	rjmp	.+10     	; 0x4ed4 <main+0x270>
			_delay_ms(150);
		}
		else
		{
			DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN6,DIO_u8PIN_LOW);
    4eca:	83 e0       	ldi	r24, 0x03	; 3
    4ecc:	66 e0       	ldi	r22, 0x06	; 6
    4ece:	40 e0       	ldi	r20, 0x00	; 0
    4ed0:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
		}

		//********************************GAS_Sensor*********************************//

		DIO_u8GetPinValue(DIO_u8PORTA,DIO_u8PIN1,&Local_u8DigitalGasValue);
    4ed4:	9e 01       	movw	r18, r28
    4ed6:	2c 5b       	subi	r18, 0xBC	; 188
    4ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    4eda:	80 e0       	ldi	r24, 0x00	; 0
    4edc:	61 e0       	ldi	r22, 0x01	; 1
    4ede:	a9 01       	movw	r20, r18
    4ee0:	0e 94 6e 18 	call	0x30dc	; 0x30dc <DIO_u8GetPinValue>

		if (Local_u8DigitalGasValue == 0)
    4ee4:	fe 01       	movw	r30, r28
    4ee6:	ec 5b       	subi	r30, 0xBC	; 188
    4ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eea:	80 81       	ld	r24, Z
    4eec:	88 23       	and	r24, r24
    4eee:	09 f0       	breq	.+2      	; 0x4ef2 <main+0x28e>
    4ef0:	f7 c0       	rjmp	.+494    	; 0x50e0 <main+0x47c>
		{
			DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN6,DIO_u8PIN_HIGH);
    4ef2:	83 e0       	ldi	r24, 0x03	; 3
    4ef4:	66 e0       	ldi	r22, 0x06	; 6
    4ef6:	41 e0       	ldi	r20, 0x01	; 1
    4ef8:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
			SPI_voidTransferByte('Z');
    4efc:	8a e5       	ldi	r24, 0x5A	; 90
    4efe:	90 e0       	ldi	r25, 0x00	; 0
    4f00:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <SPI_voidTransferByte>
    4f04:	80 e0       	ldi	r24, 0x00	; 0
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	a8 e4       	ldi	r26, 0x48	; 72
    4f0a:	b3 e4       	ldi	r27, 0x43	; 67
    4f0c:	89 8f       	std	Y+25, r24	; 0x19
    4f0e:	9a 8f       	std	Y+26, r25	; 0x1a
    4f10:	ab 8f       	std	Y+27, r26	; 0x1b
    4f12:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f14:	69 8d       	ldd	r22, Y+25	; 0x19
    4f16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f1c:	20 e0       	ldi	r18, 0x00	; 0
    4f1e:	30 e0       	ldi	r19, 0x00	; 0
    4f20:	4a ef       	ldi	r20, 0xFA	; 250
    4f22:	54 e4       	ldi	r21, 0x44	; 68
    4f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f28:	dc 01       	movw	r26, r24
    4f2a:	cb 01       	movw	r24, r22
    4f2c:	8d 8b       	std	Y+21, r24	; 0x15
    4f2e:	9e 8b       	std	Y+22, r25	; 0x16
    4f30:	af 8b       	std	Y+23, r26	; 0x17
    4f32:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4f34:	6d 89       	ldd	r22, Y+21	; 0x15
    4f36:	7e 89       	ldd	r23, Y+22	; 0x16
    4f38:	8f 89       	ldd	r24, Y+23	; 0x17
    4f3a:	98 8d       	ldd	r25, Y+24	; 0x18
    4f3c:	20 e0       	ldi	r18, 0x00	; 0
    4f3e:	30 e0       	ldi	r19, 0x00	; 0
    4f40:	40 e8       	ldi	r20, 0x80	; 128
    4f42:	5f e3       	ldi	r21, 0x3F	; 63
    4f44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f48:	88 23       	and	r24, r24
    4f4a:	2c f4       	brge	.+10     	; 0x4f56 <main+0x2f2>
		__ticks = 1;
    4f4c:	81 e0       	ldi	r24, 0x01	; 1
    4f4e:	90 e0       	ldi	r25, 0x00	; 0
    4f50:	9c 8b       	std	Y+20, r25	; 0x14
    4f52:	8b 8b       	std	Y+19, r24	; 0x13
    4f54:	3f c0       	rjmp	.+126    	; 0x4fd4 <main+0x370>
	else if (__tmp > 65535)
    4f56:	6d 89       	ldd	r22, Y+21	; 0x15
    4f58:	7e 89       	ldd	r23, Y+22	; 0x16
    4f5a:	8f 89       	ldd	r24, Y+23	; 0x17
    4f5c:	98 8d       	ldd	r25, Y+24	; 0x18
    4f5e:	20 e0       	ldi	r18, 0x00	; 0
    4f60:	3f ef       	ldi	r19, 0xFF	; 255
    4f62:	4f e7       	ldi	r20, 0x7F	; 127
    4f64:	57 e4       	ldi	r21, 0x47	; 71
    4f66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f6a:	18 16       	cp	r1, r24
    4f6c:	4c f5       	brge	.+82     	; 0x4fc0 <main+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f6e:	69 8d       	ldd	r22, Y+25	; 0x19
    4f70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f76:	20 e0       	ldi	r18, 0x00	; 0
    4f78:	30 e0       	ldi	r19, 0x00	; 0
    4f7a:	40 e2       	ldi	r20, 0x20	; 32
    4f7c:	51 e4       	ldi	r21, 0x41	; 65
    4f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f82:	dc 01       	movw	r26, r24
    4f84:	cb 01       	movw	r24, r22
    4f86:	bc 01       	movw	r22, r24
    4f88:	cd 01       	movw	r24, r26
    4f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f8e:	dc 01       	movw	r26, r24
    4f90:	cb 01       	movw	r24, r22
    4f92:	9c 8b       	std	Y+20, r25	; 0x14
    4f94:	8b 8b       	std	Y+19, r24	; 0x13
    4f96:	0f c0       	rjmp	.+30     	; 0x4fb6 <main+0x352>
    4f98:	88 ec       	ldi	r24, 0xC8	; 200
    4f9a:	90 e0       	ldi	r25, 0x00	; 0
    4f9c:	9a 8b       	std	Y+18, r25	; 0x12
    4f9e:	89 8b       	std	Y+17, r24	; 0x11
    4fa0:	89 89       	ldd	r24, Y+17	; 0x11
    4fa2:	9a 89       	ldd	r25, Y+18	; 0x12
    4fa4:	01 97       	sbiw	r24, 0x01	; 1
    4fa6:	f1 f7       	brne	.-4      	; 0x4fa4 <main+0x340>
    4fa8:	9a 8b       	std	Y+18, r25	; 0x12
    4faa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fac:	8b 89       	ldd	r24, Y+19	; 0x13
    4fae:	9c 89       	ldd	r25, Y+20	; 0x14
    4fb0:	01 97       	sbiw	r24, 0x01	; 1
    4fb2:	9c 8b       	std	Y+20, r25	; 0x14
    4fb4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fb6:	8b 89       	ldd	r24, Y+19	; 0x13
    4fb8:	9c 89       	ldd	r25, Y+20	; 0x14
    4fba:	00 97       	sbiw	r24, 0x00	; 0
    4fbc:	69 f7       	brne	.-38     	; 0x4f98 <main+0x334>
    4fbe:	14 c0       	rjmp	.+40     	; 0x4fe8 <main+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fc0:	6d 89       	ldd	r22, Y+21	; 0x15
    4fc2:	7e 89       	ldd	r23, Y+22	; 0x16
    4fc4:	8f 89       	ldd	r24, Y+23	; 0x17
    4fc6:	98 8d       	ldd	r25, Y+24	; 0x18
    4fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fcc:	dc 01       	movw	r26, r24
    4fce:	cb 01       	movw	r24, r22
    4fd0:	9c 8b       	std	Y+20, r25	; 0x14
    4fd2:	8b 8b       	std	Y+19, r24	; 0x13
    4fd4:	8b 89       	ldd	r24, Y+19	; 0x13
    4fd6:	9c 89       	ldd	r25, Y+20	; 0x14
    4fd8:	98 8b       	std	Y+16, r25	; 0x10
    4fda:	8f 87       	std	Y+15, r24	; 0x0f
    4fdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    4fde:	98 89       	ldd	r25, Y+16	; 0x10
    4fe0:	01 97       	sbiw	r24, 0x01	; 1
    4fe2:	f1 f7       	brne	.-4      	; 0x4fe0 <main+0x37c>
    4fe4:	98 8b       	std	Y+16, r25	; 0x10
    4fe6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);
			DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN6,DIO_u8PIN_LOW);
    4fe8:	83 e0       	ldi	r24, 0x03	; 3
    4fea:	66 e0       	ldi	r22, 0x06	; 6
    4fec:	40 e0       	ldi	r20, 0x00	; 0
    4fee:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
			SPI_voidTransferByte('z');
    4ff2:	8a e7       	ldi	r24, 0x7A	; 122
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <SPI_voidTransferByte>
    4ffa:	80 e0       	ldi	r24, 0x00	; 0
    4ffc:	90 e0       	ldi	r25, 0x00	; 0
    4ffe:	a8 e4       	ldi	r26, 0x48	; 72
    5000:	b3 e4       	ldi	r27, 0x43	; 67
    5002:	8b 87       	std	Y+11, r24	; 0x0b
    5004:	9c 87       	std	Y+12, r25	; 0x0c
    5006:	ad 87       	std	Y+13, r26	; 0x0d
    5008:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    500a:	6b 85       	ldd	r22, Y+11	; 0x0b
    500c:	7c 85       	ldd	r23, Y+12	; 0x0c
    500e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5010:	9e 85       	ldd	r25, Y+14	; 0x0e
    5012:	20 e0       	ldi	r18, 0x00	; 0
    5014:	30 e0       	ldi	r19, 0x00	; 0
    5016:	4a ef       	ldi	r20, 0xFA	; 250
    5018:	54 e4       	ldi	r21, 0x44	; 68
    501a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    501e:	dc 01       	movw	r26, r24
    5020:	cb 01       	movw	r24, r22
    5022:	8f 83       	std	Y+7, r24	; 0x07
    5024:	98 87       	std	Y+8, r25	; 0x08
    5026:	a9 87       	std	Y+9, r26	; 0x09
    5028:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    502a:	6f 81       	ldd	r22, Y+7	; 0x07
    502c:	78 85       	ldd	r23, Y+8	; 0x08
    502e:	89 85       	ldd	r24, Y+9	; 0x09
    5030:	9a 85       	ldd	r25, Y+10	; 0x0a
    5032:	20 e0       	ldi	r18, 0x00	; 0
    5034:	30 e0       	ldi	r19, 0x00	; 0
    5036:	40 e8       	ldi	r20, 0x80	; 128
    5038:	5f e3       	ldi	r21, 0x3F	; 63
    503a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    503e:	88 23       	and	r24, r24
    5040:	2c f4       	brge	.+10     	; 0x504c <main+0x3e8>
		__ticks = 1;
    5042:	81 e0       	ldi	r24, 0x01	; 1
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	9e 83       	std	Y+6, r25	; 0x06
    5048:	8d 83       	std	Y+5, r24	; 0x05
    504a:	3f c0       	rjmp	.+126    	; 0x50ca <main+0x466>
	else if (__tmp > 65535)
    504c:	6f 81       	ldd	r22, Y+7	; 0x07
    504e:	78 85       	ldd	r23, Y+8	; 0x08
    5050:	89 85       	ldd	r24, Y+9	; 0x09
    5052:	9a 85       	ldd	r25, Y+10	; 0x0a
    5054:	20 e0       	ldi	r18, 0x00	; 0
    5056:	3f ef       	ldi	r19, 0xFF	; 255
    5058:	4f e7       	ldi	r20, 0x7F	; 127
    505a:	57 e4       	ldi	r21, 0x47	; 71
    505c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5060:	18 16       	cp	r1, r24
    5062:	4c f5       	brge	.+82     	; 0x50b6 <main+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5064:	6b 85       	ldd	r22, Y+11	; 0x0b
    5066:	7c 85       	ldd	r23, Y+12	; 0x0c
    5068:	8d 85       	ldd	r24, Y+13	; 0x0d
    506a:	9e 85       	ldd	r25, Y+14	; 0x0e
    506c:	20 e0       	ldi	r18, 0x00	; 0
    506e:	30 e0       	ldi	r19, 0x00	; 0
    5070:	40 e2       	ldi	r20, 0x20	; 32
    5072:	51 e4       	ldi	r21, 0x41	; 65
    5074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5078:	dc 01       	movw	r26, r24
    507a:	cb 01       	movw	r24, r22
    507c:	bc 01       	movw	r22, r24
    507e:	cd 01       	movw	r24, r26
    5080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5084:	dc 01       	movw	r26, r24
    5086:	cb 01       	movw	r24, r22
    5088:	9e 83       	std	Y+6, r25	; 0x06
    508a:	8d 83       	std	Y+5, r24	; 0x05
    508c:	0f c0       	rjmp	.+30     	; 0x50ac <main+0x448>
    508e:	88 ec       	ldi	r24, 0xC8	; 200
    5090:	90 e0       	ldi	r25, 0x00	; 0
    5092:	9c 83       	std	Y+4, r25	; 0x04
    5094:	8b 83       	std	Y+3, r24	; 0x03
    5096:	8b 81       	ldd	r24, Y+3	; 0x03
    5098:	9c 81       	ldd	r25, Y+4	; 0x04
    509a:	01 97       	sbiw	r24, 0x01	; 1
    509c:	f1 f7       	brne	.-4      	; 0x509a <main+0x436>
    509e:	9c 83       	std	Y+4, r25	; 0x04
    50a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50a2:	8d 81       	ldd	r24, Y+5	; 0x05
    50a4:	9e 81       	ldd	r25, Y+6	; 0x06
    50a6:	01 97       	sbiw	r24, 0x01	; 1
    50a8:	9e 83       	std	Y+6, r25	; 0x06
    50aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50ac:	8d 81       	ldd	r24, Y+5	; 0x05
    50ae:	9e 81       	ldd	r25, Y+6	; 0x06
    50b0:	00 97       	sbiw	r24, 0x00	; 0
    50b2:	69 f7       	brne	.-38     	; 0x508e <main+0x42a>
    50b4:	1a c0       	rjmp	.+52     	; 0x50ea <main+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50b6:	6f 81       	ldd	r22, Y+7	; 0x07
    50b8:	78 85       	ldd	r23, Y+8	; 0x08
    50ba:	89 85       	ldd	r24, Y+9	; 0x09
    50bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    50be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50c2:	dc 01       	movw	r26, r24
    50c4:	cb 01       	movw	r24, r22
    50c6:	9e 83       	std	Y+6, r25	; 0x06
    50c8:	8d 83       	std	Y+5, r24	; 0x05
    50ca:	8d 81       	ldd	r24, Y+5	; 0x05
    50cc:	9e 81       	ldd	r25, Y+6	; 0x06
    50ce:	9a 83       	std	Y+2, r25	; 0x02
    50d0:	89 83       	std	Y+1, r24	; 0x01
    50d2:	89 81       	ldd	r24, Y+1	; 0x01
    50d4:	9a 81       	ldd	r25, Y+2	; 0x02
    50d6:	01 97       	sbiw	r24, 0x01	; 1
    50d8:	f1 f7       	brne	.-4      	; 0x50d6 <main+0x472>
    50da:	9a 83       	std	Y+2, r25	; 0x02
    50dc:	89 83       	std	Y+1, r24	; 0x01
    50de:	05 c0       	rjmp	.+10     	; 0x50ea <main+0x486>
			_delay_ms(200);
		}
		else
		{
			DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN6,DIO_u8PIN_LOW);
    50e0:	83 e0       	ldi	r24, 0x03	; 3
    50e2:	66 e0       	ldi	r22, 0x06	; 6
    50e4:	40 e0       	ldi	r20, 0x00	; 0
    50e6:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>



		//********************************Rain_Sensor*********************************//

		Local_u16AnalogRainValue = ADC_u8GetChannelReading(2);
    50ea:	82 e0       	ldi	r24, 0x02	; 2
    50ec:	0e 94 48 07 	call	0xe90	; 0xe90 <ADC_u8GetChannelReading>
    50f0:	90 93 cf 01 	sts	0x01CF, r25
    50f4:	80 93 ce 01 	sts	0x01CE, r24
		Local_u16AnalogRainValue = Local_u16AnalogRainValue * 5;
    50f8:	20 91 ce 01 	lds	r18, 0x01CE
    50fc:	30 91 cf 01 	lds	r19, 0x01CF
    5100:	c9 01       	movw	r24, r18
    5102:	88 0f       	add	r24, r24
    5104:	99 1f       	adc	r25, r25
    5106:	88 0f       	add	r24, r24
    5108:	99 1f       	adc	r25, r25
    510a:	82 0f       	add	r24, r18
    510c:	93 1f       	adc	r25, r19
    510e:	90 93 cf 01 	sts	0x01CF, r25
    5112:	80 93 ce 01 	sts	0x01CE, r24

		if ( Local_u16AnalogRainValue >= 350)
    5116:	80 91 ce 01 	lds	r24, 0x01CE
    511a:	90 91 cf 01 	lds	r25, 0x01CF
    511e:	21 e0       	ldi	r18, 0x01	; 1
    5120:	8e 35       	cpi	r24, 0x5E	; 94
    5122:	92 07       	cpc	r25, r18
    5124:	30 f0       	brcs	.+12     	; 0x5132 <main+0x4ce>
		{
			SERVO_voidTimer1ServoSetAngleOCR1B(180);
    5126:	64 eb       	ldi	r22, 0xB4	; 180
    5128:	70 e0       	ldi	r23, 0x00	; 0
    512a:	80 e0       	ldi	r24, 0x00	; 0
    512c:	90 e0       	ldi	r25, 0x00	; 0
    512e:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <SERVO_voidTimer1ServoSetAngleOCR1B>
		}


		//********************************PIR_Sensor*********************************//

		DIO_u8GetPinValue(DIO_u8PORTA,DIO_u8PIN3,&Local_u8DigitalPIRValue);
    5132:	9e 01       	movw	r18, r28
    5134:	2b 5b       	subi	r18, 0xBB	; 187
    5136:	3f 4f       	sbci	r19, 0xFF	; 255
    5138:	80 e0       	ldi	r24, 0x00	; 0
    513a:	63 e0       	ldi	r22, 0x03	; 3
    513c:	a9 01       	movw	r20, r18
    513e:	0e 94 6e 18 	call	0x30dc	; 0x30dc <DIO_u8GetPinValue>

		if (Local_u8DigitalPIRValue == 1 )
    5142:	fe 01       	movw	r30, r28
    5144:	eb 5b       	subi	r30, 0xBB	; 187
    5146:	ff 4f       	sbci	r31, 0xFF	; 255
    5148:	80 81       	ld	r24, Z
    514a:	81 30       	cpi	r24, 0x01	; 1
    514c:	29 f4       	brne	.+10     	; 0x5158 <main+0x4f4>
		{
			DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN4,DIO_u8PIN_HIGH);
    514e:	82 e0       	ldi	r24, 0x02	; 2
    5150:	64 e0       	ldi	r22, 0x04	; 4
    5152:	41 e0       	ldi	r20, 0x01	; 1
    5154:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
		}

		//********************************LDR_Sensor*********************************//

		Local_u16AnalogLDRValue = ADC_u8GetChannelReading(4);
    5158:	84 e0       	ldi	r24, 0x04	; 4
    515a:	0e 94 48 07 	call	0xe90	; 0xe90 <ADC_u8GetChannelReading>
    515e:	fe 01       	movw	r30, r28
    5160:	ff 96       	adiw	r30, 0x3f	; 63
    5162:	91 83       	std	Z+1, r25	; 0x01
    5164:	80 83       	st	Z, r24

		if ( Local_u16AnalogLDRValue >= 500)
    5166:	fe 01       	movw	r30, r28
    5168:	ff 96       	adiw	r30, 0x3f	; 63
    516a:	80 81       	ld	r24, Z
    516c:	91 81       	ldd	r25, Z+1	; 0x01
    516e:	e1 e0       	ldi	r30, 0x01	; 1
    5170:	84 3f       	cpi	r24, 0xF4	; 244
    5172:	9e 07       	cpc	r25, r30
    5174:	30 f0       	brcs	.+12     	; 0x5182 <main+0x51e>
		{
			DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN6,DIO_u8PIN_HIGH);
    5176:	82 e0       	ldi	r24, 0x02	; 2
    5178:	66 e0       	ldi	r22, 0x06	; 6
    517a:	41 e0       	ldi	r20, 0x01	; 1
    517c:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    5180:	05 c0       	rjmp	.+10     	; 0x518c <main+0x528>
		}
		else
		{
			DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN6,DIO_u8PIN_LOW);
    5182:	82 e0       	ldi	r24, 0x02	; 2
    5184:	66 e0       	ldi	r22, 0x06	; 6
    5186:	40 e0       	ldi	r20, 0x00	; 0
    5188:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
		}

		//********************************Temperature_Sensor*********************************//

		Local_u16AnalogTempValue = ADC_u8GetChannelReading(5);
    518c:	85 e0       	ldi	r24, 0x05	; 5
    518e:	0e 94 48 07 	call	0xe90	; 0xe90 <ADC_u8GetChannelReading>
    5192:	9e af       	std	Y+62, r25	; 0x3e
    5194:	8d af       	std	Y+61, r24	; 0x3d

		// Calculate the temperature from the ADC value
		Temperature = ( Local_u16AnalogTempValue * 4.88 ) / ( 10 );
    5196:	8d ad       	ldd	r24, Y+61	; 0x3d
    5198:	9e ad       	ldd	r25, Y+62	; 0x3e
    519a:	cc 01       	movw	r24, r24
    519c:	a0 e0       	ldi	r26, 0x00	; 0
    519e:	b0 e0       	ldi	r27, 0x00	; 0
    51a0:	bc 01       	movw	r22, r24
    51a2:	cd 01       	movw	r24, r26
    51a4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    51a8:	dc 01       	movw	r26, r24
    51aa:	cb 01       	movw	r24, r22
    51ac:	bc 01       	movw	r22, r24
    51ae:	cd 01       	movw	r24, r26
    51b0:	26 ef       	ldi	r18, 0xF6	; 246
    51b2:	38 e2       	ldi	r19, 0x28	; 40
    51b4:	4c e9       	ldi	r20, 0x9C	; 156
    51b6:	50 e4       	ldi	r21, 0x40	; 64
    51b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51bc:	dc 01       	movw	r26, r24
    51be:	cb 01       	movw	r24, r22
    51c0:	bc 01       	movw	r22, r24
    51c2:	cd 01       	movw	r24, r26
    51c4:	20 e0       	ldi	r18, 0x00	; 0
    51c6:	30 e0       	ldi	r19, 0x00	; 0
    51c8:	40 e2       	ldi	r20, 0x20	; 32
    51ca:	51 e4       	ldi	r21, 0x41	; 65
    51cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    51d0:	dc 01       	movw	r26, r24
    51d2:	cb 01       	movw	r24, r22
    51d4:	bc 01       	movw	r22, r24
    51d6:	cd 01       	movw	r24, r26
    51d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51dc:	dc 01       	movw	r26, r24
    51de:	cb 01       	movw	r24, r22
    51e0:	9a af       	std	Y+58, r25	; 0x3a
    51e2:	89 af       	std	Y+57, r24	; 0x39

		if ( Temperature >= 35)
    51e4:	89 ad       	ldd	r24, Y+57	; 0x39
    51e6:	9a ad       	ldd	r25, Y+58	; 0x3a
    51e8:	83 32       	cpi	r24, 0x23	; 35
    51ea:	91 05       	cpc	r25, r1
    51ec:	98 f0       	brcs	.+38     	; 0x5214 <main+0x5b0>
		{
			DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN6,DIO_u8PIN_LOW);
    51ee:	83 e0       	ldi	r24, 0x03	; 3
    51f0:	66 e0       	ldi	r22, 0x06	; 6
    51f2:	40 e0       	ldi	r20, 0x00	; 0
    51f4:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_HIGH);
    51f8:	82 e0       	ldi	r24, 0x02	; 2
    51fa:	67 e0       	ldi	r22, 0x07	; 7
    51fc:	41 e0       	ldi	r20, 0x01	; 1
    51fe:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
			CLCD_voidGoToXY(0,13);
    5202:	80 e0       	ldi	r24, 0x00	; 0
    5204:	6d e0       	ldi	r22, 0x0D	; 13
    5206:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <CLCD_voidGoToXY>
			CLCD_voidSendString("ON ");
    520a:	80 e6       	ldi	r24, 0x60	; 96
    520c:	90 e0       	ldi	r25, 0x00	; 0
    520e:	0e 94 cb 12 	call	0x2596	; 0x2596 <CLCD_voidSendString>
    5212:	1d c0       	rjmp	.+58     	; 0x524e <main+0x5ea>
		}
		else if ( Temperature >= 50)
    5214:	89 ad       	ldd	r24, Y+57	; 0x39
    5216:	9a ad       	ldd	r25, Y+58	; 0x3a
    5218:	82 33       	cpi	r24, 0x32	; 50
    521a:	91 05       	cpc	r25, r1
    521c:	30 f0       	brcs	.+12     	; 0x522a <main+0x5c6>
		{
			DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN6,DIO_u8PIN_HIGH);
    521e:	83 e0       	ldi	r24, 0x03	; 3
    5220:	66 e0       	ldi	r22, 0x06	; 6
    5222:	41 e0       	ldi	r20, 0x01	; 1
    5224:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    5228:	12 c0       	rjmp	.+36     	; 0x524e <main+0x5ea>
		}
		else
		{
			DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN6,DIO_u8PIN_LOW);
    522a:	83 e0       	ldi	r24, 0x03	; 3
    522c:	66 e0       	ldi	r22, 0x06	; 6
    522e:	40 e0       	ldi	r20, 0x00	; 0
    5230:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_LOW);
    5234:	82 e0       	ldi	r24, 0x02	; 2
    5236:	67 e0       	ldi	r22, 0x07	; 7
    5238:	40 e0       	ldi	r20, 0x00	; 0
    523a:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
			CLCD_voidGoToXY(0,13);
    523e:	80 e0       	ldi	r24, 0x00	; 0
    5240:	6d e0       	ldi	r22, 0x0D	; 13
    5242:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <CLCD_voidGoToXY>
			CLCD_voidSendString("OFF");
    5246:	84 e6       	ldi	r24, 0x64	; 100
    5248:	90 e0       	ldi	r25, 0x00	; 0
    524a:	0e 94 cb 12 	call	0x2596	; 0x2596 <CLCD_voidSendString>
		}

		//********************************SoilMoisture_Sensor*********************************//

		Local_u16AnalogSoilValue = ADC_u8GetChannelReading(6);
    524e:	86 e0       	ldi	r24, 0x06	; 6
    5250:	0e 94 48 07 	call	0xe90	; 0xe90 <ADC_u8GetChannelReading>
    5254:	9c af       	std	Y+60, r25	; 0x3c
    5256:	8b af       	std	Y+59, r24	; 0x3b

		Soil_Moisture =( Local_u16AnalogSoilValue / 10.24 ) ;
    5258:	8b ad       	ldd	r24, Y+59	; 0x3b
    525a:	9c ad       	ldd	r25, Y+60	; 0x3c
    525c:	cc 01       	movw	r24, r24
    525e:	a0 e0       	ldi	r26, 0x00	; 0
    5260:	b0 e0       	ldi	r27, 0x00	; 0
    5262:	bc 01       	movw	r22, r24
    5264:	cd 01       	movw	r24, r26
    5266:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    526a:	dc 01       	movw	r26, r24
    526c:	cb 01       	movw	r24, r22
    526e:	bc 01       	movw	r22, r24
    5270:	cd 01       	movw	r24, r26
    5272:	2a e0       	ldi	r18, 0x0A	; 10
    5274:	37 ed       	ldi	r19, 0xD7	; 215
    5276:	43 e2       	ldi	r20, 0x23	; 35
    5278:	51 e4       	ldi	r21, 0x41	; 65
    527a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    527e:	dc 01       	movw	r26, r24
    5280:	cb 01       	movw	r24, r22
    5282:	8e 01       	movw	r16, r28
    5284:	0e 5b       	subi	r16, 0xBE	; 190
    5286:	1f 4f       	sbci	r17, 0xFF	; 255
    5288:	bc 01       	movw	r22, r24
    528a:	cd 01       	movw	r24, r26
    528c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5290:	dc 01       	movw	r26, r24
    5292:	cb 01       	movw	r24, r22
    5294:	f8 01       	movw	r30, r16
    5296:	80 83       	st	Z, r24

		Soil_Moisture_Value = (100 - Soil_Moisture) ;
    5298:	de 01       	movw	r26, r28
    529a:	af 5b       	subi	r26, 0xBF	; 191
    529c:	bf 4f       	sbci	r27, 0xFF	; 255
    529e:	fe 01       	movw	r30, r28
    52a0:	ee 5b       	subi	r30, 0xBE	; 190
    52a2:	ff 4f       	sbci	r31, 0xFF	; 255
    52a4:	94 e6       	ldi	r25, 0x64	; 100
    52a6:	80 81       	ld	r24, Z
    52a8:	f9 2f       	mov	r31, r25
    52aa:	f8 1b       	sub	r31, r24
    52ac:	8f 2f       	mov	r24, r31
    52ae:	8c 93       	st	X, r24


		if ( Soil_Moisture_Value <= 10)
    52b0:	fe 01       	movw	r30, r28
    52b2:	ef 5b       	subi	r30, 0xBF	; 191
    52b4:	ff 4f       	sbci	r31, 0xFF	; 255
    52b6:	80 81       	ld	r24, Z
    52b8:	8b 30       	cpi	r24, 0x0B	; 11
    52ba:	e8 f4       	brcc	.+58     	; 0x52f6 <main+0x692>
		{
			CLCD_voidGoToXY(1,14);
    52bc:	81 e0       	ldi	r24, 0x01	; 1
    52be:	6e e0       	ldi	r22, 0x0E	; 14
    52c0:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <CLCD_voidGoToXY>
			CLCD_voidSendNumber(Soil_Moisture_Value);
    52c4:	fe 01       	movw	r30, r28
    52c6:	ef 5b       	subi	r30, 0xBF	; 191
    52c8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ca:	80 81       	ld	r24, Z
    52cc:	88 2f       	mov	r24, r24
    52ce:	90 e0       	ldi	r25, 0x00	; 0
    52d0:	a0 e0       	ldi	r26, 0x00	; 0
    52d2:	b0 e0       	ldi	r27, 0x00	; 0
    52d4:	bc 01       	movw	r22, r24
    52d6:	cd 01       	movw	r24, r26
    52d8:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <CLCD_voidSendNumber>
			CLCD_voidGoToXY(1,15);
    52dc:	81 e0       	ldi	r24, 0x01	; 1
    52de:	6f e0       	ldi	r22, 0x0F	; 15
    52e0:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <CLCD_voidGoToXY>
			CLCD_voidSendString(" ");
    52e4:	88 e6       	ldi	r24, 0x68	; 104
    52e6:	90 e0       	ldi	r25, 0x00	; 0
    52e8:	0e 94 cb 12 	call	0x2596	; 0x2596 <CLCD_voidSendString>

			SPI_voidTransferByte('y');
    52ec:	89 e7       	ldi	r24, 0x79	; 121
    52ee:	90 e0       	ldi	r25, 0x00	; 0
    52f0:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <SPI_voidTransferByte>
    52f4:	25 c0       	rjmp	.+74     	; 0x5340 <main+0x6dc>
		} else if ( Soil_Moisture_Value == 100)
    52f6:	fe 01       	movw	r30, r28
    52f8:	ef 5b       	subi	r30, 0xBF	; 191
    52fa:	ff 4f       	sbci	r31, 0xFF	; 255
    52fc:	80 81       	ld	r24, Z
    52fe:	84 36       	cpi	r24, 0x64	; 100
    5300:	59 f4       	brne	.+22     	; 0x5318 <main+0x6b4>
		{
			CLCD_voidGoToXY(1,14);
    5302:	81 e0       	ldi	r24, 0x01	; 1
    5304:	6e e0       	ldi	r22, 0x0E	; 14
    5306:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <CLCD_voidGoToXY>
			CLCD_voidSendNumber(99);
    530a:	63 e6       	ldi	r22, 0x63	; 99
    530c:	70 e0       	ldi	r23, 0x00	; 0
    530e:	80 e0       	ldi	r24, 0x00	; 0
    5310:	90 e0       	ldi	r25, 0x00	; 0
    5312:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <CLCD_voidSendNumber>
    5316:	14 c0       	rjmp	.+40     	; 0x5340 <main+0x6dc>

		}
		else
		{
			CLCD_voidGoToXY(1,14);
    5318:	81 e0       	ldi	r24, 0x01	; 1
    531a:	6e e0       	ldi	r22, 0x0E	; 14
    531c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <CLCD_voidGoToXY>
			CLCD_voidSendNumber(Soil_Moisture_Value);
    5320:	fe 01       	movw	r30, r28
    5322:	ef 5b       	subi	r30, 0xBF	; 191
    5324:	ff 4f       	sbci	r31, 0xFF	; 255
    5326:	80 81       	ld	r24, Z
    5328:	88 2f       	mov	r24, r24
    532a:	90 e0       	ldi	r25, 0x00	; 0
    532c:	a0 e0       	ldi	r26, 0x00	; 0
    532e:	b0 e0       	ldi	r27, 0x00	; 0
    5330:	bc 01       	movw	r22, r24
    5332:	cd 01       	movw	r24, r26
    5334:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <CLCD_voidSendNumber>

			SPI_voidTransferByte('Y');
    5338:	89 e5       	ldi	r24, 0x59	; 89
    533a:	90 e0       	ldi	r25, 0x00	; 0
    533c:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <SPI_voidTransferByte>
		}

		//*************************************** LCD *****************************************//

		CLCD_voidGoToXY(0,0);
    5340:	80 e0       	ldi	r24, 0x00	; 0
    5342:	60 e0       	ldi	r22, 0x00	; 0
    5344:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <CLCD_voidGoToXY>
		CLCD_voidSendString("Temp:");
    5348:	8a e6       	ldi	r24, 0x6A	; 106
    534a:	90 e0       	ldi	r25, 0x00	; 0
    534c:	0e 94 cb 12 	call	0x2596	; 0x2596 <CLCD_voidSendString>

		CLCD_voidGoToXY(0,5);
    5350:	80 e0       	ldi	r24, 0x00	; 0
    5352:	65 e0       	ldi	r22, 0x05	; 5
    5354:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <CLCD_voidGoToXY>
		CLCD_voidSendNumber(Temperature);
    5358:	89 ad       	ldd	r24, Y+57	; 0x39
    535a:	9a ad       	ldd	r25, Y+58	; 0x3a
    535c:	cc 01       	movw	r24, r24
    535e:	a0 e0       	ldi	r26, 0x00	; 0
    5360:	b0 e0       	ldi	r27, 0x00	; 0
    5362:	bc 01       	movw	r22, r24
    5364:	cd 01       	movw	r24, r26
    5366:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <CLCD_voidSendNumber>

		CLCD_voidGoToXY(0,7);
    536a:	80 e0       	ldi	r24, 0x00	; 0
    536c:	67 e0       	ldi	r22, 0x07	; 7
    536e:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <CLCD_voidGoToXY>
		CLCD_voidSendString(" ");
    5372:	88 e6       	ldi	r24, 0x68	; 104
    5374:	90 e0       	ldi	r25, 0x00	; 0
    5376:	0e 94 cb 12 	call	0x2596	; 0x2596 <CLCD_voidSendString>


		CLCD_voidGoToXY(0,9);
    537a:	80 e0       	ldi	r24, 0x00	; 0
    537c:	69 e0       	ldi	r22, 0x09	; 9
    537e:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <CLCD_voidGoToXY>
		CLCD_voidSendString("Fan:");
    5382:	80 e7       	ldi	r24, 0x70	; 112
    5384:	90 e0       	ldi	r25, 0x00	; 0
    5386:	0e 94 cb 12 	call	0x2596	; 0x2596 <CLCD_voidSendString>

		CLCD_voidGoToXY(1,0);
    538a:	81 e0       	ldi	r24, 0x01	; 1
    538c:	60 e0       	ldi	r22, 0x00	; 0
    538e:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <CLCD_voidGoToXY>
		CLCD_voidSendString("Soil Moisture:");
    5392:	85 e7       	ldi	r24, 0x75	; 117
    5394:	90 e0       	ldi	r25, 0x00	; 0
    5396:	0e 94 cb 12 	call	0x2596	; 0x2596 <CLCD_voidSendString>
    539a:	91 cc       	rjmp	.-1758   	; 0x4cbe <main+0x5a>

0000539c <WIFI_voidReceiveMessage>:

	}
}

void WIFI_voidReceiveMessage(void)
{
    539c:	df 93       	push	r29
    539e:	cf 93       	push	r28
    53a0:	00 d0       	rcall	.+0      	; 0x53a2 <WIFI_voidReceiveMessage+0x6>
    53a2:	cd b7       	in	r28, 0x3d	; 61
    53a4:	de b7       	in	r29, 0x3e	; 62
	Global_u8UartRxValue = UART_voidReceiveChar();
    53a6:	0e 94 07 25 	call	0x4a0e	; 0x4a0e <UART_voidReceiveChar>
    53aa:	80 93 cd 01 	sts	0x01CD, r24

	switch (Global_u8UartRxValue)
    53ae:	80 91 cd 01 	lds	r24, 0x01CD
    53b2:	28 2f       	mov	r18, r24
    53b4:	30 e0       	ldi	r19, 0x00	; 0
    53b6:	3a 83       	std	Y+2, r19	; 0x02
    53b8:	29 83       	std	Y+1, r18	; 0x01
    53ba:	89 81       	ldd	r24, Y+1	; 0x01
    53bc:	9a 81       	ldd	r25, Y+2	; 0x02
    53be:	8a 34       	cpi	r24, 0x4A	; 74
    53c0:	91 05       	cpc	r25, r1
    53c2:	09 f4       	brne	.+2      	; 0x53c6 <WIFI_voidReceiveMessage+0x2a>
    53c4:	e4 c0       	rjmp	.+456    	; 0x558e <WIFI_voidReceiveMessage+0x1f2>
    53c6:	29 81       	ldd	r18, Y+1	; 0x01
    53c8:	3a 81       	ldd	r19, Y+2	; 0x02
    53ca:	2b 34       	cpi	r18, 0x4B	; 75
    53cc:	31 05       	cpc	r19, r1
    53ce:	bc f5       	brge	.+110    	; 0x543e <WIFI_voidReceiveMessage+0xa2>
    53d0:	89 81       	ldd	r24, Y+1	; 0x01
    53d2:	9a 81       	ldd	r25, Y+2	; 0x02
    53d4:	84 34       	cpi	r24, 0x44	; 68
    53d6:	91 05       	cpc	r25, r1
    53d8:	09 f4       	brne	.+2      	; 0x53dc <WIFI_voidReceiveMessage+0x40>
    53da:	9d c0       	rjmp	.+314    	; 0x5516 <WIFI_voidReceiveMessage+0x17a>
    53dc:	29 81       	ldd	r18, Y+1	; 0x01
    53de:	3a 81       	ldd	r19, Y+2	; 0x02
    53e0:	25 34       	cpi	r18, 0x45	; 69
    53e2:	31 05       	cpc	r19, r1
    53e4:	9c f4       	brge	.+38     	; 0x540c <WIFI_voidReceiveMessage+0x70>
    53e6:	89 81       	ldd	r24, Y+1	; 0x01
    53e8:	9a 81       	ldd	r25, Y+2	; 0x02
    53ea:	82 34       	cpi	r24, 0x42	; 66
    53ec:	91 05       	cpc	r25, r1
    53ee:	09 f4       	brne	.+2      	; 0x53f2 <WIFI_voidReceiveMessage+0x56>
    53f0:	7a c0       	rjmp	.+244    	; 0x54e6 <WIFI_voidReceiveMessage+0x14a>
    53f2:	29 81       	ldd	r18, Y+1	; 0x01
    53f4:	3a 81       	ldd	r19, Y+2	; 0x02
    53f6:	23 34       	cpi	r18, 0x43	; 67
    53f8:	31 05       	cpc	r19, r1
    53fa:	0c f0       	brlt	.+2      	; 0x53fe <WIFI_voidReceiveMessage+0x62>
    53fc:	80 c0       	rjmp	.+256    	; 0x54fe <WIFI_voidReceiveMessage+0x162>
    53fe:	89 81       	ldd	r24, Y+1	; 0x01
    5400:	9a 81       	ldd	r25, Y+2	; 0x02
    5402:	81 34       	cpi	r24, 0x41	; 65
    5404:	91 05       	cpc	r25, r1
    5406:	09 f4       	brne	.+2      	; 0x540a <WIFI_voidReceiveMessage+0x6e>
    5408:	62 c0       	rjmp	.+196    	; 0x54ce <WIFI_voidReceiveMessage+0x132>
    540a:	d5 c0       	rjmp	.+426    	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>
    540c:	29 81       	ldd	r18, Y+1	; 0x01
    540e:	3a 81       	ldd	r19, Y+2	; 0x02
    5410:	26 34       	cpi	r18, 0x46	; 70
    5412:	31 05       	cpc	r19, r1
    5414:	09 f4       	brne	.+2      	; 0x5418 <WIFI_voidReceiveMessage+0x7c>
    5416:	97 c0       	rjmp	.+302    	; 0x5546 <WIFI_voidReceiveMessage+0x1aa>
    5418:	89 81       	ldd	r24, Y+1	; 0x01
    541a:	9a 81       	ldd	r25, Y+2	; 0x02
    541c:	86 34       	cpi	r24, 0x46	; 70
    541e:	91 05       	cpc	r25, r1
    5420:	0c f4       	brge	.+2      	; 0x5424 <WIFI_voidReceiveMessage+0x88>
    5422:	85 c0       	rjmp	.+266    	; 0x552e <WIFI_voidReceiveMessage+0x192>
    5424:	29 81       	ldd	r18, Y+1	; 0x01
    5426:	3a 81       	ldd	r19, Y+2	; 0x02
    5428:	28 34       	cpi	r18, 0x48	; 72
    542a:	31 05       	cpc	r19, r1
    542c:	09 f4       	brne	.+2      	; 0x5430 <WIFI_voidReceiveMessage+0x94>
    542e:	97 c0       	rjmp	.+302    	; 0x555e <WIFI_voidReceiveMessage+0x1c2>
    5430:	89 81       	ldd	r24, Y+1	; 0x01
    5432:	9a 81       	ldd	r25, Y+2	; 0x02
    5434:	89 34       	cpi	r24, 0x49	; 73
    5436:	91 05       	cpc	r25, r1
    5438:	09 f4       	brne	.+2      	; 0x543c <WIFI_voidReceiveMessage+0xa0>
    543a:	9b c0       	rjmp	.+310    	; 0x5572 <WIFI_voidReceiveMessage+0x1d6>
    543c:	bc c0       	rjmp	.+376    	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>
    543e:	29 81       	ldd	r18, Y+1	; 0x01
    5440:	3a 81       	ldd	r19, Y+2	; 0x02
    5442:	25 36       	cpi	r18, 0x65	; 101
    5444:	31 05       	cpc	r19, r1
    5446:	09 f4       	brne	.+2      	; 0x544a <WIFI_voidReceiveMessage+0xae>
    5448:	78 c0       	rjmp	.+240    	; 0x553a <WIFI_voidReceiveMessage+0x19e>
    544a:	89 81       	ldd	r24, Y+1	; 0x01
    544c:	9a 81       	ldd	r25, Y+2	; 0x02
    544e:	86 36       	cpi	r24, 0x66	; 102
    5450:	91 05       	cpc	r25, r1
    5452:	f4 f4       	brge	.+60     	; 0x5490 <WIFI_voidReceiveMessage+0xf4>
    5454:	29 81       	ldd	r18, Y+1	; 0x01
    5456:	3a 81       	ldd	r19, Y+2	; 0x02
    5458:	22 36       	cpi	r18, 0x62	; 98
    545a:	31 05       	cpc	r19, r1
    545c:	09 f4       	brne	.+2      	; 0x5460 <WIFI_voidReceiveMessage+0xc4>
    545e:	49 c0       	rjmp	.+146    	; 0x54f2 <WIFI_voidReceiveMessage+0x156>
    5460:	89 81       	ldd	r24, Y+1	; 0x01
    5462:	9a 81       	ldd	r25, Y+2	; 0x02
    5464:	83 36       	cpi	r24, 0x63	; 99
    5466:	91 05       	cpc	r25, r1
    5468:	34 f4       	brge	.+12     	; 0x5476 <WIFI_voidReceiveMessage+0xda>
    546a:	29 81       	ldd	r18, Y+1	; 0x01
    546c:	3a 81       	ldd	r19, Y+2	; 0x02
    546e:	21 36       	cpi	r18, 0x61	; 97
    5470:	31 05       	cpc	r19, r1
    5472:	99 f1       	breq	.+102    	; 0x54da <WIFI_voidReceiveMessage+0x13e>
    5474:	a0 c0       	rjmp	.+320    	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>
    5476:	89 81       	ldd	r24, Y+1	; 0x01
    5478:	9a 81       	ldd	r25, Y+2	; 0x02
    547a:	83 36       	cpi	r24, 0x63	; 99
    547c:	91 05       	cpc	r25, r1
    547e:	09 f4       	brne	.+2      	; 0x5482 <WIFI_voidReceiveMessage+0xe6>
    5480:	44 c0       	rjmp	.+136    	; 0x550a <WIFI_voidReceiveMessage+0x16e>
    5482:	29 81       	ldd	r18, Y+1	; 0x01
    5484:	3a 81       	ldd	r19, Y+2	; 0x02
    5486:	24 36       	cpi	r18, 0x64	; 100
    5488:	31 05       	cpc	r19, r1
    548a:	09 f4       	brne	.+2      	; 0x548e <WIFI_voidReceiveMessage+0xf2>
    548c:	4a c0       	rjmp	.+148    	; 0x5522 <WIFI_voidReceiveMessage+0x186>
    548e:	93 c0       	rjmp	.+294    	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>
    5490:	89 81       	ldd	r24, Y+1	; 0x01
    5492:	9a 81       	ldd	r25, Y+2	; 0x02
    5494:	88 36       	cpi	r24, 0x68	; 104
    5496:	91 05       	cpc	r25, r1
    5498:	09 f4       	brne	.+2      	; 0x549c <WIFI_voidReceiveMessage+0x100>
    549a:	66 c0       	rjmp	.+204    	; 0x5568 <WIFI_voidReceiveMessage+0x1cc>
    549c:	29 81       	ldd	r18, Y+1	; 0x01
    549e:	3a 81       	ldd	r19, Y+2	; 0x02
    54a0:	29 36       	cpi	r18, 0x69	; 105
    54a2:	31 05       	cpc	r19, r1
    54a4:	3c f4       	brge	.+14     	; 0x54b4 <WIFI_voidReceiveMessage+0x118>
    54a6:	89 81       	ldd	r24, Y+1	; 0x01
    54a8:	9a 81       	ldd	r25, Y+2	; 0x02
    54aa:	86 36       	cpi	r24, 0x66	; 102
    54ac:	91 05       	cpc	r25, r1
    54ae:	09 f4       	brne	.+2      	; 0x54b2 <WIFI_voidReceiveMessage+0x116>
    54b0:	50 c0       	rjmp	.+160    	; 0x5552 <WIFI_voidReceiveMessage+0x1b6>
    54b2:	81 c0       	rjmp	.+258    	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>
    54b4:	29 81       	ldd	r18, Y+1	; 0x01
    54b6:	3a 81       	ldd	r19, Y+2	; 0x02
    54b8:	29 36       	cpi	r18, 0x69	; 105
    54ba:	31 05       	cpc	r19, r1
    54bc:	09 f4       	brne	.+2      	; 0x54c0 <WIFI_voidReceiveMessage+0x124>
    54be:	60 c0       	rjmp	.+192    	; 0x5580 <WIFI_voidReceiveMessage+0x1e4>
    54c0:	89 81       	ldd	r24, Y+1	; 0x01
    54c2:	9a 81       	ldd	r25, Y+2	; 0x02
    54c4:	8a 36       	cpi	r24, 0x6A	; 106
    54c6:	91 05       	cpc	r25, r1
    54c8:	09 f4       	brne	.+2      	; 0x54cc <WIFI_voidReceiveMessage+0x130>
    54ca:	6f c0       	rjmp	.+222    	; 0x55aa <WIFI_voidReceiveMessage+0x20e>
    54cc:	74 c0       	rjmp	.+232    	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>
	{
	case 'A': DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_HIGH); break;
    54ce:	82 e0       	ldi	r24, 0x02	; 2
    54d0:	60 e0       	ldi	r22, 0x00	; 0
    54d2:	41 e0       	ldi	r20, 0x01	; 1
    54d4:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    54d8:	6e c0       	rjmp	.+220    	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>

	case 'a': DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_LOW);  break;
    54da:	82 e0       	ldi	r24, 0x02	; 2
    54dc:	60 e0       	ldi	r22, 0x00	; 0
    54de:	40 e0       	ldi	r20, 0x00	; 0
    54e0:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    54e4:	68 c0       	rjmp	.+208    	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>

	case 'B': DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_HIGH); break;
    54e6:	82 e0       	ldi	r24, 0x02	; 2
    54e8:	61 e0       	ldi	r22, 0x01	; 1
    54ea:	41 e0       	ldi	r20, 0x01	; 1
    54ec:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    54f0:	62 c0       	rjmp	.+196    	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>

	case 'b': DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_LOW);  break;
    54f2:	82 e0       	ldi	r24, 0x02	; 2
    54f4:	61 e0       	ldi	r22, 0x01	; 1
    54f6:	40 e0       	ldi	r20, 0x00	; 0
    54f8:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    54fc:	5c c0       	rjmp	.+184    	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>

	case 'C': DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN2,DIO_u8PIN_HIGH); break;
    54fe:	82 e0       	ldi	r24, 0x02	; 2
    5500:	62 e0       	ldi	r22, 0x02	; 2
    5502:	41 e0       	ldi	r20, 0x01	; 1
    5504:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    5508:	56 c0       	rjmp	.+172    	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>

	case 'c': DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN2,DIO_u8PIN_LOW);  break;
    550a:	82 e0       	ldi	r24, 0x02	; 2
    550c:	62 e0       	ldi	r22, 0x02	; 2
    550e:	40 e0       	ldi	r20, 0x00	; 0
    5510:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    5514:	50 c0       	rjmp	.+160    	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>

	case 'D': DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_HIGH); break;
    5516:	82 e0       	ldi	r24, 0x02	; 2
    5518:	63 e0       	ldi	r22, 0x03	; 3
    551a:	41 e0       	ldi	r20, 0x01	; 1
    551c:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    5520:	4a c0       	rjmp	.+148    	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>

	case 'd': DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_LOW);  break;
    5522:	82 e0       	ldi	r24, 0x02	; 2
    5524:	63 e0       	ldi	r22, 0x03	; 3
    5526:	40 e0       	ldi	r20, 0x00	; 0
    5528:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    552c:	44 c0       	rjmp	.+136    	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>

	case 'E': DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN4,DIO_u8PIN_HIGH); break;
    552e:	82 e0       	ldi	r24, 0x02	; 2
    5530:	64 e0       	ldi	r22, 0x04	; 4
    5532:	41 e0       	ldi	r20, 0x01	; 1
    5534:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    5538:	3e c0       	rjmp	.+124    	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>

	case 'e': DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN4,DIO_u8PIN_LOW);  break;
    553a:	82 e0       	ldi	r24, 0x02	; 2
    553c:	64 e0       	ldi	r22, 0x04	; 4
    553e:	40 e0       	ldi	r20, 0x00	; 0
    5540:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    5544:	38 c0       	rjmp	.+112    	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>

	case 'F': DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN5,DIO_u8PIN_HIGH); break;
    5546:	82 e0       	ldi	r24, 0x02	; 2
    5548:	65 e0       	ldi	r22, 0x05	; 5
    554a:	41 e0       	ldi	r20, 0x01	; 1
    554c:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    5550:	32 c0       	rjmp	.+100    	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>

	case 'f': DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN5,DIO_u8PIN_LOW);  break;
    5552:	82 e0       	ldi	r24, 0x02	; 2
    5554:	65 e0       	ldi	r22, 0x05	; 5
    5556:	40 e0       	ldi	r20, 0x00	; 0
    5558:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_u8SetPinValue>
    555c:	2c c0       	rjmp	.+88     	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>

	case 'H': SPI_voidTransferByte('H');		    				    break;
    555e:	88 e4       	ldi	r24, 0x48	; 72
    5560:	90 e0       	ldi	r25, 0x00	; 0
    5562:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <SPI_voidTransferByte>
    5566:	27 c0       	rjmp	.+78     	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>

	case 'h': SPI_voidTransferByte('h'); 			  			        break;
    5568:	88 e6       	ldi	r24, 0x68	; 104
    556a:	90 e0       	ldi	r25, 0x00	; 0
    556c:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <SPI_voidTransferByte>
    5570:	22 c0       	rjmp	.+68     	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>

	case 'I': SERVO_voidTimer1ServoSetAngleOCR1A(0);  				    break;
    5572:	60 e0       	ldi	r22, 0x00	; 0
    5574:	70 e0       	ldi	r23, 0x00	; 0
    5576:	80 e0       	ldi	r24, 0x00	; 0
    5578:	90 e0       	ldi	r25, 0x00	; 0
    557a:	0e 94 05 1b 	call	0x360a	; 0x360a <SERVO_voidTimer1ServoSetAngleOCR1A>
    557e:	1b c0       	rjmp	.+54     	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>

	case 'i': SERVO_voidTimer1ServoSetAngleOCR1A(90); 				    break;
    5580:	6a e5       	ldi	r22, 0x5A	; 90
    5582:	70 e0       	ldi	r23, 0x00	; 0
    5584:	80 e0       	ldi	r24, 0x00	; 0
    5586:	90 e0       	ldi	r25, 0x00	; 0
    5588:	0e 94 05 1b 	call	0x360a	; 0x360a <SERVO_voidTimer1ServoSetAngleOCR1A>
    558c:	14 c0       	rjmp	.+40     	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>

	case 'J':
		if ( Local_u16AnalogRainValue <= 100)
    558e:	80 91 ce 01 	lds	r24, 0x01CE
    5592:	90 91 cf 01 	lds	r25, 0x01CF
    5596:	85 36       	cpi	r24, 0x65	; 101
    5598:	91 05       	cpc	r25, r1
    559a:	68 f4       	brcc	.+26     	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>
		{
			SERVO_voidTimer1ServoSetAngleOCR1B(0);
    559c:	60 e0       	ldi	r22, 0x00	; 0
    559e:	70 e0       	ldi	r23, 0x00	; 0
    55a0:	80 e0       	ldi	r24, 0x00	; 0
    55a2:	90 e0       	ldi	r25, 0x00	; 0
    55a4:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <SERVO_voidTimer1ServoSetAngleOCR1B>
    55a8:	06 c0       	rjmp	.+12     	; 0x55b6 <WIFI_voidReceiveMessage+0x21a>
		}
		break;

	case 'j': SERVO_voidTimer1ServoSetAngleOCR1B(90); 				    break;
    55aa:	6a e5       	ldi	r22, 0x5A	; 90
    55ac:	70 e0       	ldi	r23, 0x00	; 0
    55ae:	80 e0       	ldi	r24, 0x00	; 0
    55b0:	90 e0       	ldi	r25, 0x00	; 0
    55b2:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <SERVO_voidTimer1ServoSetAngleOCR1B>

	default: break;
	}
}
    55b6:	0f 90       	pop	r0
    55b8:	0f 90       	pop	r0
    55ba:	cf 91       	pop	r28
    55bc:	df 91       	pop	r29
    55be:	08 95       	ret

000055c0 <__mulsi3>:
    55c0:	62 9f       	mul	r22, r18
    55c2:	d0 01       	movw	r26, r0
    55c4:	73 9f       	mul	r23, r19
    55c6:	f0 01       	movw	r30, r0
    55c8:	82 9f       	mul	r24, r18
    55ca:	e0 0d       	add	r30, r0
    55cc:	f1 1d       	adc	r31, r1
    55ce:	64 9f       	mul	r22, r20
    55d0:	e0 0d       	add	r30, r0
    55d2:	f1 1d       	adc	r31, r1
    55d4:	92 9f       	mul	r25, r18
    55d6:	f0 0d       	add	r31, r0
    55d8:	83 9f       	mul	r24, r19
    55da:	f0 0d       	add	r31, r0
    55dc:	74 9f       	mul	r23, r20
    55de:	f0 0d       	add	r31, r0
    55e0:	65 9f       	mul	r22, r21
    55e2:	f0 0d       	add	r31, r0
    55e4:	99 27       	eor	r25, r25
    55e6:	72 9f       	mul	r23, r18
    55e8:	b0 0d       	add	r27, r0
    55ea:	e1 1d       	adc	r30, r1
    55ec:	f9 1f       	adc	r31, r25
    55ee:	63 9f       	mul	r22, r19
    55f0:	b0 0d       	add	r27, r0
    55f2:	e1 1d       	adc	r30, r1
    55f4:	f9 1f       	adc	r31, r25
    55f6:	bd 01       	movw	r22, r26
    55f8:	cf 01       	movw	r24, r30
    55fa:	11 24       	eor	r1, r1
    55fc:	08 95       	ret

000055fe <__udivmodhi4>:
    55fe:	aa 1b       	sub	r26, r26
    5600:	bb 1b       	sub	r27, r27
    5602:	51 e1       	ldi	r21, 0x11	; 17
    5604:	07 c0       	rjmp	.+14     	; 0x5614 <__udivmodhi4_ep>

00005606 <__udivmodhi4_loop>:
    5606:	aa 1f       	adc	r26, r26
    5608:	bb 1f       	adc	r27, r27
    560a:	a6 17       	cp	r26, r22
    560c:	b7 07       	cpc	r27, r23
    560e:	10 f0       	brcs	.+4      	; 0x5614 <__udivmodhi4_ep>
    5610:	a6 1b       	sub	r26, r22
    5612:	b7 0b       	sbc	r27, r23

00005614 <__udivmodhi4_ep>:
    5614:	88 1f       	adc	r24, r24
    5616:	99 1f       	adc	r25, r25
    5618:	5a 95       	dec	r21
    561a:	a9 f7       	brne	.-22     	; 0x5606 <__udivmodhi4_loop>
    561c:	80 95       	com	r24
    561e:	90 95       	com	r25
    5620:	bc 01       	movw	r22, r24
    5622:	cd 01       	movw	r24, r26
    5624:	08 95       	ret

00005626 <__divmodhi4>:
    5626:	97 fb       	bst	r25, 7
    5628:	09 2e       	mov	r0, r25
    562a:	07 26       	eor	r0, r23
    562c:	0a d0       	rcall	.+20     	; 0x5642 <__divmodhi4_neg1>
    562e:	77 fd       	sbrc	r23, 7
    5630:	04 d0       	rcall	.+8      	; 0x563a <__divmodhi4_neg2>
    5632:	e5 df       	rcall	.-54     	; 0x55fe <__udivmodhi4>
    5634:	06 d0       	rcall	.+12     	; 0x5642 <__divmodhi4_neg1>
    5636:	00 20       	and	r0, r0
    5638:	1a f4       	brpl	.+6      	; 0x5640 <__divmodhi4_exit>

0000563a <__divmodhi4_neg2>:
    563a:	70 95       	com	r23
    563c:	61 95       	neg	r22
    563e:	7f 4f       	sbci	r23, 0xFF	; 255

00005640 <__divmodhi4_exit>:
    5640:	08 95       	ret

00005642 <__divmodhi4_neg1>:
    5642:	f6 f7       	brtc	.-4      	; 0x5640 <__divmodhi4_exit>
    5644:	90 95       	com	r25
    5646:	81 95       	neg	r24
    5648:	9f 4f       	sbci	r25, 0xFF	; 255
    564a:	08 95       	ret

0000564c <__udivmodsi4>:
    564c:	a1 e2       	ldi	r26, 0x21	; 33
    564e:	1a 2e       	mov	r1, r26
    5650:	aa 1b       	sub	r26, r26
    5652:	bb 1b       	sub	r27, r27
    5654:	fd 01       	movw	r30, r26
    5656:	0d c0       	rjmp	.+26     	; 0x5672 <__udivmodsi4_ep>

00005658 <__udivmodsi4_loop>:
    5658:	aa 1f       	adc	r26, r26
    565a:	bb 1f       	adc	r27, r27
    565c:	ee 1f       	adc	r30, r30
    565e:	ff 1f       	adc	r31, r31
    5660:	a2 17       	cp	r26, r18
    5662:	b3 07       	cpc	r27, r19
    5664:	e4 07       	cpc	r30, r20
    5666:	f5 07       	cpc	r31, r21
    5668:	20 f0       	brcs	.+8      	; 0x5672 <__udivmodsi4_ep>
    566a:	a2 1b       	sub	r26, r18
    566c:	b3 0b       	sbc	r27, r19
    566e:	e4 0b       	sbc	r30, r20
    5670:	f5 0b       	sbc	r31, r21

00005672 <__udivmodsi4_ep>:
    5672:	66 1f       	adc	r22, r22
    5674:	77 1f       	adc	r23, r23
    5676:	88 1f       	adc	r24, r24
    5678:	99 1f       	adc	r25, r25
    567a:	1a 94       	dec	r1
    567c:	69 f7       	brne	.-38     	; 0x5658 <__udivmodsi4_loop>
    567e:	60 95       	com	r22
    5680:	70 95       	com	r23
    5682:	80 95       	com	r24
    5684:	90 95       	com	r25
    5686:	9b 01       	movw	r18, r22
    5688:	ac 01       	movw	r20, r24
    568a:	bd 01       	movw	r22, r26
    568c:	cf 01       	movw	r24, r30
    568e:	08 95       	ret

00005690 <__divmodsi4>:
    5690:	97 fb       	bst	r25, 7
    5692:	09 2e       	mov	r0, r25
    5694:	05 26       	eor	r0, r21
    5696:	0e d0       	rcall	.+28     	; 0x56b4 <__divmodsi4_neg1>
    5698:	57 fd       	sbrc	r21, 7
    569a:	04 d0       	rcall	.+8      	; 0x56a4 <__divmodsi4_neg2>
    569c:	d7 df       	rcall	.-82     	; 0x564c <__udivmodsi4>
    569e:	0a d0       	rcall	.+20     	; 0x56b4 <__divmodsi4_neg1>
    56a0:	00 1c       	adc	r0, r0
    56a2:	38 f4       	brcc	.+14     	; 0x56b2 <__divmodsi4_exit>

000056a4 <__divmodsi4_neg2>:
    56a4:	50 95       	com	r21
    56a6:	40 95       	com	r20
    56a8:	30 95       	com	r19
    56aa:	21 95       	neg	r18
    56ac:	3f 4f       	sbci	r19, 0xFF	; 255
    56ae:	4f 4f       	sbci	r20, 0xFF	; 255
    56b0:	5f 4f       	sbci	r21, 0xFF	; 255

000056b2 <__divmodsi4_exit>:
    56b2:	08 95       	ret

000056b4 <__divmodsi4_neg1>:
    56b4:	f6 f7       	brtc	.-4      	; 0x56b2 <__divmodsi4_exit>
    56b6:	90 95       	com	r25
    56b8:	80 95       	com	r24
    56ba:	70 95       	com	r23
    56bc:	61 95       	neg	r22
    56be:	7f 4f       	sbci	r23, 0xFF	; 255
    56c0:	8f 4f       	sbci	r24, 0xFF	; 255
    56c2:	9f 4f       	sbci	r25, 0xFF	; 255
    56c4:	08 95       	ret

000056c6 <__prologue_saves__>:
    56c6:	2f 92       	push	r2
    56c8:	3f 92       	push	r3
    56ca:	4f 92       	push	r4
    56cc:	5f 92       	push	r5
    56ce:	6f 92       	push	r6
    56d0:	7f 92       	push	r7
    56d2:	8f 92       	push	r8
    56d4:	9f 92       	push	r9
    56d6:	af 92       	push	r10
    56d8:	bf 92       	push	r11
    56da:	cf 92       	push	r12
    56dc:	df 92       	push	r13
    56de:	ef 92       	push	r14
    56e0:	ff 92       	push	r15
    56e2:	0f 93       	push	r16
    56e4:	1f 93       	push	r17
    56e6:	cf 93       	push	r28
    56e8:	df 93       	push	r29
    56ea:	cd b7       	in	r28, 0x3d	; 61
    56ec:	de b7       	in	r29, 0x3e	; 62
    56ee:	ca 1b       	sub	r28, r26
    56f0:	db 0b       	sbc	r29, r27
    56f2:	0f b6       	in	r0, 0x3f	; 63
    56f4:	f8 94       	cli
    56f6:	de bf       	out	0x3e, r29	; 62
    56f8:	0f be       	out	0x3f, r0	; 63
    56fa:	cd bf       	out	0x3d, r28	; 61
    56fc:	09 94       	ijmp

000056fe <__epilogue_restores__>:
    56fe:	2a 88       	ldd	r2, Y+18	; 0x12
    5700:	39 88       	ldd	r3, Y+17	; 0x11
    5702:	48 88       	ldd	r4, Y+16	; 0x10
    5704:	5f 84       	ldd	r5, Y+15	; 0x0f
    5706:	6e 84       	ldd	r6, Y+14	; 0x0e
    5708:	7d 84       	ldd	r7, Y+13	; 0x0d
    570a:	8c 84       	ldd	r8, Y+12	; 0x0c
    570c:	9b 84       	ldd	r9, Y+11	; 0x0b
    570e:	aa 84       	ldd	r10, Y+10	; 0x0a
    5710:	b9 84       	ldd	r11, Y+9	; 0x09
    5712:	c8 84       	ldd	r12, Y+8	; 0x08
    5714:	df 80       	ldd	r13, Y+7	; 0x07
    5716:	ee 80       	ldd	r14, Y+6	; 0x06
    5718:	fd 80       	ldd	r15, Y+5	; 0x05
    571a:	0c 81       	ldd	r16, Y+4	; 0x04
    571c:	1b 81       	ldd	r17, Y+3	; 0x03
    571e:	aa 81       	ldd	r26, Y+2	; 0x02
    5720:	b9 81       	ldd	r27, Y+1	; 0x01
    5722:	ce 0f       	add	r28, r30
    5724:	d1 1d       	adc	r29, r1
    5726:	0f b6       	in	r0, 0x3f	; 63
    5728:	f8 94       	cli
    572a:	de bf       	out	0x3e, r29	; 62
    572c:	0f be       	out	0x3f, r0	; 63
    572e:	cd bf       	out	0x3d, r28	; 61
    5730:	ed 01       	movw	r28, r26
    5732:	08 95       	ret

00005734 <itoa>:
    5734:	fb 01       	movw	r30, r22
    5736:	9f 01       	movw	r18, r30
    5738:	e8 94       	clt
    573a:	42 30       	cpi	r20, 0x02	; 2
    573c:	c4 f0       	brlt	.+48     	; 0x576e <itoa+0x3a>
    573e:	45 32       	cpi	r20, 0x25	; 37
    5740:	b4 f4       	brge	.+44     	; 0x576e <itoa+0x3a>
    5742:	4a 30       	cpi	r20, 0x0A	; 10
    5744:	29 f4       	brne	.+10     	; 0x5750 <itoa+0x1c>
    5746:	97 fb       	bst	r25, 7
    5748:	1e f4       	brtc	.+6      	; 0x5750 <itoa+0x1c>
    574a:	90 95       	com	r25
    574c:	81 95       	neg	r24
    574e:	9f 4f       	sbci	r25, 0xFF	; 255
    5750:	64 2f       	mov	r22, r20
    5752:	77 27       	eor	r23, r23
    5754:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <__udivmodhi4>
    5758:	80 5d       	subi	r24, 0xD0	; 208
    575a:	8a 33       	cpi	r24, 0x3A	; 58
    575c:	0c f0       	brlt	.+2      	; 0x5760 <itoa+0x2c>
    575e:	89 5d       	subi	r24, 0xD9	; 217
    5760:	81 93       	st	Z+, r24
    5762:	cb 01       	movw	r24, r22
    5764:	00 97       	sbiw	r24, 0x00	; 0
    5766:	a1 f7       	brne	.-24     	; 0x5750 <itoa+0x1c>
    5768:	16 f4       	brtc	.+4      	; 0x576e <itoa+0x3a>
    576a:	5d e2       	ldi	r21, 0x2D	; 45
    576c:	51 93       	st	Z+, r21
    576e:	10 82       	st	Z, r1
    5770:	c9 01       	movw	r24, r18
    5772:	0c 94 bb 2b 	jmp	0x5776	; 0x5776 <strrev>

00005776 <strrev>:
    5776:	dc 01       	movw	r26, r24
    5778:	fc 01       	movw	r30, r24
    577a:	67 2f       	mov	r22, r23
    577c:	71 91       	ld	r23, Z+
    577e:	77 23       	and	r23, r23
    5780:	e1 f7       	brne	.-8      	; 0x577a <strrev+0x4>
    5782:	32 97       	sbiw	r30, 0x02	; 2
    5784:	04 c0       	rjmp	.+8      	; 0x578e <strrev+0x18>
    5786:	7c 91       	ld	r23, X
    5788:	6d 93       	st	X+, r22
    578a:	70 83       	st	Z, r23
    578c:	62 91       	ld	r22, -Z
    578e:	ae 17       	cp	r26, r30
    5790:	bf 07       	cpc	r27, r31
    5792:	c8 f3       	brcs	.-14     	; 0x5786 <strrev+0x10>
    5794:	08 95       	ret

00005796 <_exit>:
    5796:	f8 94       	cli

00005798 <__stop_program>:
    5798:	ff cf       	rjmp	.-2      	; 0x5798 <__stop_program>
